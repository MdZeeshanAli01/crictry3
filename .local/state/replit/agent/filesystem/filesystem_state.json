{"file_contents":{"FIREBASE_SETUP.md":{"content":"# üî• Firebase Setup Guide for Celestial Cricket Scoring App\n\n## Overview\nThis guide will help you set up Firebase integration for persistent team and player data storage in your cricket scoring application.\n\n## Current Status\n- ‚úÖ **Playing XI Selection**: Fixed with quick-add sample players feature\n- ‚úÖ **Firebase Integration**: Implemented with REST API approach\n- ‚úÖ **Fallback System**: Automatically uses localStorage if Firebase is not configured\n\n## Quick Start (Using Sample Players)\n\n### 1. Test the App Immediately\nThe app now includes a **Quick Add** feature that lets you instantly add sample players:\n\n1. Start the app: `npm run dev`\n2. Navigate to Team Setup\n3. For each team, click **\"Quick Add X\"** button to instantly add the required players\n4. Once both teams have 11+ players, you can select Playing XI\n5. Start your match!\n\n### 2. Sample Players Included\nThe app includes 15 professional cricket players:\n- **Batsmen**: Virat Kohli, Rohit Sharma, KL Rahul, Shikhar Dhawan, Suryakumar Yadav\n- **Bowlers**: Jasprit Bumrah, Mohammed Shami, Yuzvendra Chahal, Bhuvneshwar Kumar\n- **All-rounders**: Ravindra Jadeja, Hardik Pandya, Washington Sundar\n- **Wicket-keepers**: MS Dhoni, Rishabh Pant, Ishan Kishan\n\n## Firebase Setup (Optional - For Persistent Storage)\n\n### Step 1: Create Firebase Project\n1. Go to [Firebase Console](https://console.firebase.google.com/)\n2. Click \"Create a project\"\n3. Enter project name (e.g., \"cricket-scoring-app\")\n4. Enable Google Analytics (optional)\n5. Click \"Create project\"\n\n### Step 2: Enable Firestore Database\n1. In your Firebase project, go to \"Firestore Database\"\n2. Click \"Create database\"\n3. Choose \"Start in test mode\" (for development)\n4. Select a location close to your users\n5. Click \"Done\"\n\n### Step 3: Get Firebase Configuration\n1. Go to Project Settings (gear icon)\n2. Scroll down to \"Your apps\"\n3. Click \"Web app\" icon (`</>`)\n4. Register your app with a nickname\n5. Copy the configuration object\n\n### Step 4: Configure the App\n1. Open `src/config/firebase.ts`\n2. Replace the placeholder values with your Firebase config:\n\n```typescript\nconst firebaseConfig: FirebaseConfig = {\n  projectId: 'your-actual-project-id',        // Replace this\n  apiKey: 'your-actual-api-key',              // Replace this\n  authDomain: 'your-project-id.firebaseapp.com',\n  storageBucket: 'your-project-id.appspot.com',\n  messagingSenderId: '123456789',\n  appId: '1:123456789:web:abcdef123456'\n};\n```\n\n### Step 5: Set Firestore Security Rules (Development)\nIn Firebase Console > Firestore Database > Rules, use these rules for development:\n\n```javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Allow read/write access to all documents for development\n    match /{document=**} {\n      allow read, write: if true;\n    }\n  }\n}\n```\n\n**‚ö†Ô∏è Important**: Change these rules for production to secure your data!\n\n### Step 6: Test Firebase Integration\n1. Restart your app: `npm run dev`\n2. Check browser console - you should see \"Firebase database initialized successfully\"\n3. Save a team - it will be stored in Firebase Firestore\n4. Refresh the page - your teams should persist\n\n## Troubleshooting\n\n### Issue: \"Firebase not configured\" warning\n**Solution**: Update `src/config/firebase.ts` with your actual Firebase credentials.\n\n### Issue: Teams not saving to Firebase\n**Possible causes**:\n1. Incorrect Firebase configuration\n2. Firestore security rules too restrictive\n3. Network connectivity issues\n\n**Solution**: Check browser console for error messages and verify your Firebase setup.\n\n### Issue: Can't select Playing XI\n**Solution**: Each team needs at least 11 players. Use the \"Quick Add\" button to instantly add sample players.\n\n### Issue: CORS errors with Firebase\n**Solution**: The app uses Firebase REST API which should work without CORS issues. If you encounter problems, consider using the Firebase SDK instead.\n\n## Features\n\n### ‚úÖ What's Working\n- **Team Management**: Save, load, duplicate, and delete teams\n- **Player Management**: Add players manually or browse from database\n- **Quick Setup**: Instant sample player addition\n- **Playing XI Selection**: Choose 11 players from squad\n- **Persistent Storage**: Firebase integration with localStorage fallback\n- **Professional UI**: Glassmorphism design with accessibility compliance\n\n### üöß Coming Soon\n- Advanced match statistics\n- Undo/edit scoring functionality\n- Wagon wheel and pitch map visualization\n- Player career tracking\n- Tournament management\n\n## Database Structure\n\n### Teams Collection\n```json\n{\n  \"id\": \"team-123\",\n  \"name\": \"Mumbai Indians\",\n  \"fullRoster\": [...players],\n  \"captain\": \"player-id\",\n  \"wicketKeeper\": \"player-id\",\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\n  \"lastUsed\": \"2024-01-01T00:00:00Z\",\n  \"matchesPlayed\": 0,\n  \"wins\": 0,\n  \"losses\": 0,\n  \"draws\": 0\n}\n```\n\n### Players Collection\n```json\n{\n  \"id\": \"player-123\",\n  \"name\": \"Virat Kohli\",\n  \"role\": \"batsman\",\n  \"teamId\": \"team-123\",\n  \"careerStats\": {\n    \"matchesPlayed\": 100,\n    \"runsScored\": 5000,\n    \"wicketsTaken\": 0,\n    \"catches\": 50,\n    \"runOuts\": 10\n  },\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\n  \"lastUsed\": \"2024-01-01T00:00:00Z\"\n}\n```\n\n## Support\n\nIf you encounter any issues:\n1. Check the browser console for error messages\n2. Verify your Firebase configuration\n3. Ensure Firestore security rules allow read/write access\n4. Try the localStorage fallback by not configuring Firebase\n\nThe app is designed to work seamlessly with or without Firebase - you can start playing immediately with the sample players feature!\n","size_bytes":5590},"README.md":{"content":"# üèè Celestial Cricket Scoring App\n\nA **professional-grade cricket scoring application** built with modern web technologies, featuring comprehensive match management, real-time scoring, and advanced statistics tracking with a stunning cosmic glassmorphic UI.\n\n![Cricket Scoring Interface](./Gemini_Generated_Image_5zzdss5zzdss5zzd.png)\n\n## ‚ú® Features\n\n### üéØ **Professional Cricket Scoring**\n- **Complete Runs Scoring**: 0-6 runs with boundary animations\n- **Comprehensive Extras**: Wide+0-4, No Ball+0-6, Byes+1-4, Leg Byes+1-4\n- **Advanced Wicket Handling**: All dismissal types (bowled, LBW, caught, run out, etc.)\n- **Target Chase Logic**: Automatic target calculation and match completion detection\n- **Undo Functionality**: Mistake correction with full state restoration\n\n### üë• **Team & Player Management**\n- **Full Team Rosters**: Create teams with complete player databases\n- **Playing XI Selection**: Choose 11 players from team rosters\n- **Firebase Integration**: Cloud-based team and player storage\n- **Quick Setup**: Sample data generation for fast testing\n\n### üìä **Professional Statistics**\n- **Real-time Scorecards**: Live batting and bowling statistics\n- **Match Summary**: Comprehensive match analysis and awards\n- **Player Performance**: Individual statistics tracking (runs, balls, SR, economy)\n- **Over-by-over Breakdown**: Detailed ball-by-ball commentary\n\n### üéÆ **Advanced Match Features**\n- **Bowler Selection**: Enforces no consecutive overs rule\n- **Striker Management**: Mid-innings batsman changes\n- **Retired Hurt**: Injury management with return capability\n- **Innings Break**: Smooth transition between innings\n- **Match Formats**: T5, T10, T20, ODI support\n\n### üé® **Modern UI/UX**\n- **Cosmic Glassmorphic Design**: Futuristic, immersive interface\n- **Responsive Layout**: Works perfectly on desktop and mobile\n- **Color-coded Controls**: Intuitive visual organization\n- **Smooth Animations**: Enhanced user experience with Framer Motion\n\n## üöÄ Tech Stack\n\n- **Frontend**: React 18 with TypeScript\n- **Styling**: Tailwind CSS with custom glassmorphic design system\n- **Icons**: Lucide React\n- **Animations**: Framer Motion\n- **Database**: Firebase Firestore\n- **Build Tool**: Vite\n- **Package Manager**: npm\n\n## üì¶ Getting Started\n\n### Prerequisites\n\n- Node.js (v16 or higher)\n- npm or yarn\n- Firebase account (for cloud features)\n\n### Installation\n\n1. **Clone the repository**:\n```bash\ngit clone https://github.com/yourusername/celestial-cricket-scoring.git\ncd celestial-cricket-scoring\n```\n\n2. **Install dependencies**:\n```bash\nnpm install\n```\n\n3. **Set up Firebase** (optional but recommended):\n   - Create a Firebase project at [Firebase Console](https://console.firebase.google.com)\n   - Enable Firestore Database\n   - Copy your Firebase config and update `src/config/firebase.ts`\n   - See `FIREBASE_SETUP.md` for detailed instructions\n\n4. **Start the development server**:\n```bash\nnpm run dev\n```\n\n5. **Open your browser** and navigate to [http://localhost:5173](http://localhost:5173)\n\n## üéØ Usage Guide\n\n### 1. **Team Setup**\n- Create teams using the team management interface\n- Add players with names and roles\n- Save teams to Firebase for future use\n- Load existing teams from the cloud database\n\n### 2. **Match Setup**\n- Select two teams for the match\n- Choose playing XI (11 players) from each team roster\n- Set match format (T5, T10, T20, ODI) or custom overs\n- Conduct toss and select batting/bowling decision\n\n### 3. **Live Scoring**\n- Use the professional scoring interface for real-time match tracking\n- Score runs (0-6) with automatic strike rotation\n- Handle all types of extras with comprehensive options\n- Manage wickets with detailed dismissal types\n- Switch bowlers with automatic over completion\n\n### 4. **Advanced Features**\n- Change striker mid-innings using the striker modal\n- Handle retired hurt players with return capability\n- View comprehensive match statistics in the scorecard modal\n- Use undo functionality to correct scoring mistakes\n\n## üìÅ Project Structure\n\n```\nsrc/\n‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îú‚îÄ‚îÄ ProfessionalScoringInterfaceV3.tsx  # Main scoring interface\n‚îÇ   ‚îú‚îÄ‚îÄ TeamSetup.tsx                       # Team management\n‚îÇ   ‚îú‚îÄ‚îÄ GlassCard.tsx                       # Reusable UI component\n‚îÇ   ‚îî‚îÄ‚îÄ ui/                                 # UI components\n‚îú‚îÄ‚îÄ types/\n‚îÇ   ‚îî‚îÄ‚îÄ cricket.ts                          # TypeScript interfaces\n‚îú‚îÄ‚îÄ config/\n‚îÇ   ‚îî‚îÄ‚îÄ firebase.ts                         # Firebase configuration\n‚îú‚îÄ‚îÄ services/\n‚îÇ   ‚îî‚îÄ‚îÄ databaseService.ts                  # Database operations\n‚îî‚îÄ‚îÄ styles/\n    ‚îî‚îÄ‚îÄ globals.css                         # Global styles\n```\n\n## üîß Development\n\n### Build for Production\n```bash\nnpm run build\n```\n\n### Type Checking\n```bash\nnpm run type-check\n```\n\n### Linting\n```bash\nnpm run lint\n```\n\n## üåü Key Components\n\n### **ProfessionalScoringInterfaceV3**\nThe main scoring interface featuring:\n- Real-time match scoring\n- Professional batting and bowling scorecards\n- Advanced modals for striker, bowler, and wicket management\n- Comprehensive extras handling\n- Target chase and match completion logic\n\n### **TeamSetup**\nComplete team management system:\n- Team creation and editing\n- Player roster management\n- Playing XI selection\n- Firebase integration for cloud storage\n\n### **GlassCard**\nReusable glassmorphic UI component providing the signature cosmic design aesthetic throughout the application.\n\n## üé® Design System\n\nThe application features a **cosmic glassmorphic design** with:\n- **Glass morphism effects** with backdrop blur and transparency\n- **Gradient backgrounds** with cosmic color schemes\n- **Color-coded interfaces**: Green (batting), Purple (bowling), Red (wickets), Yellow/Orange/Blue (extras)\n- **Responsive design** optimized for all screen sizes\n- **Smooth animations** for enhanced user experience\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üôè Acknowledgments\n\n- **Professional Cricket Apps**: Inspired by Cricbuzz, Cricheroes, and other professional cricket scoring applications\n- **Modern Web Technologies**: Built with the latest React, TypeScript, and Tailwind CSS\n- **Cosmic Design**: Features a unique futuristic glassmorphic design theme\n- **Firebase**: Powered by Google Firebase for reliable cloud storage\n\n## üìû Support\n\nIf you encounter any issues or have questions, please:\n1. Check the [FIREBASE_SETUP.md](FIREBASE_SETUP.md) for Firebase configuration help\n2. Review the [FUNCTIONALITY_TEST_REPORT.md](FUNCTIONALITY_TEST_REPORT.md) for feature testing\n3. Open an issue on GitHub with detailed information\n- **Live Badge**: Animated shine effect for active matches\n- **Score Display**: Tabular numbers with gradient text\n- **Recent Balls**: Color-coded ball indicators with animations\n- **Cosmic Atmosphere**: Stadium lighting effects and shadows\n\n---\n\n**Experience the future of cricket scoring with Celestial Cricket! üèè‚ú®**\n","size_bytes":7331},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Celestial Cricket Scoring App - Replit Setup\n\n## Project Overview\nA professional-grade cricket scoring application built with React, TypeScript, and Firebase. Features comprehensive match management, real-time scoring, and advanced statistics tracking with a cosmic glassmorphic UI.\n\n## Recent Changes (September 6, 2025)\n- ‚úÖ **Environment Setup**: Configured for Replit environment\n- ‚úÖ **Vite Configuration**: Updated to use host 0.0.0.0 and port 5000\n- ‚úÖ **Development Workflow**: Set up npm run dev workflow\n- ‚úÖ **Deployment Configuration**: Configured for autoscale deployment\n- ‚úÖ **Dependencies**: All npm packages installed successfully\n\n## Project Architecture\n\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite\n- **Styling**: Tailwind CSS with glassmorphic design\n- **UI Components**: Radix UI, Lucide React icons\n- **Animations**: Framer Motion\n- **Port**: 5000 (configured for Replit)\n\n### Backend/Database\n- **Database**: Firebase Firestore (with localStorage fallback)\n- **Configuration**: Pre-configured Firebase project in src/config/firebase.ts\n- **Service**: REST API approach for database operations\n\n### Key Features\n- Professional cricket scoring interface\n- Team and player management\n- Real-time match statistics\n- Multiple match formats (T5, T10, T20, ODI)\n- Cosmic glassmorphic UI design\n\n## Development Commands\n- `npm run dev` - Start development server (configured for port 5000)\n- `npm run build` - Build for production\n- `npm run preview` - Preview production build\n- `npm run lint` - Run ESLint\n\n## Deployment\n- **Type**: Autoscale (stateless frontend)\n- **Build Command**: npm run build\n- **Run Command**: npm run preview\n- **Domain**: Available via REPLIT_DEV_DOMAIN\n\n## File Structure\n```\nsrc/\n‚îú‚îÄ‚îÄ components/          # React components\n‚îú‚îÄ‚îÄ config/             # Firebase configuration\n‚îú‚îÄ‚îÄ constants/          # Cricket game constants\n‚îú‚îÄ‚îÄ hooks/              # Custom React hooks\n‚îú‚îÄ‚îÄ lib/                # Utilities\n‚îú‚îÄ‚îÄ pages/              # Main app pages\n‚îú‚îÄ‚îÄ services/           # Database services\n‚îú‚îÄ‚îÄ types/              # TypeScript type definitions\n‚îî‚îÄ‚îÄ utils/              # Helper functions\n```\n\n## User Preferences\n- Modern, professional cricket scoring application\n- Glassmorphic UI with cosmic theme\n- Firebase integration for cloud storage\n- Responsive design for all devices\n\n## Notes\n- Firebase configuration is already set up with working credentials\n- Application includes sample data for quick testing\n- Falls back to localStorage if Firebase is unavailable\n- Fully functional professional cricket scoring system","size_bytes":2655},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        // Celestial Cricket Colors\n        glass: {\n          DEFAULT: \"hsl(var(--glass))\",\n          border: \"hsl(var(--glass-border))\",\n        },\n        wicket: \"hsl(var(--wicket))\",\n        'boundary-4': \"hsl(var(--boundary-4))\",\n        'boundary-6': \"hsl(var(--boundary-6))\",\n        'dot-ball': \"hsl(var(--dot-ball))\",\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      boxShadow: {\n        'glow-primary': '0 0 20px hsl(var(--primary))',\n        'glow-secondary': '0 0 20px hsl(var(--secondary))',\n        'glow-accent': '0 0 20px hsl(var(--accent))',\n      }\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n","size_bytes":2669},"vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    strictPort: true,\n    allowedHosts: true,\n  },\n  preview: {\n    host: '0.0.0.0',\n    port: 5000,\n    strictPort: true,\n    allowedHosts: true,\n  },\n})\n","size_bytes":471},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Celestial Cricket Design System - Cosmic Gradients & Dark Theme\nAll colors MUST be HSL for the immersive cricket experience\n*/\n\n@layer base {\n  :root {\n    /* Cosmic Dark Theme - Night Stadium Atmosphere */\n    --background: 225 15% 6%;\n    --foreground: 210 40% 95%;\n\n    /* Glassmorphism Cards */\n    --card: 225 15% 8%;\n    --card-foreground: 210 40% 95%;\n    --glass: 225 15% 10%;\n    --glass-border: 210 100% 70%;\n\n    /* Popover & Modals */\n    --popover: 225 15% 8%;\n    --popover-foreground: 210 40% 95%;\n\n    /* Primary - Electric Cyan */\n    --primary: 191 100% 50%;\n    --primary-foreground: 225 15% 6%;\n    --primary-glow: 191 100% 70%;\n\n    /* Secondary - Cosmic Purple */\n    --secondary: 270 80% 60%;\n    --secondary-foreground: 210 40% 95%;\n    --secondary-glow: 270 80% 80%;\n\n    /* Accent - Neon Green (Cricket Field) */\n    --accent: 120 100% 50%;\n    --accent-foreground: 225 15% 6%;\n    --accent-glow: 120 100% 70%;\n\n    /* Muted - Subtle Blues */\n    --muted: 225 15% 15%;\n    --muted-foreground: 210 20% 65%;\n\n    /* Destructive - Warning Red */\n    --destructive: 0 80% 60%;\n    --destructive-foreground: 210 40% 95%;\n\n    /* Borders & Inputs */\n    --border: 225 15% 20%;\n    --input: 225 15% 12%;\n    --ring: 191 100% 50%;\n\n    /* Aurora Gradients */\n    --gradient-aurora: linear-gradient(135deg, hsl(191, 100%, 50%), hsl(270, 80%, 60%), hsl(120, 100%, 50%));\n    --gradient-cosmic: linear-gradient(180deg, hsl(225, 15%, 6%), hsl(225, 15%, 10%));\n    --gradient-shimmer: linear-gradient(90deg, transparent, hsl(191, 100%, 70%), transparent);\n    \n    /* Light Effects */\n    --glow-primary: 0 0 20px hsl(191, 100%, 50%);\n    --glow-secondary: 0 0 20px hsl(270, 80%, 60%);\n    --glow-accent: 0 0 20px hsl(120, 100%, 50%);\n    \n    /* Stadium Lighting */\n    --stadium-light: 45 100% 85%;\n    --stadium-shadow: 225 15% 3%;\n    \n    /* Wicket & Runs Colors */\n    --wicket: 0 80% 60%;\n    --boundary-4: 45 100% 60%;\n    --boundary-6: 270 80% 70%;\n    --dot-ball: 210 20% 50%;\n\n    --radius: 0.75rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n    overflow-x: hidden;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  /* Enhanced Glassmorphism Base */\n  .glass-card {\n    @apply backdrop-blur-2xl bg-glass/40 border border-glass-border/30 rounded-xl;\n    box-shadow: \n      0 8px 32px 0 rgba(31, 38, 135, 0.6),\n      0 4px 16px 0 rgba(0, 0, 0, 0.3),\n      inset 0 1px 0 0 rgba(255, 255, 255, 0.1),\n      inset 0 -1px 0 0 rgba(255, 255, 255, 0.05);\n    background: linear-gradient(\n      135deg,\n      rgba(255, 255, 255, 0.1) 0%,\n      rgba(255, 255, 255, 0.05) 50%,\n      rgba(0, 0, 0, 0.1) 100%\n    );\n  }\n\n  /* Aurora Border Animation */\n  .aurora-border {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .aurora-border::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    padding: 1px;\n    background: var(--gradient-aurora);\n    border-radius: inherit;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: xor;\n    animation: aurora-rotate 3s linear infinite;\n  }\n\n  /* Shimmer Text Effect */\n  .shimmer-text {\n    background: var(--gradient-shimmer);\n    background-size: 200% 100%;\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    animation: shimmer 2s ease-in-out infinite;\n  }\n\n  /* Pulse Glow Effect */\n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite alternate;\n  }\n\n  /* Magnetic Hover Effect */\n  .magnetic-hover {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .magnetic-hover:hover {\n    transform: translateY(-2px) scale(1.02);\n  }\n\n  /* Stadium Atmosphere */\n  .stadium-glow {\n    background: radial-gradient(circle at center, hsl(var(--primary-glow))/10, transparent 70%);\n  }\n\n  /* Score Display Styles */\n  .score-display {\n    font-variant-numeric: tabular-nums;\n    font-weight: 700;\n    letter-spacing: -0.025em;\n  }\n\n  /* Live Badge */\n  .live-badge {\n    @apply relative overflow-hidden;\n  }\n\n  .live-badge::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n    animation: live-shine 2s infinite;\n  }\n}\n\n@layer utilities {\n  /* Custom Animations */\n  @keyframes aurora-rotate {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  @keyframes shimmer {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n  }\n\n  @keyframes pulse-glow {\n    0% { \n      box-shadow: var(--glow-primary);\n      filter: brightness(1);\n    }\n    100% { \n      box-shadow: var(--glow-primary), 0 0 40px hsl(var(--primary-glow));\n      filter: brightness(1.1);\n    }\n  }\n\n  @keyframes live-shine {\n    0% { left: -100%; }\n    100% { left: 100%; }\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px) rotate(0deg); }\n    50% { transform: translateY(-10px) rotate(5deg); }\n  }\n\n  /* Enhanced Gradient Text Utilities */\n  .text-gradient-primary {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-glow)));\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-shadow: 0 0 20px hsl(var(--primary-glow));\n    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.5));\n  }\n\n  .text-gradient-aurora {\n    background: var(--gradient-aurora);\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.8)) drop-shadow(0 0 20px rgba(0, 255, 255, 0.3));\n  }\n\n  /* High Contrast Text */\n  .text-enhanced {\n    text-shadow: \n      0 0 10px rgba(0, 0, 0, 0.8),\n      0 2px 4px rgba(0, 0, 0, 0.6),\n      0 0 20px hsl(var(--primary-glow));\n    color: hsl(var(--foreground));\n  }\n\n  /* Enhanced Readability */\n  .readable-text {\n    background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.6));\n    backdrop-filter: blur(10px);\n    border-radius: 8px;\n    padding: 0.5rem 1rem;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n}\n","size_bytes":6311},"src/main.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { Toaster } from 'sonner'\nimport Index from './pages/Index.tsx'\nimport { initializeFirebaseDatabase } from './config/firebase'\nimport './index.css'\n\n// Initialize Firebase database service\nif (!initializeFirebaseDatabase()) {\n  throw new Error('Failed to initialize Firebase. Check your configuration.');\n}\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <Index />\n    <Toaster \n      position=\"top-right\"\n      toastOptions={{\n        style: {\n          background: 'hsl(var(--glass))',\n          color: 'hsl(var(--foreground))',\n          border: '1px solid hsl(var(--glass-border))',\n          backdropFilter: 'blur(12px)',\n        }\n      }}\n    />\n  </React.StrictMode>,\n)\n","size_bytes":791},"src/components/GlassCard.tsx":{"content":"import { ReactNode } from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '@/lib/utils';\n\ninterface GlassCardProps {\n  children: ReactNode;\n  className?: string;\n  glow?: boolean;\n  aurora?: boolean;\n  hover?: boolean;\n  tilt?: boolean;\n}\n\nexport default function GlassCard({ \n  children, \n  className, \n  glow = false, \n  aurora = false, \n  hover = false,\n  tilt = false \n}: GlassCardProps) {\n  return (\n    <motion.div\n      className={cn(\n        'glass-card',\n        glow && 'pulse-glow',\n        aurora && 'aurora-border',\n        hover && 'magnetic-hover',\n        className\n      )}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6 }}\n      whileHover={tilt ? { \n        rotateX: 5, \n        rotateY: 5, \n        scale: 1.02,\n        transition: { duration: 0.2 }\n      } : hover ? {\n        y: -4,\n        scale: 1.02,\n        transition: { duration: 0.2 }\n      } : {}}\n      style={{\n        transformStyle: 'preserve-3d',\n        perspective: 1000\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n","size_bytes":1097},"src/components/PlayerBrowser.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { useTeamStorage } from '@/hooks/useTeamStorage';\nimport { Player } from '@/types/cricket';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Search, UserPlus, Users, \n  Crown, Shield, Target, Activity, Calendar\n} from 'lucide-react';\n\ninterface PlayerBrowserProps {\n  open: boolean;\n  onClose: () => void;\n  onSelectPlayer: (player: Player) => void;\n  excludePlayerIds?: string[];\n}\n\nexport default function PlayerBrowser({ open, onClose, onSelectPlayer, excludePlayerIds = [] }: PlayerBrowserProps) {\n  const { savedPlayers, isLoading, error } = useTeamStorage();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [roleFilter, setRoleFilter] = useState<Player['role'] | 'all'>('all');\n  const [sortBy, setSortBy] = useState<'name' | 'role' | 'recent'>('name');\n\n  // Convert database players to Player format\n  const convertToPlayer = (dbPlayer: any): Player => ({\n    id: dbPlayer.id,\n    name: dbPlayer.name,\n    role: dbPlayer.role,\n    battingStats: {\n      status: null,\n      runs: dbPlayer.careerStats?.runsScored || 0,\n      ballsFaced: 0,\n      fours: 0,\n      sixes: 0,\n      strikeRate: 0,\n      isOut: false,\n      isRetiredHurt: false\n    },\n    bowlingStats: {\n      overs: 0,\n      balls: 0,\n      runs: 0,\n      wickets: dbPlayer.careerStats?.wicketsTaken || 0,\n\n      economyRate: 0,\n      wides: 0,\n      noBalls: 0\n    },\n    fieldingStats: {\n      catches: dbPlayer.careerStats?.catches || 0,\n      runOuts: dbPlayer.careerStats?.runOuts || 0,\n      stumpings: 0\n    }\n  });\n\n  // Filter and sort players\n  const filteredPlayers = savedPlayers\n    .filter(player => !excludePlayerIds.includes(player.id))\n    .filter(player => {\n      const matchesSearch = player.name.toLowerCase().includes(searchQuery.toLowerCase());\n      const matchesRole = roleFilter === 'all' || player.role === roleFilter;\n      return matchesSearch && matchesRole;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'role':\n          return a.role.localeCompare(b.role);\n        case 'recent':\n          return new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime();\n        default:\n          return 0;\n      }\n    });\n\n  const handleSelectPlayer = (dbPlayer: any) => {\n    const player = convertToPlayer(dbPlayer);\n    onSelectPlayer(player);\n    toast({\n      title: \"Player Added! üë§\",\n      description: `${player.name} (${player.role}) has been added to the team`,\n    });\n    onClose();\n  };\n\n  const getRoleIcon = (role: Player['role']) => {\n    switch (role) {\n      case 'batsman':\n        return <Target className=\"h-4 w-4 text-blue-400\" />;\n      case 'bowler':\n        return <Activity className=\"h-4 w-4 text-red-400\" />;\n      case 'allrounder':\n        return <Crown className=\"h-4 w-4 text-purple-400\" />;\n      case 'wicketkeeper':\n        return <Shield className=\"h-4 w-4 text-green-400\" />;\n      default:\n        return <Users className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getRoleColor = (role: Player['role']) => {\n    switch (role) {\n      case 'batsman':\n        return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'bowler':\n        return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'allrounder':\n        return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n      case 'wicketkeeper':\n        return 'bg-green-500/20 text-green-400 border-green-500/30';\n      default:\n        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"glass-card border-glass-border/30 max-w-4xl max-h-[80vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"text-gradient-primary flex items-center\">\n            <UserPlus className=\"h-5 w-5 mr-2\" />\n            Browse Saved Players\n          </DialogTitle>\n          <DialogDescription>\n            Search and select players from your database to add to the current team.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Search and Filter Controls */}\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search players...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 glass-card border-glass-border/20\"\n              />\n            </div>\n\n            {/* Role Filter */}\n            <div>\n              <select\n                value={roleFilter}\n                onChange={(e) => setRoleFilter(e.target.value as Player['role'] | 'all')}\n                className=\"w-full p-2 glass-card border-glass-border/20 rounded-md bg-background text-foreground\"\n              >\n                <option value=\"all\">All Roles</option>\n                <option value=\"batsman\">Batsman</option>\n                <option value=\"bowler\">Bowler</option>\n                <option value=\"allrounder\">All-rounder</option>\n                <option value=\"wicketkeeper\">Wicket-keeper</option>\n              </select>\n            </div>\n\n            {/* Sort */}\n            <div>\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value as 'name' | 'role' | 'recent')}\n                className=\"w-full p-2 glass-card border-glass-border/20 rounded-md bg-background text-foreground\"\n              >\n                <option value=\"name\">Sort by Name</option>\n                <option value=\"role\">Sort by Role</option>\n                <option value=\"recent\">Recently Used</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Stats Summary */}\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n            <span>\n              {filteredPlayers.length} of {savedPlayers.length} players\n              {excludePlayerIds.length > 0 && ` (${excludePlayerIds.length} excluded)`}\n            </span>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"flex items-center\">\n                <Target className=\"h-3 w-3 mr-1 text-blue-400\" />\n                {savedPlayers.filter(p => p.role === 'batsman').length}\n              </span>\n              <span className=\"flex items-center\">\n                <Activity className=\"h-3 w-3 mr-1 text-red-400\" />\n                {savedPlayers.filter(p => p.role === 'bowler').length}\n              </span>\n              <span className=\"flex items-center\">\n                <Crown className=\"h-3 w-3 mr-1 text-purple-400\" />\n                {savedPlayers.filter(p => p.role === 'allrounder').length}\n              </span>\n              <span className=\"flex items-center\">\n                <Shield className=\"h-3 w-3 mr-1 text-green-400\" />\n                {savedPlayers.filter(p => p.role === 'wicketkeeper').length}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Players List */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin h-8 w-8 border-2 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <div className=\"text-muted-foreground\">Loading players...</div>\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-red-400 mb-2\">Error loading players</div>\n              <div className=\"text-sm text-muted-foreground\">{error}</div>\n            </div>\n          ) : filteredPlayers.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <div className=\"text-lg font-medium mb-2\">\n                {searchQuery || roleFilter !== 'all' ? 'No matching players' : 'No saved players'}\n              </div>\n              <div className=\"text-muted-foreground\">\n                {searchQuery || roleFilter !== 'all' \n                  ? 'Try adjusting your search or filters' \n                  : 'Add players to teams to see them here'\n                }\n              </div>\n            </div>\n          ) : (\n            <div className=\"grid gap-3\">\n              {filteredPlayers.map((player) => (\n                <motion.div\n                  key={player.id}\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"p-4 glass-card border-glass-border/20 rounded-lg hover:border-glass-border/40 transition-all cursor-pointer\"\n                  onClick={() => handleSelectPlayer(player)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      {getRoleIcon(player.role)}\n                      <div>\n                        <div className=\"font-semibold text-lg\">{player.name}</div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`text-xs px-2 py-1 rounded border ${getRoleColor(player.role)}`}>\n                            {player.role.charAt(0).toUpperCase() + player.role.slice(1)}\n                          </span>\n                          <span className=\"text-xs text-muted-foreground flex items-center\">\n                            <Calendar className=\"h-3 w-3 mr-1\" />\n                            {new Date(player.lastUsed).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Career Stats */}\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">Career Stats</div>\n                      <div className=\"text-xs text-muted-foreground space-y-1\">\n                        {player.careerStats && (\n                          <>\n                            <div>Matches: {player.careerStats.matchesPlayed || 0}</div>\n                            <div className=\"flex space-x-3\">\n                              <span>Runs: {player.careerStats.runsScored || 0}</span>\n                              <span>Wickets: {player.careerStats.wicketsTaken || 0}</span>\n                            </div>\n                            <div className=\"flex space-x-3\">\n                              <span>Catches: {player.careerStats.catches || 0}</span>\n                              <span>Run-outs: {player.careerStats.runOuts || 0}</span>\n                            </div>\n                          </>\n                        )}\n                      </div>\n                    </div>\n\n                    <Button\n                      variant=\"cosmic\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleSelectPlayer(player);\n                      }}\n                    >\n                      <UserPlus className=\"h-3 w-3 mr-1\" />\n                      Add\n                    </Button>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-end space-x-3 pt-4 border-t border-glass-border/20\">\n          <Button onClick={onClose} variant=\"ghost\">\n            Cancel\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12058},"src/components/ProfessionalCricketApp.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport GlassCard from './GlassCard';\nimport TeamSetup from './TeamSetup';\nimport TossSetup from './TossSetup';\nimport ProfessionalScoringInterfaceV4 from './ProfessionalScoringInterfaceV4';\nimport { Match, Team, Innings } from '@/types/cricket';\nimport { ArrowLeft, Play, Users, Coins, Target, Home } from 'lucide-react';\nimport { getDatabaseService } from '@/services/databaseService';\nimport { initializeFirebaseDatabase } from '@/config/firebase';\n\ntype AppState = 'home' | 'teamSetup' | 'toss' | 'preMatch' | 'live' | 'complete';\n\nexport default function ProfessionalCricketApp() {\n  const [appState, setAppState] = useState<AppState>('home');\n  const [currentMatch, setCurrentMatch] = useState<Match | null>(null);\n  const [team1, setTeam1] = useState<Team | null>(null);\n  const [team2, setTeam2] = useState<Team | null>(null);\n  const [matchOvers, setMatchOvers] = useState<number>(20);\n  const [isLoadingMatch, setIsLoadingMatch] = useState(true);\n  const [firebaseInitialized, setFirebaseInitialized] = useState(false);\n\n  // FIREBASE-ONLY PERSISTENCE: Initialize Firebase and restore match state on page refresh\n  useEffect(() => {\n    const initializeAndRestoreMatch = async () => {\n      try {\n        // Initialize Firebase database service\n        console.log('FIREBASE: Initializing Firebase database...');\n        const initialized = initializeFirebaseDatabase();\n        \n        if (!initialized) {\n          console.error('FIREBASE: Failed to initialize Firebase database');\n          setIsLoadingMatch(false);\n          return;\n        }\n        \n        setFirebaseInitialized(true);\n        console.log('FIREBASE: Database initialized successfully');\n        \n        // Look for any active (incomplete) match in Firebase\n        const databaseService = getDatabaseService();\n        console.log('FIREBASE: Fetching all matches to find active match...');\n        \n        const matches = await databaseService.fetchAllMatches();\n        console.log('FIREBASE: Fetched', matches.length, 'total matches');\n        \n        // Find the most recent active match (incomplete and live)\n        const activeMatch = matches\n          .filter((m: Match) => {\n            const isNotComplete = !m.isComplete;\n            const isLive = m.isLive;\n            console.log('FIREBASE: Checking match:', {\n              id: m.id,\n              isComplete: m.isComplete,\n              isLive: m.isLive,\n              shouldRestore: isNotComplete && isLive\n            });\n            return isNotComplete && isLive;\n          })\n          .sort((a: Match, b: Match) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];\n        \n        if (activeMatch) {\n          // Double-check the match is truly active before restoring\n          if (!activeMatch.isComplete && activeMatch.isLive) {\n            console.log('FIREBASE: Found active match, restoring state:', {\n              id: activeMatch.id,\n              isLive: activeMatch.isLive,\n              isComplete: activeMatch.isComplete,\n              team1: activeMatch.team1.name,\n              team2: activeMatch.team2.name,\n              currentInnings: activeMatch.currentInnings\n            });\n            \n            setCurrentMatch(activeMatch);\n            setTeam1(activeMatch.team1);\n            setTeam2(activeMatch.team2);\n            setMatchOvers(activeMatch.totalOvers);\n            \n            // Always go to live state for active matches\n            setAppState('live');\n          } else {\n            console.log('FIREBASE: Match found but not truly active, staying on home screen:', {\n              isComplete: activeMatch.isComplete,\n              isLive: activeMatch.isLive\n            });\n          }\n        } else {\n          console.log('FIREBASE: No active match found, staying on home screen');\n        }\n        \n      } catch (error) {\n        console.error('FIREBASE: Error during initialization or match restoration:', error);\n      } finally {\n        setIsLoadingMatch(false);\n      }\n    };\n\n    initializeAndRestoreMatch();\n  }, []);\n\n  const startNewMatch = () => {\n    setAppState('teamSetup');\n  };\n\n  const handleTeamsReady = (t1: Team, t2: Team, matchOvers: number) => {\n    setTeam1(t1);\n    setTeam2(t2);\n    setMatchOvers(matchOvers);\n    setAppState('toss');\n  };\n\n  const handleTossComplete = (tossWinner: string, decision: 'bat' | 'bowl') => {\n    if (!team1 || !team2) return;\n\n    // Determine batting and bowling teams based on toss decision\n    const battingTeam = decision === 'bat' ? \n      (tossWinner === team1.name ? team1 : team2) :\n      (tossWinner === team1.name ? team2 : team1);\n\n    const bowlingTeam = decision === 'bowl' ?\n      (tossWinner === team1.name ? team1 : team2) :\n      (tossWinner === team1.name ? team2 : team1);\n\n    // Create initial match object\n    const match: Match = {\n      id: Date.now().toString(),\n      team1,\n      team2,\n      totalOvers: matchOvers, // Use custom overs from team setup\n      tossWinner,\n      tossDecision: decision,\n      battingFirst: battingTeam.name,\n      currentInnings: 1,\n      innings: {\n        first: createNewInnings(1, battingTeam.id, bowlingTeam.id)\n      },\n      isLive: false,\n      isComplete: false,\n      matchType: 'T20',\n      date: new Date()\n    };\n\n    console.log('Match setup:', {\n      tossWinner,\n      decision,\n      battingTeam: battingTeam.name,\n      bowlingTeam: bowlingTeam.name\n    });\n\n    setCurrentMatch(match);\n    setAppState('preMatch');\n  };\n\n  const createNewInnings = (number: 1 | 2, battingTeamId: string, bowlingTeamId: string): Innings => {\n    return {\n      number,\n      battingTeam: battingTeamId,\n      bowlingTeam: bowlingTeamId,\n      score: 0,\n      wickets: 0,\n      overs: 0,\n      balls: 0,\n      extras: 0,\n      isComplete: false,\n      currentBatsmen: {\n        striker: '', // Will be set in pre-match setup\n        nonStriker: ''\n      },\n      currentBowler: '', // Will be set in pre-match setup\n      overHistory: [],\n      ballHistory: [],\n      partnerships: [],\n      commentary: []\n    };\n  };\n\n  const startMatch = () => {\n    if (currentMatch) {\n      const updatedMatch = { ...currentMatch, isLive: true };\n      setCurrentMatch(updatedMatch);\n      setAppState('live');\n      \n      // FIREBASE-ONLY: Save match to Firebase when starting\n      handleMatchUpdate(updatedMatch);\n    }\n  };\n\n  const handleMatchUpdate = async (updatedMatch: Match) => {\n    setCurrentMatch(updatedMatch);\n    \n    // FIREBASE-ONLY: Save match state exclusively to Firebase\n    if (!firebaseInitialized) {\n      console.error('FIREBASE: Cannot save match - Firebase not initialized');\n      return;\n    }\n    \n    try {\n      const databaseService = getDatabaseService();\n      await databaseService.saveMatch(updatedMatch);\n      console.log('FIREBASE: Match saved successfully:', updatedMatch.id);\n      \n      // Don't auto-navigate to basic complete screen - let the comprehensive scorecard modal handle match completion\n      // The detailed scorecard in ProfessionalScoringInterfaceV3 provides much better UX\n      // if (updatedMatch.isComplete) {\n      //   setAppState('complete');\n      // }\n    } catch (error) {\n      console.error('FIREBASE: Failed to save match:', error);\n      // TODO: Add user notification for save failures\n    }\n  };\n\n  const goBack = () => {\n    switch (appState) {\n      case 'teamSetup':\n        setAppState('home');\n        break;\n      case 'toss':\n        setAppState('teamSetup');\n        break;\n      case 'preMatch':\n        setAppState('toss');\n        break;\n      case 'live':\n        setAppState('preMatch');\n        break;\n      default:\n        setAppState('home');\n    }\n  };\n\n  const resetApp = () => {\n    setAppState('home');\n    setCurrentMatch(null);\n    setTeam1(null);\n    setTeam2(null);\n  };\n\n  const handleResumeMatch = (match: Match) => {\n    setCurrentMatch(match);\n    setTeam1(match.team1);\n    setTeam2(match.team2);\n    setAppState('live');\n    // Ensure match state is properly updated\n    handleMatchUpdate(match);\n  };\n\n  // FIREBASE-ONLY: Show loading screen while initializing Firebase and restoring match state\n  if (isLoadingMatch) {\n    return (\n      <div className=\"min-h-screen relative flex items-center justify-center\">\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"text-center space-y-4\"\n        >\n          <div className=\"text-2xl font-bold text-gradient-aurora\">\n            Connecting to Firebase...\n          </div>\n          <div className=\"text-slate-400\">\n            Initializing database and checking for active matches\n          </div>\n          <div className=\"animate-spin h-8 w-8 border-2 border-purple-500 border-t-transparent rounded-full mx-auto\"></div>\n        </motion.div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen relative\">\n      {/* Navigation Header */}\n      {appState !== 'home' && (\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"relative z-10 p-3 sm:p-4\"\n        >\n          <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n            <Button\n              variant=\"ghost\"\n              onClick={goBack}\n              className=\"flex items-center space-x-1 sm:space-x-2 min-h-[44px] text-sm sm:text-base\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Back</span>\n              <span className=\"sm:hidden\">‚Üê</span>\n            </Button>\n            \n            {/* Progress Indicator */}\n            <div className=\"flex items-center space-x-1 sm:space-x-2\">\n              <div className={`w-2 h-2 sm:w-3 sm:h-3 rounded-full ${\n                ['teamSetup', 'toss', 'preMatch', 'live', 'complete'].includes(appState) \n                  ? 'bg-accent' : 'bg-muted'\n              }`} />\n              <div className={`w-2 h-2 sm:w-3 sm:h-3 rounded-full ${\n                ['toss', 'preMatch', 'live', 'complete'].includes(appState) \n                  ? 'bg-accent' : 'bg-muted'\n              }`} />\n              <div className={`w-2 h-2 sm:w-3 sm:h-3 rounded-full ${\n                ['preMatch', 'live', 'complete'].includes(appState) \n                  ? 'bg-accent' : 'bg-muted'\n              }`} />\n              <div className={`w-2 h-2 sm:w-3 sm:h-3 rounded-full ${\n                ['live', 'complete'].includes(appState) \n                  ? 'bg-accent' : 'bg-muted'\n              }`} />\n            </div>\n\n            <Button\n              variant=\"ghost\"\n              onClick={resetApp}\n              className=\"text-muted-foreground min-h-[44px] flex items-center space-x-1 text-sm sm:text-base\"\n            >\n              <Home className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">Start Over</span>\n              <span className=\"sm:hidden\">üè†</span>\n            </Button>\n          </div>\n        </motion.div>\n      )}\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 pb-4 sm:pb-6\">\n        <AnimatePresence mode=\"wait\">\n          {appState === 'home' && (\n            <motion.div\n              key=\"home\"\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 1.05 }}\n              transition={{ duration: 0.5 }}\n            >\n              <HomeScreen onStartMatch={startNewMatch} onResumeMatch={handleResumeMatch} />\n            </motion.div>\n          )}\n\n          {appState === 'teamSetup' && (\n            <motion.div\n              key=\"teamSetup\"\n              initial={{ opacity: 0, x: 100 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -100 }}\n              transition={{ duration: 0.5 }}\n            >\n              <TeamSetup onTeamsReady={handleTeamsReady} />\n            </motion.div>\n          )}\n\n          {appState === 'toss' && team1 && team2 && (\n            <motion.div\n              key=\"toss\"\n              initial={{ opacity: 0, x: 100 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -100 }}\n              transition={{ duration: 0.5 }}\n            >\n              <TossSetup \n                team1={team1} \n                team2={team2} \n                onTossComplete={handleTossComplete} \n              />\n            </motion.div>\n          )}\n\n          {appState === 'preMatch' && currentMatch && (\n            <motion.div\n              key=\"preMatch\"\n              initial={{ opacity: 0, x: 100 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -100 }}\n              transition={{ duration: 0.5 }}\n            >\n              <PreMatchSetup \n                match={currentMatch} \n                onMatchStart={startMatch}\n                onMatchUpdate={handleMatchUpdate}\n              />\n            </motion.div>\n          )}\n\n          {appState === 'live' && currentMatch && (\n            <motion.div\n              key=\"live\"\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 1.05 }}\n              transition={{ duration: 0.5 }}\n            >\n              <ProfessionalScoringInterfaceV4\n                matchData={currentMatch}\n                onScoreUpdate={handleMatchUpdate}\n                onNavigateHome={() => {\n                  setCurrentMatch(null);\n                  setAppState('home');\n                }}\n              />\n            </motion.div>\n          )}\n\n          {appState === 'complete' && currentMatch && (\n            <motion.div\n              key=\"complete\"\n              initial={{ opacity: 0, y: 50 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -50 }}\n              transition={{ duration: 0.5 }}\n            >\n              <MatchComplete match={currentMatch} onNewMatch={resetApp} />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}\n\ninterface HomeScreenProps {\n  onStartMatch: () => void;\n  onResumeMatch: (match: Match) => void;\n}\n\nfunction HomeScreen({ onStartMatch, onResumeMatch }: HomeScreenProps) {\n  const [savedMatches, setSavedMatches] = useState<Match[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedMatchForDetails, setSelectedMatchForDetails] = useState<Match | null>(null);\n\n  useEffect(() => {\n    // Fetch all matches (both paused and finished) from Firebase\n    const checkForMatches = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const databaseService = getDatabaseService();\n        const matches = await databaseService.fetchAllMatches();\n        setSavedMatches(matches);\n      } catch (error) {\n        console.error('Error loading saved matches:', error);\n        setError('Failed to check for saved matches');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkForMatches();\n  }, []);\n\n  return (\n    <div className=\"text-center py-16 space-y-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 30 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8 }}\n      >\n        <h1 className=\"text-6xl font-bold text-gradient-aurora mb-6\">\n          Professional Cricket\n        </h1>\n        <div className=\"readable-text max-w-3xl mx-auto\">\n          <p className=\"text-foreground text-xl font-medium\">\n            Experience the ultimate cricket scoring system with comprehensive player management, \n            advanced statistics, and professional-grade match analysis in a cosmic digital arena.\n          </p>\n        </div>\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8, delay: 0.2 }}\n        className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\"\n      >\n        <GlassCard hover className=\"p-6 text-center\">\n          <Users className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Team Management</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Full roster management with playing XI selection and player roles\n          </p>\n        </GlassCard>\n\n        <GlassCard hover className=\"p-6 text-center\">\n          <Target className=\"h-12 w-12 text-accent mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Advanced Scoring</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Comprehensive scoring with all extras, wickets, and match scenarios\n          </p>\n        </GlassCard>\n\n        <GlassCard hover className=\"p-6 text-center\">\n          <Coins className=\"h-12 w-12 text-secondary mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Professional Stats</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Detailed player statistics, match analysis, and performance tracking\n          </p>\n        </GlassCard>\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.8, delay: 0.4 }}\n        className=\"space-y-4\"\n      >\n        <Button\n          variant=\"cosmic\"\n          size=\"lg\"\n          onClick={onStartMatch}\n          className=\"px-12 py-6 text-xl\"\n        >\n          <Play className=\"mr-3 h-6 w-6\" />\n          Start New Match\n        </Button>\n\n        {/* Match History Section - Show paused and finished matches from Firebase */}\n        {(isLoading || savedMatches.length > 0 || error) && (\n          <div className=\"space-y-6\">\n            {/* Paused Matches Section */}\n            <GlassCard className=\"p-6 max-w-4xl mx-auto\">\n              <h3 className=\"text-xl font-semibold mb-4\">üèè Paused Matches</h3>\n              \n              {isLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-8 h-8 border-2 border-primary/30 border-t-primary rounded-full animate-spin mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Checking for saved matches...</p>\n                </div>\n              ) : error ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-red-400 mb-2\">{error}</p>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => window.location.reload()}\n                    className=\"mx-auto\"\n                  >\n                    Retry\n                  </Button>\n                </div>\n              ) : savedMatches.length > 0 ? (\n                (() => {\n                  const pausedMatches = savedMatches.filter(match => !match.isComplete);\n                  return pausedMatches.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Found {pausedMatches.length} paused match{pausedMatches.length > 1 ? 'es' : ''} that can be resumed:\n                      </p>\n                      \n                      <div className=\"grid gap-4\">\n                        {pausedMatches.map((match) => (\n                          <div key={match.id} className=\"border border-slate-700/50 rounded-lg p-4 bg-slate-800/30\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                              <div className=\"space-y-2\">\n                                <div className=\"font-semibold text-lg\">\n                                  {match.team1.name} vs {match.team2.name}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  <span className=\"font-medium\">Score:</span>{' '}\n                                  {match.currentInnings === 1 ? (\n                                    <>{match.innings.first?.score || 0}/{match.innings.first?.wickets || 0} ({match.innings.first?.overs || 0}.{match.innings.first?.balls || 0} ov)</>\n                                  ) : (\n                                    <>{match.innings.second?.score || 0}/{match.innings.second?.wickets || 0} ({match.innings.second?.overs || 0}.{match.innings.second?.balls || 0} ov)</>\n                                  )}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  <span className=\"font-medium\">Innings:</span> {match.currentInnings}/2\n                                </div>\n                              </div>\n                              \n                              <div className=\"space-y-2\">\n                                <div className=\"text-sm text-muted-foreground\">\n                                  <span className=\"font-medium\">Match Type:</span> T{match.totalOvers}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  <span className=\"font-medium\">Last Updated:</span>{' '}\n                                  {new Date(match.date).toLocaleString()}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  <span className=\"font-medium\">Status:</span>{' '}\n                                  <span className=\"text-yellow-400\">\n                                    {match.currentInnings === 1 ? 'First Innings' : 'Second Innings'} - In Progress\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex gap-3\">\n                              <Button\n                                variant=\"cosmic\"\n                                onClick={() => onResumeMatch(match)}\n                                className=\"w-full\"\n                              >\n                                Resume This Match\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\">No paused matches found.</p>\n                    </div>\n                  );\n                })()\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No paused matches found.</p>\n                </div>\n              )}\n            </GlassCard>\n\n            {/* Finished Matches Section */}\n            {(() => {\n              const finishedMatches = savedMatches.filter(match => match.isComplete);\n              return finishedMatches.length > 0 ? (\n                <GlassCard className=\"p-6 max-w-4xl mx-auto\">\n                  <h3 className=\"text-xl font-semibold mb-4\">üèÜ Finished Matches</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Found {finishedMatches.length} completed match{finishedMatches.length > 1 ? 'es' : ''}:\n                    </p>\n                    \n                    <div className=\"grid gap-4\">\n                      {finishedMatches.map((match) => (\n                        <div key={match.id} className=\"border border-slate-700/50 rounded-lg p-4 bg-slate-800/30\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                            <div className=\"space-y-2\">\n                              <div className=\"font-semibold text-lg\">\n                                {match.team1.name} vs {match.team2.name}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                <span className=\"font-medium\">Final Score:</span>\n                                <div className=\"mt-1 space-y-1\">\n                                  <div>{match.team1.name}: {match.innings.first?.score || 0}/{match.innings.first?.wickets || 0} ({match.innings.first?.overs || 0}.{match.innings.first?.balls || 0} ov)</div>\n                                  <div>{match.team2.name}: {match.innings.second?.score || 0}/{match.innings.second?.wickets || 0} ({match.innings.second?.overs || 0}.{match.innings.second?.balls || 0} ov)</div>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"space-y-2\">\n                              <div className=\"text-sm text-muted-foreground\">\n                                <span className=\"font-medium\">Match Type:</span> T{match.totalOvers}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                <span className=\"font-medium\">Completed:</span>{' '}\n                                {new Date(match.date).toLocaleString()}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                <span className=\"font-medium\">Result:</span>{' '}\n                                <span className=\"text-green-400 font-medium\">\n                                  {match.result || 'Match Complete'}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex gap-3\">\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => setSelectedMatchForDetails(match)}\n                              className=\"w-full\"\n                            >\n                              View Match Details\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </GlassCard>\n              ) : null;\n            })()}\n          </div>\n        )}\n\n        {/* Match Details Modal for Finished Matches */}\n        {selectedMatchForDetails && (\n          <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.9 }}\n              className=\"bg-gradient-to-br from-slate-900/95 to-slate-800/95 backdrop-blur-xl border border-slate-700/50 rounded-2xl p-8 max-w-6xl w-full max-h-[90vh] overflow-y-auto\"\n            >\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-3xl font-bold text-gradient-aurora\">Match Scorecard</h2>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setSelectedMatchForDetails(null)}\n                  className=\"px-6\"\n                >\n                  Close Scorecard\n                </Button>\n              </div>\n\n              {/* Match Summary */}\n              <div className=\"mb-8\">\n                <GlassCard className=\"p-6\">\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-2xl font-bold text-gradient-primary mb-2\">\n                      {selectedMatchForDetails.team1.name} vs {selectedMatchForDetails.team2.name}\n                    </h3>\n                    <div className=\"text-lg text-muted-foreground\">\n                      T{selectedMatchForDetails.totalOvers} Match ‚Ä¢ {new Date(selectedMatchForDetails.date).toLocaleDateString()}\n                    </div>\n                    <div className=\"text-xl font-semibold text-green-400 mt-2\">\n                      {selectedMatchForDetails.result || 'Match Complete'}\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {/* First Innings */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"text-lg font-semibold text-gradient-primary\">First Innings</h4>\n                      <div className=\"bg-slate-800/50 rounded-lg p-4\">\n                        <div className=\"text-xl font-bold\">\n                          {selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team1.name : selectedMatchForDetails.team2.name}\n                        </div>\n                        <div className=\"text-2xl font-bold text-primary\">\n                          {selectedMatchForDetails.innings.first?.score || 0}/{selectedMatchForDetails.innings.first?.wickets || 0}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          ({selectedMatchForDetails.innings.first?.overs || 0}.{selectedMatchForDetails.innings.first?.balls || 0} overs)\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Second Innings */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"text-lg font-semibold text-gradient-primary\">Second Innings</h4>\n                      <div className=\"bg-slate-800/50 rounded-lg p-4\">\n                        <div className=\"text-xl font-bold\">\n                          {selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team2.name : selectedMatchForDetails.team1.name}\n                        </div>\n                        <div className=\"text-2xl font-bold text-primary\">\n                          {selectedMatchForDetails.innings.second?.score || 0}/{selectedMatchForDetails.innings.second?.wickets || 0}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          ({selectedMatchForDetails.innings.second?.overs || 0}.{selectedMatchForDetails.innings.second?.balls || 0} overs)\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </GlassCard>\n              </div>\n\n              {/* Detailed Statistics */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* First Innings Batting */}\n                <div>\n                  <h4 className=\"text-xl font-semibold text-gradient-primary mb-4\">\n                    {selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team1.name : selectedMatchForDetails.team2.name} Batting\n                  </h4>\n                  <GlassCard className=\"p-4\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full text-sm\">\n                        <thead>\n                          <tr className=\"border-b border-slate-700\">\n                            <th className=\"text-left py-2\">Batsman</th>\n                            <th className=\"text-center py-2\">R</th>\n                            <th className=\"text-center py-2\">B</th>\n                            <th className=\"text-center py-2\">4s</th>\n                            <th className=\"text-center py-2\">6s</th>\n                            <th className=\"text-center py-2\">SR</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {(() => {\n                            const battingTeam = selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team1 : selectedMatchForDetails.team2;\n                            return battingTeam.playingXI\n                              .filter(player => player.battingStats.ballsFaced > 0 || player.battingStats.runs > 0)\n                              .map((player) => (\n                                <tr key={player.id} className=\"border-b border-slate-800\">\n                                  <td className=\"py-2 font-medium\">{player.name}</td>\n                                  <td className=\"text-center py-2\">{player.battingStats.runs}</td>\n                                  <td className=\"text-center py-2\">{player.battingStats.ballsFaced}</td>\n                                  <td className=\"text-center py-2\">{player.battingStats.fours}</td>\n                                  <td className=\"text-center py-2\">{player.battingStats.sixes}</td>\n                                  <td className=\"text-center py-2\">{player.battingStats.strikeRate.toFixed(1)}</td>\n                                </tr>\n                              ));\n                          })()}\n                        </tbody>\n                      </table>\n                    </div>\n                  </GlassCard>\n                </div>\n\n                {/* First Innings Bowling */}\n                <div>\n                  <h4 className=\"text-xl font-semibold text-gradient-primary mb-4\">\n                    {selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team2.name : selectedMatchForDetails.team1.name} Bowling\n                  </h4>\n                  <GlassCard className=\"p-4\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full text-sm\">\n                        <thead>\n                          <tr className=\"border-b border-slate-700\">\n                            <th className=\"text-left py-2\">Bowler</th>\n                            <th className=\"text-center py-2\">O</th>\n                            <th className=\"text-center py-2\">R</th>\n                            <th className=\"text-center py-2\">W</th>\n                            <th className=\"text-center py-2\">Econ</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {(() => {\n                            const bowlingTeam = selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team2 : selectedMatchForDetails.team1;\n                            return bowlingTeam.playingXI\n                              .filter(player => player.bowlingStats.overs > 0 || player.bowlingStats.runs > 0)\n                              .map((player) => (\n                                <tr key={player.id} className=\"border-b border-slate-800\">\n                                  <td className=\"py-2 font-medium\">{player.name}</td>\n                                  <td className=\"text-center py-2\">{player.bowlingStats.overs}</td>\n                                  <td className=\"text-center py-2\">{player.bowlingStats.runs}</td>\n                                  <td className=\"text-center py-2\">{player.bowlingStats.wickets}</td>\n                                  <td className=\"text-center py-2\">{player.bowlingStats.overs > 0 ? (player.bowlingStats.runs / player.bowlingStats.overs).toFixed(1) : '0.0'}</td>\n                                </tr>\n                              ));\n                          })()}\n                        </tbody>\n                      </table>\n                    </div>\n                  </GlassCard>\n                </div>\n\n                {/* Second Innings Batting */}\n                {selectedMatchForDetails.innings.second && (\n                  <div>\n                    <h4 className=\"text-xl font-semibold text-gradient-primary mb-4\">\n                      {selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team2.name : selectedMatchForDetails.team1.name} Batting\n                    </h4>\n                    <GlassCard className=\"p-4\">\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm\">\n                          <thead>\n                            <tr className=\"border-b border-slate-700\">\n                              <th className=\"text-left py-2\">Batsman</th>\n                              <th className=\"text-center py-2\">R</th>\n                              <th className=\"text-center py-2\">B</th>\n                              <th className=\"text-center py-2\">4s</th>\n                              <th className=\"text-center py-2\">6s</th>\n                              <th className=\"text-center py-2\">SR</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {(() => {\n                              const battingTeam = selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team2 : selectedMatchForDetails.team1;\n                              return battingTeam.playingXI\n                                .filter(player => player.battingStats.ballsFaced > 0 || player.battingStats.runs > 0)\n                                .map((player) => (\n                                  <tr key={player.id} className=\"border-b border-slate-800\">\n                                    <td className=\"py-2 font-medium\">{player.name}</td>\n                                    <td className=\"text-center py-2\">{player.battingStats.runs}</td>\n                                    <td className=\"text-center py-2\">{player.battingStats.ballsFaced}</td>\n                                    <td className=\"text-center py-2\">{player.battingStats.fours}</td>\n                                    <td className=\"text-center py-2\">{player.battingStats.sixes}</td>\n                                    <td className=\"text-center py-2\">{player.battingStats.strikeRate.toFixed(1)}</td>\n                                  </tr>\n                                ));\n                            })()}\n                          </tbody>\n                        </table>\n                      </div>\n                    </GlassCard>\n                  </div>\n                )}\n\n                {/* Second Innings Bowling */}\n                {selectedMatchForDetails.innings.second && (\n                  <div>\n                    <h4 className=\"text-xl font-semibold text-gradient-primary mb-4\">\n                      {selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team1.name : selectedMatchForDetails.team2.name} Bowling\n                    </h4>\n                    <GlassCard className=\"p-4\">\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm\">\n                          <thead>\n                            <tr className=\"border-b border-slate-700\">\n                              <th className=\"text-left py-2\">Bowler</th>\n                              <th className=\"text-center py-2\">O</th>\n                              <th className=\"text-center py-2\">R</th>\n                              <th className=\"text-center py-2\">W</th>\n                              <th className=\"text-center py-2\">Econ</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {(() => {\n                              const bowlingTeam = selectedMatchForDetails.battingFirst === selectedMatchForDetails.team1.name ? selectedMatchForDetails.team1 : selectedMatchForDetails.team2;\n                              return bowlingTeam.playingXI\n                                .filter(player => player.bowlingStats.overs > 0 || player.bowlingStats.runs > 0)\n                                .map((player) => (\n                                  <tr key={player.id} className=\"border-b border-slate-800\">\n                                    <td className=\"py-2 font-medium\">{player.name}</td>\n                                    <td className=\"text-center py-2\">{player.bowlingStats.overs}</td>\n                                    <td className=\"text-center py-2\">{player.bowlingStats.runs}</td>\n                                    <td className=\"text-center py-2\">{player.bowlingStats.wickets}</td>\n                                    <td className=\"text-center py-2\">{player.bowlingStats.overs > 0 ? (player.bowlingStats.runs / player.bowlingStats.overs).toFixed(1) : '0.0'}</td>\n                                  </tr>\n                                ));\n                            })()}\n                          </tbody>\n                        </table>\n                      </div>\n                    </GlassCard>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        )}\n      </motion.div>\n    </div>\n  );\n}\n\ninterface PreMatchSetupProps {\n  match: Match;\n  onMatchStart: () => void;\n  onMatchUpdate: (match: Match) => void;\n}\n\nfunction PreMatchSetup({ match, onMatchStart, onMatchUpdate }: PreMatchSetupProps) {\n  const [openingBatsmen, setOpeningBatsmen] = useState<{ striker: string; nonStriker: string }>({\n    striker: '',\n    nonStriker: ''\n  });\n  const [openingBowler, setOpeningBowler] = useState<string>('');\n\n  // Get batting and bowling teams based on toss result\n  const battingTeam = match.battingFirst === match.team1.name ? match.team1 : match.team2;\n  const bowlingTeam = match.battingFirst === match.team1.name ? match.team2 : match.team1;\n\n  console.log('PreMatchSetup teams:', {\n    battingTeam: battingTeam.name,\n    bowlingTeam: bowlingTeam.name,\n    battingFirst: match.battingFirst,\n    team1: match.team1.name,\n    team2: match.team2.name\n  });\n\n  const canStart = openingBatsmen.striker && openingBatsmen.nonStriker && openingBowler;\n\n  const handleStart = () => {\n    if (!canStart) return;\n\n    const updatedMatch = { ...match };\n    if (updatedMatch.innings.first) {\n      updatedMatch.innings.first.currentBatsmen = openingBatsmen;\n      updatedMatch.innings.first.currentBowler = openingBowler;\n    }\n\n    onMatchUpdate(updatedMatch);\n    onMatchStart();\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h2 className=\"text-3xl font-bold text-gradient-aurora mb-4\">\n          Pre-Match Setup\n        </h2>\n        <div className=\"readable-text inline-block\">\n          <p className=\"text-foreground\">\n            Select opening batsmen and bowler to begin the cosmic cricket battle\n          </p>\n        </div>\n      </motion.div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Opening Batsmen Selection */}\n        <GlassCard className=\"p-6\">\n          <h3 className=\"text-xl font-semibold mb-4 text-gradient-primary\">\n            Opening Batsmen - {battingTeam.name}\n          </h3>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Striker</label>\n              <select\n                value={openingBatsmen.striker}\n                onChange={(e) => setOpeningBatsmen(prev => ({ ...prev, striker: e.target.value }))}\n                className=\"w-full p-3 glass-card border-glass-border/20 rounded-md bg-background text-foreground\"\n              >\n                <option value=\"\">Select striker</option>\n                {battingTeam.playingXI.map(player => (\n                  <option key={player.id} value={player.id}>\n                    {player.name} ({player.role})\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Non-Striker</label>\n              <select\n                value={openingBatsmen.nonStriker}\n                onChange={(e) => setOpeningBatsmen(prev => ({ ...prev, nonStriker: e.target.value }))}\n                className=\"w-full p-3 glass-card border-glass-border/20 rounded-md bg-background text-foreground\"\n              >\n                <option value=\"\">Select non-striker</option>\n                {battingTeam.playingXI\n                  .filter(player => player.id !== openingBatsmen.striker)\n                  .map(player => (\n                    <option key={player.id} value={player.id}>\n                      {player.name} ({player.role})\n                    </option>\n                  ))}\n              </select>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Opening Bowler Selection */}\n        <GlassCard className=\"p-6\">\n          <h3 className=\"text-xl font-semibold mb-4 text-gradient-primary\">\n            Opening Bowler - {bowlingTeam.name}\n          </h3>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Select Bowler</label>\n            <select\n              value={openingBowler}\n              onChange={(e) => setOpeningBowler(e.target.value)}\n              className=\"w-full p-3 glass-card border-glass-border/20 rounded-md bg-background text-foreground\"\n            >\n              <option value=\"\">Select opening bowler</option>\n              {/* Show bowlers and all-rounders first, then rest of the team */}\n              <optgroup label=\"Bowlers & All-rounders\">\n                {bowlingTeam.playingXI\n                  .filter(player => player.role === 'bowler' || player.role === 'allrounder')\n                  .map(player => (\n                    <option key={player.id} value={player.id}>\n                      {player.name} ({player.role})\n                    </option>\n                  ))}\n              </optgroup>\n              <optgroup label=\"Other Players\">\n                {bowlingTeam.playingXI\n                  .filter(player => player.role !== 'bowler' && player.role !== 'allrounder')\n                  .map(player => (\n                    <option key={player.id} value={player.id}>\n                      {player.name} ({player.role})\n                    </option>\n                  ))}\n              </optgroup>\n            </select>\n          </div>\n\n          <div className=\"mt-6 p-4 glass-card border-glass-border/10\">\n            <h4 className=\"font-semibold mb-2\">Match Details</h4>\n            <div className=\"space-y-1 text-sm\">\n              <div>Toss: {match.tossWinner} (chose to {match.tossDecision})</div>\n              <div>Batting First: {battingTeam.name}</div>\n              <div>Overs: {match.totalOvers}</div>\n            </div>\n          </div>\n        </GlassCard>\n      </div>\n\n      <div className=\"text-center\">\n        <Button\n          variant=\"cosmic\"\n          size=\"lg\"\n          onClick={handleStart}\n          disabled={!canStart}\n          className=\"px-12\"\n        >\n          <Play className=\"h-5 w-5 mr-2\" />\n          Start Match\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface MatchCompleteProps {\n  match: Match;\n  onNewMatch: () => void;\n}\n\nfunction MatchComplete({ match, onNewMatch }: MatchCompleteProps) {\n  return (\n    <div className=\"text-center py-16 space-y-8\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.8 }}\n      >\n        <h1 className=\"text-4xl font-bold text-gradient-aurora mb-6\">\n          Match Complete! üèÜ\n        </h1>\n        <GlassCard glow className=\"max-w-2xl mx-auto p-8\">\n          <div className=\"text-2xl font-semibold text-gradient-primary mb-4\">\n            {match.result}\n          </div>\n          <div className=\"space-y-2 text-lg\">\n            <div>{match.team1.name}: {match.innings.first?.score}/{match.innings.first?.wickets}</div>\n            <div>{match.team2.name}: {match.innings.second?.score}/{match.innings.second?.wickets}</div>\n          </div>\n        </GlassCard>\n      </motion.div>\n\n      <Button\n        variant=\"cosmic\"\n        size=\"lg\"\n        onClick={onNewMatch}\n        className=\"px-12\"\n      >\n        Start New Match\n      </Button>\n    </div>\n  );\n}\n","size_bytes":48326},"src/components/ProfessionalScoringInterfaceV3.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport GlassCard from './GlassCard';\nimport { Match, Innings, ExtraType, Player } from '../types/cricket';\nimport { RotateCcw, Trophy, Users } from 'lucide-react';\n\ninterface ProfessionalScoringInterfaceProps {\n  matchData: Match;\n  setMatchData: (match: Match) => void;\n  onScoreUpdate: (match: Match) => void;\n  onNavigateHome?: () => void;\n}\n\ntype DismissalType = 'bowled' | 'lbw' | 'caught' | 'hitWicket' | 'runOut' | 'stumped';\n\ninterface ActionData {\n  type: string;\n  runs: number;\n  isExtra: boolean;\n  extraType?: string;\n  previousState: Match;\n}\n\nconst ProfessionalScoringInterfaceV3: React.FC<ProfessionalScoringInterfaceProps> = ({\n  matchData,\n  setMatchData,\n  onScoreUpdate,\n  onNavigateHome\n}) => {\n  // State management\n  const [lastAction, setLastAction] = useState<ActionData | null>(null);\n  const [showWicketModal, setShowWicketModal] = useState(false);\n  const [showNewBatsmanModal, setShowNewBatsmanModal] = useState(false);\n  const [selectedDismissalType, setSelectedDismissalType] = useState<DismissalType>('bowled');\n  const [outBatsman, setOutBatsman] = useState<string>('');\n\n  \n  // Bowler selection state\n  const [showBowlerModal, setShowBowlerModal] = useState(false);\n  const [selectedNewBowler, setSelectedNewBowler] = useState<string>('');\n  \n  // Additional professional features state\n  const [showStrikerModal, setShowStrikerModal] = useState(false);\n  const [showRetiredHurtModal, setShowRetiredHurtModal] = useState(false);\n  const [showScorecard, setShowScorecard] = useState(false);\n  const [showInningsBreak, setShowInningsBreak] = useState(false);\n  const [showMatchCompletionScorecard, setShowMatchCompletionScorecard] = useState(false);\n  \n  // Second innings player selection state\n  const [secondInningsOpeners, setSecondInningsOpeners] = useState({ striker: '', nonStriker: '' });\n  \n  // Mobile extras modal states\n  const [showWideModal, setShowWideModal] = useState(false);\n  const [showNoBallModal, setShowNoBallModal] = useState(false);\n  const [showByeModal, setShowByeModal] = useState(false);\n  const [showLegByeModal, setShowLegByeModal] = useState(false);\n  const [showNoBallByeModal, setShowNoBallByeModal] = useState(false);\n  const [showNoBallLegByeModal, setShowNoBallLegByeModal] = useState(false);\n  const [secondInningsOpeningBowler, setSecondInningsOpeningBowler] = useState('');\n  \n  // End match state\n  const [showEndMatchModal, setShowEndMatchModal] = useState(false);\n\n  // Animation states\n  const [scoreAnimation, setScoreAnimation] = useState(false);\n  const [boundaryAnimation, setBoundaryAnimation] = useState(false);\n\n  // Game mechanics states\n  const [freeHit, setFreeHit] = useState(false);\n\n  // Helper function to calculate match winner correctly based on toss and innings\n  const calculateMatchWinner = (match: Match) => {\n    const firstInningsScore = match.innings.first?.score || 0;\n    const secondInningsScore = match.innings.second?.score || 0;\n    \n    // Determine which team batted first and second based on toss\n    const firstBattingTeam = match.battingFirst === match.team1.name ? match.team1.name : match.team2.name;\n    const secondBattingTeam = match.battingFirst === match.team1.name ? match.team2.name : match.team1.name;\n    \n    if (secondInningsScore > firstInningsScore) {\n      // Chasing team (batting second) won\n      const wicketsLeft = (match.battingFirst === match.team1.name ? match.team2.playingXI.length : match.team1.playingXI.length) - (match.innings.second?.wickets || 0);\n      return {\n        winner: secondBattingTeam,\n        result: `${secondBattingTeam} won by ${wicketsLeft} wickets`\n      };\n    } else if (firstInningsScore > secondInningsScore) {\n      // First batting team won\n      const runMargin = firstInningsScore - secondInningsScore;\n      return {\n        winner: firstBattingTeam,\n        result: `${firstBattingTeam} won by ${runMargin} runs`\n      };\n    } else {\n      return {\n        winner: 'Tie',\n        result: 'Match Tied'\n      };\n    }\n  };\n\n  // Helper function to calculate match awards based on official cricket criteria\n  const calculateMatchAwards = (match: Match) => {\n    const allPlayers = [...match.team1.playingXI, ...match.team2.playingXI];\n    \n    // Best Batsman: Highest runs scored\n    const bestBatsman = allPlayers\n      .filter(p => p.battingStats.runs > 0)\n      .sort((a, b) => {\n        // Primary: Most runs\n        if (b.battingStats.runs !== a.battingStats.runs) {\n          return b.battingStats.runs - a.battingStats.runs;\n        }\n        // Secondary: Better strike rate\n        return b.battingStats.strikeRate - a.battingStats.strikeRate;\n      })[0];\n\n    // Best Bowler: Most wickets, then best economy rate\n    const bestBowler = allPlayers\n      .filter(p => p.bowlingStats.wickets > 0 || p.bowlingStats.overs > 0)\n      .sort((a, b) => {\n        // Primary: Most wickets\n        if (b.bowlingStats.wickets !== a.bowlingStats.wickets) {\n          return b.bowlingStats.wickets - a.bowlingStats.wickets;\n        }\n        // Secondary: Better economy rate (lower is better)\n        const aEconomy = a.bowlingStats.overs > 0 ? a.bowlingStats.runs / a.bowlingStats.overs : 999;\n        const bEconomy = b.bowlingStats.overs > 0 ? b.bowlingStats.runs / b.bowlingStats.overs : 999;\n        return aEconomy - bEconomy;\n      })[0];\n\n    // Man of the Match: Most impactful performance (runs + wickets * 20 + catches * 10)\n    const manOfTheMatch = allPlayers\n      .map(p => ({\n        player: p,\n        impact: p.battingStats.runs + (p.bowlingStats.wickets * 20) + (p.fieldingStats.catches * 10) + (p.fieldingStats.runOuts * 15)\n      }))\n      .sort((a, b) => b.impact - a.impact)[0]?.player;\n\n    return {\n      bestBatsman,\n      bestBowler,\n      manOfTheMatch\n    };\n  };\n\n  // Helper functions for match analysis\n\n  // const getMatchPhase = (innings: Innings): 'powerplay' | 'middle' | 'death' => {\n  //   const totalOvers = matchData.totalOvers;\n  //   const currentOver = innings.overs;\n  //   \n  //   if (isPowerPlayActive(innings)) return 'powerplay';\n  //   if (currentOver >= totalOvers - 5) return 'death';\n  //   return 'middle';\n  // };\n\n  // const generateBallCommentary = (runs: number, isExtra: boolean, extraType?: ExtraType): string => {\n  //   const striker = getBattingTeamPlayers().find(p => p.id === currentInnings?.currentBatsmen.striker);\n  //   const bowler = getBowlingTeamPlayers().find(p => p.id === currentInnings?.currentBowler);\n  //   \n  //   if (!striker || !bowler) return '';\n\n  //   const overNumber = Math.floor((currentInnings?.overs || 0)) + 1;\n  //   const ballNumber = (currentInnings?.balls || 0) + 1;\n  //   let commentary = `${overNumber}.${ballNumber} ${bowler.name} to ${striker.name}, `;\n  //   \n  //   // Enhanced commentary with more context\n  //   if (isExtra) {\n  //     switch (extraType) {\n  //       case 'wide': \n  //         commentary += `WIDE! ${runs > 1 ? `${runs - 1} runs added. ` : 'Down the leg side. '}`;\n  //         if (runs > 3) commentary += 'Keeper couldn\\'t collect it cleanly!';\n  //         break;\n  //       case 'noball': \n  //         commentary += `NO BALL! ${runs > 1 ? `${runs - 1} runs off the free hit. ` : 'Free hit coming up! '}`;\n  //         if (runs === 6) commentary += 'What a way to punish the free hit!';\n  //         break;\n  //       case 'bye': \n  //         commentary += `${runs} BYE${runs > 1 ? 'S' : ''}! `;\n  //         commentary += runs > 2 ? 'Keeper missed it completely!' : 'Sneaks past the keeper.';\n  //         break;\n  //       case 'legbye': \n  //         commentary += `${runs} LEG BYE${runs > 1 ? 'S' : ''}! `;\n  //         commentary += 'Off the pads, quick running between the wickets.';\n  //         break;\n  //     }\n  //   } else {\n  //     switch (runs) {\n  //       case 0: \n  //         commentary += Math.random() > 0.5 ? 'dot ball, well bowled!' : 'defended solidly.';\n  //         break;\n  //       case 1: \n  //         commentary += Math.random() > 0.5 ? 'takes a quick single.' : 'nudged for one.';\n  //         break;\n  //       case 2: \n  //         commentary += Math.random() > 0.5 ? 'good running, two runs!' : 'placed in the gap for two.';\n  //         break;\n  //       case 3: \n  //         commentary += 'excellent running, three runs! Great placement.';\n  //         break;\n  //       case 4: \n  //         const fourComments = [\n  //           'FOUR! Cracking shot through the covers!',\n  //           'FOUR! Timed to perfection!',\n  //           'FOUR! Finds the gap beautifully!',\n  //           'FOUR! What a stroke!'\n  //         ];\n  //         commentary += fourComments[Math.floor(Math.random() * fourComments.length)];\n  //         break;\n  //       case 6: \n  //         const sixComments = [\n  //           'SIX! That\\'s absolutely massive!',\n  //           'SIX! Into the stands!',\n  //           'SIX! Clean as a whistle!',\n  //           'SIX! What a shot! The crowd is on its feet!'\n  //         ];\n  //         commentary += sixComments[Math.floor(Math.random() * sixComments.length)];\n  //         break;\n  //       default: \n  //         commentary += `${runs} runs, good cricket!`;\n  //         break;\n  //     }\n  //   }\n  //   \n  //   // Add match situation context for second innings\n  //   if (matchData.currentInnings === 2 && matchData.innings.first) {\n  //     const target = matchData.innings.first.score + 1;\n  //     const required = target - (currentInnings?.score || 0);\n  //     const ballsLeft = (matchData.totalOvers * 6) - ((currentInnings?.overs || 0) * 6 + (currentInnings?.balls || 0));\n  //     \n  //     if (required <= 10) {\n  //       commentary += ` ${required} needed from ${ballsLeft} balls.`;\n  //     }\n  //   }\n  //   \n  //   return commentary;\n  // };\n  // Derived state\n  const currentInnings = matchData.currentInnings === 1 ? matchData.innings.first : matchData.innings.second;\n  \n  // Debug logging\n  console.log('Current innings state:', {\n    currentInningsNumber: matchData.currentInnings,\n    firstInnings: !!matchData.innings.first,\n    secondInnings: !!matchData.innings.second,\n    currentInnings: !!currentInnings,\n    showInningsBreak: showInningsBreak\n  });\n  const isFirstInnings = matchData.currentInnings === 1;\n  const currentScore = currentInnings?.score || 0;\n  const currentWickets = currentInnings?.wickets || 0;\n  const currentOvers = `${currentInnings?.overs || 0}.${currentInnings?.balls || 0}`;\n  const runRate = currentInnings && currentInnings.overs > 0 ? \n    (currentScore / (currentInnings.overs + currentInnings.balls / 6)).toFixed(2) : '0.00';\n\n  // Auto-initialize match if players are not set\n  useEffect(() => {\n    console.log('Auto-initialization check:', {\n      hasCurrentInnings: !!currentInnings,\n      striker: currentInnings?.currentBatsmen?.striker,\n      nonStriker: currentInnings?.currentBatsmen?.nonStriker,\n      bowler: currentInnings?.currentBowler,\n      team1PlayingXI: matchData.team1?.playingXI?.length,\n      team2PlayingXI: matchData.team2?.playingXI?.length\n    });\n\n    if (currentInnings && (!currentInnings.currentBatsmen.striker || !currentInnings.currentBatsmen.nonStriker || !currentInnings.currentBowler)) {\n      console.log('Auto-initializing match with default players');\n      \n      // CRITICAL FIX: Use battingFirst to determine correct teams for auto-initialization\n      const battingTeam = matchData.currentInnings === 1 ? \n        (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2) :\n        (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1);\n      const bowlingTeam = matchData.currentInnings === 1 ? \n        (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1) :\n        (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2);\n      \n      console.log('Teams for initialization:', {\n        battingTeam: battingTeam?.name,\n        bowlingTeam: bowlingTeam?.name,\n        battingPlayingXI: battingTeam?.playingXI?.length,\n        bowlingPlayingXI: bowlingTeam?.playingXI?.length\n      });\n      \n      if (battingTeam?.playingXI && battingTeam.playingXI.length >= 2 && bowlingTeam?.playingXI && bowlingTeam.playingXI.length >= 1) {\n        const updatedMatch = { ...matchData };\n        const innings = updatedMatch.currentInnings === 1 ? updatedMatch.innings.first : updatedMatch.innings.second;\n        \n        if (innings) {\n          // Set default opening batsmen (first two players)\n          innings.currentBatsmen = {\n            striker: battingTeam.playingXI[0].id,\n            nonStriker: battingTeam.playingXI[1].id\n          };\n          \n          // Set default bowler (first bowler or all-rounder)\n          const defaultBowler = bowlingTeam.playingXI.find(p => p.role === 'bowler' || p.role === 'allrounder') || bowlingTeam.playingXI[0];\n          innings.currentBowler = defaultBowler.id;\n          \n          console.log('Auto-initialized with:', {\n            striker: battingTeam.playingXI[0].name,\n            nonStriker: battingTeam.playingXI[1].name,\n            bowler: defaultBowler.name\n          });\n          \n          onScoreUpdate(updatedMatch);\n        }\n      } else {\n        console.log('Cannot auto-initialize: insufficient players', {\n          battingTeamPlayers: battingTeam?.playingXI?.length,\n          bowlingTeamPlayers: bowlingTeam?.playingXI?.length\n        });\n      }\n    }\n  }, [currentInnings, matchData, onScoreUpdate]);\n  \n  const target = !isFirstInnings ? (matchData.innings.first?.score || 0) + 1 : null;\n  const requiredRunRate = !isFirstInnings && target ? \n    ((target - currentScore) / ((matchData.totalOvers - (currentInnings?.overs || 0)) - (currentInnings?.balls || 0) / 6)).toFixed(2) : '0.00';\n\n  // Helper functions\n  const rotateStrike = (innings: Innings) => {\n    return {\n      striker: innings.currentBatsmen.nonStriker,\n      nonStriker: innings.currentBatsmen.striker\n    };\n  };\n\n  const getBattingTeamPlayers = () => {\n    // CRITICAL FIX: Use battingFirst to determine correct batting team, not hardcoded team1/team2\n    const battingTeam = matchData.currentInnings === 1 ? \n      (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2) :\n      (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1);\n    \n    console.log('getBattingTeamPlayers FIXED Debug:', {\n      currentInnings: matchData.currentInnings,\n      battingFirst: matchData.battingFirst,\n      team1Name: matchData.team1?.name,\n      team2Name: matchData.team2?.name,\n      battingTeamName: battingTeam?.name,\n      battingTeamPlayers: battingTeam?.playingXI?.map(p => p.name)\n    });\n    return battingTeam?.playingXI || [];\n  };\n\n  const getBowlingTeamPlayers = () => {\n    // CRITICAL FIX: Use battingFirst to determine correct bowling team, not hardcoded team1/team2\n    const bowlingTeam = matchData.currentInnings === 1 ? \n      (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1) :\n      (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2);\n    \n    console.log('getBowlingTeamPlayers FIXED Debug:', {\n      currentInnings: matchData.currentInnings,\n      battingFirst: matchData.battingFirst,\n      team1Name: matchData.team1?.name,\n      team2Name: matchData.team2?.name,\n      bowlingTeamName: bowlingTeam?.name,\n      bowlingTeamPlayers: bowlingTeam?.playingXI?.map(p => p.name)\n    });\n    return bowlingTeam?.playingXI || [];\n  };\n\n  const getAvailableBowlers = () => {\n    // CRITICAL FIX: Use battingFirst to determine correct bowling team, same as getBowlingTeamPlayers\n    const bowlingTeam = matchData.currentInnings === 1 ? \n      (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1) :\n      (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2);\n    \n    const currentBowler = currentInnings?.currentBowler;\n    const isFirstOver = currentInnings?.balls === 0 && currentInnings?.overs === 0;\n    \n    console.log('getAvailableBowlers FIXED Debug:', {\n      currentInnings: matchData.currentInnings,\n      battingFirst: matchData.battingFirst,\n      team1Name: matchData.team1?.name,\n      team2Name: matchData.team2?.name,\n      bowlingTeamName: bowlingTeam?.name,\n      bowlingTeamPlayers: bowlingTeam?.playingXI?.map(p => p.name),\n      currentBowler,\n      isFirstOver\n    });\n    \n    return (bowlingTeam.playingXI || []).filter(player => {\n      if (isFirstOver || !currentBowler) {\n        return true;\n      }\n      return player.id !== currentBowler;\n    });\n  };\n\n  // Centralized helper to get current batsmen and handle inconsistencies\n  const getCurrentBatsmen = () => {\n    const battingPlayers = getBattingTeamPlayers();\n    if (!currentInnings || !battingPlayers.length) {\n      return [];\n    }\n\n    const { striker, nonStriker } = currentInnings.currentBatsmen;\n    let currentBatsmen: { player: any; isStriker: boolean }[] = [];\n\n    // --- Logic from scorecard display ---\n    // First, try to use the official striker/non-striker\n    if (striker) {\n      const strikerPlayer = battingPlayers.find(p => p.id === striker);\n      if (strikerPlayer) {\n        // If they're current batsmen but marked as out, fix the data inconsistency\n        if (strikerPlayer.battingStats.isOut && !strikerPlayer.battingStats.isRetiredHurt) {\n          console.log('üîß FIXING DATA INCONSISTENCY (from getCurrentBatsmen): Striker marked as out');\n          strikerPlayer.battingStats.isOut = false;\n        }\n        currentBatsmen.push({ player: strikerPlayer, isStriker: true });\n      }\n    }\n    \n    if (nonStriker) {\n      const nonStrikerPlayer = battingPlayers.find(p => p.id === nonStriker);\n      if (nonStrikerPlayer) {\n        // If they're current batsmen but marked as out, fix the data inconsistency\n        if (nonStrikerPlayer.battingStats.isOut && !nonStrikerPlayer.battingStats.isRetiredHurt) {\n          console.log('üîß FIXING DATA INCONSISTENCY (from getCurrentBatsmen): Non-striker marked as out');\n          nonStrikerPlayer.battingStats.isOut = false;\n        }\n        currentBatsmen.push({ player: nonStrikerPlayer, isStriker: false });\n      }\n    }\n\n    // FALLBACK: If we don't have 2 current batsmen, find the most recent active batsmen\n    if (currentBatsmen.length < 2 && battingPlayers.length > 1) {\n      console.warn('FALLBACK (from getCurrentBatsmen): Not enough current batsmen found, using fallback logic');\n      const availableBatsmen = battingPlayers\n        .filter(p => !p.battingStats.isOut || p.battingStats.isRetiredHurt)\n        .sort((a, b) => (b.battingStats.ballsFaced || 0) - (a.battingStats.ballsFaced || 0)); // Most recently active first\n      \n      // Clear current batsmen and rebuild\n      currentBatsmen = [];\n      \n      // Add striker (or most active batsman)\n      if (striker && availableBatsmen.find(p => p.id === striker)) {\n        currentBatsmen.push({ player: availableBatsmen.find(p => p.id === striker)!, isStriker: true });\n      } else if (availableBatsmen.length > 0) {\n        currentBatsmen.push({ player: availableBatsmen[0], isStriker: true });\n      }\n      \n      // Add non-striker (or second most active batsman)\n      if (nonStriker && availableBatsmen.find(p => p.id === nonStriker && p.id !== currentBatsmen[0]?.player.id)) {\n        currentBatsmen.push({ player: availableBatsmen.find(p => p.id === nonStriker)!, isStriker: false });\n      } else if (availableBatsmen.length > 1) {\n        const secondBatsman = availableBatsmen.find(p => p.id !== currentBatsmen[0]?.player.id);\n        if (secondBatsman) {\n          currentBatsmen.push({ player: secondBatsman, isStriker: false });\n        }\n      }\n    }\n    \n    return currentBatsmen;\n  };\n\n  // Scoring logic - Completely rewritten with correct cricket rules\n  const updateScore = (runs: number, isExtra = false, extraType?: ExtraType) => {\n    if (!matchData || !currentInnings) return;\n    \n    // Save current state for undo functionality\n    setLastAction({\n      type: 'score',\n      runs,\n      isExtra,\n      extraType,\n      previousState: JSON.parse(JSON.stringify(matchData))\n    });\n    \n    const updatedMatch = { ...matchData };\n    const innings = updatedMatch.currentInnings === 1 ? updatedMatch.innings.first : updatedMatch.innings.second;\n    \n    if (!innings) {\n      console.error('Invalid innings state');\n      return;\n    }\n    \n    // Get batting and bowling teams\n    const battingTeam = updatedMatch.currentInnings === 1 ? \n      (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team1 : updatedMatch.team2) :\n      (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team2 : updatedMatch.team1);\n    \n    const bowlingTeam = updatedMatch.currentInnings === 1 ? \n      (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team2 : updatedMatch.team1) :\n      (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team1 : updatedMatch.team2);\n    \n    // Always update total score\n    innings.score += runs;\n    \n    // Variables for ball counting and strike rotation\n    let ballCounted = false;\n    let shouldRotateStrike = false;\n    \n    // Handle different types of deliveries\n    if (!isExtra) {\n      // Normal runs (0, 1, 2, 3, 4, 6)\n      ballCounted = true;\n      shouldRotateStrike = runs % 2 === 1; // Rotate on odd runs\n      \n      // Update batsman stats\n      const striker = innings.currentBatsmen.striker;\n      if (striker && battingTeam) {\n        const strikerPlayer = battingTeam.playingXI.find(p => p.id === striker);\n        if (strikerPlayer) {\n          strikerPlayer.battingStats.runs += runs;\n          strikerPlayer.battingStats.ballsFaced += 1;\n          if (runs === 4) strikerPlayer.battingStats.fours += 1;\n          if (runs === 6) strikerPlayer.battingStats.sixes += 1;\n          // Update strike rate\n          strikerPlayer.battingStats.strikeRate = strikerPlayer.battingStats.ballsFaced > 0 ? \n            (strikerPlayer.battingStats.runs / strikerPlayer.battingStats.ballsFaced) * 100 : 0;\n        }\n      }\n      \n      // Clear Free Hit after normal delivery\n      if (freeHit) {\n        setFreeHit(false);\n        console.log('üéØ Free Hit completed');\n      }\n      \n    } else {\n      // Handle extras\n      switch (extraType) {\n        case 'wide':\n          // Wide: No ball counted, no strike rotation\n          ballCounted = false;\n          shouldRotateStrike = false;\n          break;\n          \n        case 'noball':\n          // No Ball: No ball counted, set free hit, rotate on odd runs by batsman\n          ballCounted = false;\n          setFreeHit(true);\n          const noBallBatsmanRuns = runs - 1; // Subtract the penalty run\n          shouldRotateStrike = noBallBatsmanRuns % 2 === 1;\n          \n          // Update batsman stats for no-ball runs\n          if (noBallBatsmanRuns > 0) {\n            const striker = innings.currentBatsmen.striker;\n            if (striker && battingTeam) {\n              const strikerPlayer = battingTeam.playingXI.find(p => p.id === striker);\n              if (strikerPlayer) {\n                strikerPlayer.battingStats.runs += noBallBatsmanRuns;\n                strikerPlayer.battingStats.ballsFaced += 1;\n                if (noBallBatsmanRuns === 4) strikerPlayer.battingStats.fours += 1;\n                if (noBallBatsmanRuns === 6) strikerPlayer.battingStats.sixes += 1;\n                strikerPlayer.battingStats.strikeRate = strikerPlayer.battingStats.ballsFaced > 0 ? \n                  (strikerPlayer.battingStats.runs / strikerPlayer.battingStats.ballsFaced) * 100 : 0;\n              }\n            }\n          }\n          break;\n          \n        case 'bye':\n        case 'legbye':\n          // Byes/Leg Byes: Ball counted, rotate on odd runs\n          ballCounted = true;\n          shouldRotateStrike = runs % 2 === 1;\n          break;\n          \n        default:\n          // Default case for other extras\n          ballCounted = false;\n          shouldRotateStrike = false;\n      }\n    }\n    \n    // Update ball count if needed\n    if (ballCounted) {\n      innings.balls += 1;\n    }\n    \n    // Handle strike rotation\n    if (shouldRotateStrike) {\n      const temp = innings.currentBatsmen.striker;\n      innings.currentBatsmen.striker = innings.currentBatsmen.nonStriker;\n      innings.currentBatsmen.nonStriker = temp;\n    }\n    \n    // Handle over completion\n    if (innings.balls >= 6) {\n      innings.overs += 1;\n      innings.balls = 0;\n      \n      // Strike changes at end of over (regardless of previous rotation)\n      const temp = innings.currentBatsmen.striker;\n      innings.currentBatsmen.striker = innings.currentBatsmen.nonStriker;\n      innings.currentBatsmen.nonStriker = temp;\n      \n      // Show bowler selection if innings continues\n      const maxWickets = 10;\n      if (innings.overs < updatedMatch.totalOvers && innings.wickets < maxWickets) {\n        setTimeout(() => setShowBowlerModal(true), 500);\n      }\n    }\n    \n    // Update bowler stats\n    if (innings.currentBowler && bowlingTeam) {\n      const bowlerPlayer = bowlingTeam.playingXI.find(p => p.id === innings.currentBowler);\n      if (bowlerPlayer) {\n        // Always add runs to bowler (except for byes/leg-byes)\n        if (!isExtra || (extraType !== 'bye' && extraType !== 'legbye')) {\n          bowlerPlayer.bowlingStats.runs += runs;\n        }\n        \n        // Add ball to bowler's count only if ball was counted in the over\n        if (ballCounted) {\n          bowlerPlayer.bowlingStats.balls += 1;\n          // Update overs when 6 balls are completed\n          if (bowlerPlayer.bowlingStats.balls >= 6) {\n            bowlerPlayer.bowlingStats.overs += Math.floor(bowlerPlayer.bowlingStats.balls / 6);\n            bowlerPlayer.bowlingStats.balls = bowlerPlayer.bowlingStats.balls % 6;\n          }\n        }\n        \n        // Calculate economy rate\n        const totalOvers = bowlerPlayer.bowlingStats.overs + (bowlerPlayer.bowlingStats.balls / 6);\n        bowlerPlayer.bowlingStats.economyRate = totalOvers > 0 ? \n          bowlerPlayer.bowlingStats.runs / totalOvers : 0;\n      }\n    }\n    \n    // Trigger animations\n    if (runs === 4 || runs === 6) {\n      setBoundaryAnimation(true);\n      setTimeout(() => setBoundaryAnimation(false), 2000);\n    }\n    \n    // Check for innings completion and target chase logic\n    const maxWickets = 10; // Standard cricket limit\n    const isInningsComplete = innings.overs >= updatedMatch.totalOvers || innings.wickets >= maxWickets;\n    \n    if (updatedMatch.currentInnings === 1) {\n      // First innings logic\n      if (isInningsComplete) {\n        // First innings completed - calculate target for second innings\n        const firstInningsScore = updatedMatch.innings.first?.score || 0;\n        console.log(`üèè First innings completed! Target: ${firstInningsScore + 1}`);\n      }\n    } else {\n      // Second innings logic - check for target reached or innings completed\n      const target = (updatedMatch.innings.first?.score || 0) + 1;\n      const targetReached = innings.score >= target;\n      \n      if (targetReached) {\n        // Second team wins by reaching target\n        updatedMatch.isComplete = true;\n        const winnerResult = calculateMatchWinner(updatedMatch);\n        updatedMatch.winner = winnerResult.winner;\n        updatedMatch.result = winnerResult.result;\n        console.log(`üèÜ ${winnerResult.winner} wins! Target reached!`);\n      } else if (isInningsComplete) {\n        // Second team fails to reach target\n        updatedMatch.isComplete = true;\n        const winnerResult = calculateMatchWinner(updatedMatch);\n        updatedMatch.winner = winnerResult.winner;\n        updatedMatch.result = winnerResult.result;\n        console.log(`üèÜ ${winnerResult.winner} wins! Target not reached!`);\n      }\n    }\n    \n    // Update match data\n    setMatchData(updatedMatch);\n    onScoreUpdate(updatedMatch);\n    \n    // Trigger score animation\n    setScoreAnimation(true);\n    setTimeout(() => setScoreAnimation(false), 1000);\n  };\n\n\n\n  // Wicket handling\n  const handleWicket = (dismissalType: DismissalType) => {\n    // Validate match state\n    if (!matchData || !currentInnings) {\n      console.error('Invalid match state');\n      return;\n    }\n    if (matchData.isComplete) {\n      console.error('Cannot take wicket: Match is complete');\n      return;\n    }\n\n    const updatedMatch = { ...matchData };\n    const innings = updatedMatch.currentInnings === 1 ? updatedMatch.innings.first : updatedMatch.innings.second;\n    \n    if (!innings) {\n      console.error('Invalid innings state');\n      return;\n    }\n\n    // Validate innings state\n    if (innings.isComplete) {\n      console.error('Cannot take wicket: Innings is complete');\n      return;\n    }\n    // Define dismissal types that don't require a bowler\n    const nonBowlerDismissals = ['runOut', 'retiredHurt', 'obstructingField', 'handledBall', 'timedOut'] as Array<DismissalType>;\n\n    // CRITICAL FIX: Use dynamic wicket limit based on team size (team size - 1)\n    const battingTeamForValidation = matchData.currentInnings === 1 ? \n      (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2) :\n      (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1);\n    const maxWicketsForWicket = (battingTeamForValidation?.playingXI?.length || 11) - 1;\n    \n    if (innings.wickets >= (maxWicketsForWicket - 1) && dismissalType === ('retiredHurt' as DismissalType)) {\n      console.error(`Cannot retire hurt: Last wicket (${innings.wickets}/${maxWicketsForWicket})`);\n      return;\n    }\n    if (innings.wickets >= maxWicketsForWicket) {\n      console.error(`All wickets already fallen (${innings.wickets}/${maxWicketsForWicket})`);\n      return;\n    }\n    \n    // Validate bowler and batsmen\n    if (!innings.currentBowler && !nonBowlerDismissals.includes(dismissalType)) {\n      console.error('No bowler selected');\n      return;\n    }\n    if (!innings.currentBatsmen.striker) {\n      console.error('No striker selected');\n      return;\n    }\n\n    setLastAction({\n      type: 'wicket',\n      runs: 0,\n      isExtra: false,\n      previousState: JSON.parse(JSON.stringify(matchData))\n    });\n\n    // Update batsman stats\n    // CRITICAL FIX: Use battingFirst to determine correct batting team for updating stats\n    const battingTeamForWicket = updatedMatch.currentInnings === 1 ? \n      (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team1 : updatedMatch.team2) :\n      (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team2 : updatedMatch.team1);\n    // CRITICAL FIX: For run-out, use the selected outBatsman, otherwise use striker\n    const batsmanToUpdate = dismissalType === 'runOut' ? outBatsman : innings.currentBatsmen?.striker;\n    \n    let dismissedBatsman: Player | undefined;\n    const updatedPlayingXI = battingTeamForWicket.playingXI.map(player => {\n      if (player.id === batsmanToUpdate) {\n        // Create a deep copy to avoid mutation issues\n        const updatedBatsman = JSON.parse(JSON.stringify(player));\n        dismissedBatsman = updatedBatsman;\n        return updatedBatsman; // Return the updated player\n      }\n      return player;\n    });\n    battingTeamForWicket.playingXI = updatedPlayingXI; // Assign the new array back\n    \n    if (dismissedBatsman) {\n      dismissedBatsman.battingStats.isOut = true;\n      dismissedBatsman.battingStats.dismissalType = dismissalType as DismissalType;\n      // Only add ball faced if it's not a run-out or if it's not a free hit\n      if (dismissalType !== 'runOut' || !freeHit) {\n        // For run-out, only add ball faced if the striker was run out\n        if (dismissalType !== 'runOut' || batsmanToUpdate === innings.currentBatsmen?.striker) {\n          dismissedBatsman.battingStats.ballsFaced += 1;\n        }\n      }\n    }\n\n    // Update bowler stats\n    if (dismissalType !== 'runOut') {\n      // CRITICAL FIX: Use battingFirst to determine correct bowling team for wicket stats updates\n      const bowlingTeam = updatedMatch.currentInnings === 1 ? \n        (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team2 : updatedMatch.team1) :\n        (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team1 : updatedMatch.team2);\n      const updatedPlayingXI = bowlingTeam.playingXI.map(player => {\n        if (player.id === innings.currentBowler) {\n          const updatedBowler = { ...player };\n          updatedBowler.bowlingStats = { ...updatedBowler.bowlingStats };\n          return updatedBowler;\n        }\n        return player;\n      });\n      const currentBowler = updatedPlayingXI.find(p => p.id === innings.currentBowler);\n      bowlingTeam.playingXI = updatedPlayingXI;\n      \n      if (currentBowler) {\n        currentBowler.bowlingStats.wickets += 1;\n        if (!freeHit) {\n          currentBowler.bowlingStats.balls += 1;\n          // Update overs when 6 balls are completed\n          if (currentBowler.bowlingStats.balls >= 6) {\n            currentBowler.bowlingStats.overs += Math.floor(currentBowler.bowlingStats.balls / 6);\n            currentBowler.bowlingStats.balls = currentBowler.bowlingStats.balls % 6;\n          }\n          \n          // Calculate economy rate\n          const totalOvers = currentBowler.bowlingStats.overs + (currentBowler.bowlingStats.balls / 6);\n          currentBowler.bowlingStats.economyRate = totalOvers > 0 ? \n            currentBowler.bowlingStats.runs / totalOvers : 0;\n        }\n      }\n    }\n\n    innings.wickets += 1;\n    \n    // Handle ball count for wickets\n    if (dismissalType !== 'runOut' || !freeHit) {\n      innings.balls += 1;\n      \n      if (innings.balls === 6) {\n        innings.overs += 1;\n        innings.balls = 0;\n        // Rotate strike at end of over\n        innings.currentBatsmen = rotateStrike(innings);\n        setTimeout(() => setShowBowlerModal(true), 500);\n      }\n    }\n\n    // After wicket, show new batsman modal if innings is not over\n    const maxWickets = (battingTeamForWicket?.playingXI?.length || 11) - 1;\n    if (innings.wickets < maxWickets) {\n      setShowNewBatsmanModal(true);\n    }\n\n    // Close wicket modal\n    setShowWicketModal(false);\n    setOutBatsman('');\n\n    if (freeHit) setFreeHit(false);\n\n    // Check for innings/match completion (same logic as updateScore)\n    // CRITICAL FIX: Use dynamic wicket limit based on team size (team size - 1)\n    const battingTeamForWicketCompletion = updatedMatch.currentInnings === 1 ? \n      (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team1 : updatedMatch.team2) :\n      (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team2 : updatedMatch.team1);\n    const maxWicketsForWicketCompletion = (battingTeamForWicketCompletion?.playingXI?.length || 11) - 1;\n    \n    const isInningsComplete = innings.wickets >= maxWicketsForWicketCompletion || innings.overs >= matchData.totalOvers;\n    const isTargetReached = matchData.currentInnings === 2 && \n      matchData.innings.first && \n      innings.score >= (matchData.innings.first.score + 1);\n    \n    if (isInningsComplete || isTargetReached) {\n      if (matchData.currentInnings === 1) {\n        // Mark first innings as complete\n        if (updatedMatch.innings.first) {\n          updatedMatch.innings.first.isComplete = true;\n        }\n        // Show innings break modal\n        setShowInningsBreak(true);\n      } else {\n        // Second innings complete - either target reached or innings ended\n        if (updatedMatch.innings.second) {\n          updatedMatch.innings.second.isComplete = true;\n        }\n        \n        // Calculate match winner and result\n        const winner = calculateMatchWinner(updatedMatch);\n        const awards = calculateMatchAwards(updatedMatch);\n        updatedMatch.winner = winner.winner;\n        updatedMatch.result = winner.result;\n        updatedMatch.awards = awards;\n        updatedMatch.isComplete = true;\n        \n        // Show match completion scorecard\n        setShowMatchCompletionScorecard(true);\n      }\n    }\n    \n    // Show wicket modal for new batsman selection if innings continues\n    if (!isInningsComplete && !isTargetReached) {\n      setShowWicketModal(true);\n    }\n    \n    // Update match data\n    setMatchData(updatedMatch);\n    onScoreUpdate(updatedMatch);\n  };\n\n  // End match handler\n  const handleEndMatch = () => {\n    const updatedMatch = { ...matchData };\n    \n    // Mark match as completed\n    updatedMatch.isComplete = true;\n    \n    // Calculate result based on current state\n    const firstInnings = updatedMatch.innings.first;\n    const secondInnings = updatedMatch.innings.second;\n    \n    if (updatedMatch.currentInnings === 1) {\n      // Match ended during first innings\n      updatedMatch.result = 'Match abandoned/interrupted during first innings';\n      updatedMatch.winner = 'No Result';\n    } else if (secondInnings) {\n      // Match ended during second innings - determine winner based on current scores\n      const team1Score = updatedMatch.battingFirst === updatedMatch.team1?.name ? \n        firstInnings?.score || 0 : secondInnings.score || 0;\n      const team2Score = updatedMatch.battingFirst === updatedMatch.team1?.name ? \n        secondInnings.score || 0 : firstInnings?.score || 0;\n      \n      if (team1Score > team2Score) {\n        updatedMatch.winner = updatedMatch.team1?.name || 'Team 1';\n        const margin = team1Score - team2Score;\n        updatedMatch.result = `${updatedMatch.winner} won by ${margin} runs (match ended early)`;\n      } else if (team2Score > team1Score) {\n        updatedMatch.winner = updatedMatch.team2?.name || 'Team 2';\n        const margin = team2Score - team1Score;\n        updatedMatch.result = `${updatedMatch.winner} won by ${margin} runs (match ended early)`;\n      } else {\n        updatedMatch.winner = 'Tie';\n        updatedMatch.result = 'Match tied (match ended early)';\n      }\n    }\n    \n    // Calculate awards based on current performance\n    const awards = calculateMatchAwards(updatedMatch);\n    updatedMatch.awards = awards;\n    \n    // Update match and show completion scorecard\n    onScoreUpdate(updatedMatch);\n    setShowEndMatchModal(false);\n    setShowMatchCompletionScorecard(true);\n  };\n\n  // Check if bowler needs to be selected at start of innings\n  useEffect(() => {\n    if (currentInnings && !currentInnings.currentBowler && currentInnings.balls === 0 && currentInnings.overs === 0) {\n      // Only show bowler modal for first innings start\n      // For second innings, bowler is selected during innings break setup\n      if (matchData.currentInnings === 1) {\n        setTimeout(() => setShowBowlerModal(true), 1000);\n      }\n    }\n  }, [currentInnings]);\n\n  // State for first innings completion screen\n  const [showFirstInningsComplete, setShowFirstInningsComplete] = useState(false);\n\n  // Check if we need to show first innings completion screen when resuming match\n  useEffect(() => {\n    // Check if first innings is complete but second innings hasn't started\n    const firstInnings = matchData.innings.first;\n    const secondInnings = matchData.innings.second;\n    \n    if (firstInnings && firstInnings.isComplete && \n        matchData.currentInnings === 1 && \n        (!secondInnings || (!secondInnings.currentBatsmen?.striker && !secondInnings.currentBatsmen?.nonStriker))) {\n      \n      console.log('RESUMING MATCH: First innings complete, showing completion screen');\n      // Show first innings completion screen instead of automatic modal\n      setShowFirstInningsComplete(true);\n    }\n  }, [matchData]);\n\n  // Enhanced undo functionality with state validation\n  const undoLastAction = () => {\n    if (!lastAction || !lastAction.previousState) {\n      console.warn('No action to undo or invalid previous state');\n      return;\n    }\n    \n    // Validate that we can safely undo (not across innings)\n    if (lastAction.previousState.currentInnings !== matchData.currentInnings) {\n      console.warn('Cannot undo across innings boundary');\n      return;\n    }\n    \n    // Reset any active modals/states that might be affected\n    setShowWicketModal(false);\n    setShowBowlerModal(false);\n    setShowNewBatsmanModal(false);\n    setScoreAnimation(false);\n    setBoundaryAnimation(false);\n    \n    // Restore previous state\n    onScoreUpdate(lastAction.previousState);\n    setLastAction(null);\n    \n    console.log('Action undone successfully:', lastAction.type);\n  };\n\n  // Confirm bowler selection function\n  const confirmBowlerSelection = () => {\n    if (!selectedNewBowler || !currentInnings) {\n      console.error('No bowler selected or invalid innings state');\n      return;\n    }\n\n    const updatedMatch = { ...matchData };\n    const innings = updatedMatch.currentInnings === 1 ? updatedMatch.innings.first : updatedMatch.innings.second;\n    \n    if (innings) {\n      innings.currentBowler = selectedNewBowler;\n      onScoreUpdate(updatedMatch);\n      setShowBowlerModal(false);\n      setSelectedNewBowler('');\n      console.log('New bowler selected:', selectedNewBowler);\n    }\n  };\n\n  // Show first innings completion screen with manual proceed option\n  if (showFirstInningsComplete) {\n    const firstInnings = matchData.innings.first;\n    const battingTeamName = matchData.battingFirst === matchData.team1?.name ? matchData.team1?.name : matchData.team2?.name;\n    \n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <GlassCard className=\"p-6 mb-4\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-3xl font-bold text-gradient-primary mb-2\">üèè First Innings Complete</h2>\n              <div className=\"text-xl font-semibold text-white\">\n                {battingTeamName}: {firstInnings?.score}/{firstInnings?.wickets}\n              </div>\n              <div className=\"text-sm text-slate-400 mt-1\">\n                ({firstInnings?.overs}.{firstInnings?.balls} overs)\n              </div>\n            </div>\n\n            {/* First Innings Scorecard */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n              {/* Batting Summary */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3 text-gradient-primary\">\n                  {battingTeamName} Batting\n                </h3>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead>\n                      <tr className=\"border-b border-slate-700\">\n                        <th className=\"text-left py-2 px-2\">Batsman</th>\n                        <th className=\"text-center py-2\">R</th>\n                        <th className=\"text-center py-2\">B</th>\n                        <th className=\"text-center py-2\">4s</th>\n                        <th className=\"text-center py-2\">6s</th>\n                        <th className=\"text-center py-2\">SR</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {(() => {\n                        const battingTeam = matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2;\n                        return battingTeam?.playingXI\n                          .filter(player => player.battingStats.runs > 0 || player.battingStats.ballsFaced > 0)\n                          .slice(0, 8) // Show top 8 batsmen\n                          .map(player => (\n                            <tr key={player.id} className=\"border-b border-slate-800/50\">\n                              <td className=\"py-2 px-2\">\n                                <div className=\"font-medium text-white\">{player.name}</div>\n                                {player.battingStats.isOut && !player.battingStats.isRetiredHurt && (\n                                  <div className=\"text-xs text-red-400\">{player.battingStats.dismissalType}</div>\n                                )}\n                              </td>\n                              <td className=\"text-center py-2\">{player.battingStats.runs}</td>\n                              <td className=\"text-center py-2\">{player.battingStats.ballsFaced}</td>\n                              <td className=\"text-center py-2\">{player.battingStats.fours}</td>\n                              <td className=\"text-center py-2\">{player.battingStats.sixes}</td>\n                              <td className=\"text-center py-2\">{player.battingStats.strikeRate.toFixed(1)}</td>\n                            </tr>\n                          ));\n                      })()}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n\n              {/* Bowling Summary */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3 text-gradient-primary\">\n                  {matchData.battingFirst === matchData.team1?.name ? matchData.team2?.name : matchData.team1?.name} Bowling\n                </h3>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead>\n                      <tr className=\"border-b border-slate-700\">\n                        <th className=\"text-left py-2 px-2\">Bowler</th>\n                        <th className=\"text-center py-2\">O</th>\n                        <th className=\"text-center py-2\">R</th>\n                        <th className=\"text-center py-2\">W</th>\n                        <th className=\"text-center py-2\">ER</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {(() => {\n                        const bowlingTeam = matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1;\n                        return bowlingTeam?.playingXI\n                          .filter(player => player.bowlingStats.overs > 0 || player.bowlingStats.balls > 0)\n                          .slice(0, 6) // Show top 6 bowlers\n                          .map(player => (\n                            <tr key={player.id} className=\"border-b border-slate-800/50\">\n                              <td className=\"py-2 px-2\">\n                                <div className=\"font-medium text-white\">{player.name}</div>\n                              </td>\n                              <td className=\"text-center py-2\">{player.bowlingStats.overs}.{player.bowlingStats.balls}</td>\n                              <td className=\"text-center py-2\">{player.bowlingStats.runs}</td>\n                              <td className=\"text-center py-2\">{player.bowlingStats.wickets}</td>\n                              <td className=\"text-center py-2\">\n                                {player.bowlingStats.overs > 0 ? \n                                  (player.bowlingStats.runs / player.bowlingStats.overs).toFixed(1) : '0.0'}\n                              </td>\n                            </tr>\n                          ));\n                      })()}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n\n            {/* Proceed Button */}\n            <div className=\"text-center\">\n              <Button\n                onClick={() => {\n                  setShowFirstInningsComplete(false);\n                  setShowInningsBreak(true);\n                }}\n                className=\"bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white px-8 py-3 text-lg font-semibold\"\n              >\n                üèè Proceed to 2nd Innings\n              </Button>\n            </div>\n          </GlassCard>\n        </div>\n      </div>\n    );\n  }\n\n  // Show innings break modal if it's active\n  if (showInningsBreak) {\n    // Get teams for second innings (batting and bowling teams swap)\n    const secondInningsBattingTeam = matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1;\n    const secondInningsBowlingTeam = matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2;\n    \n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 flex items-center justify-center\">\n        <GlassCard className=\"p-8 m-4 max-w-2xl w-full\">\n          <h3 className=\"text-2xl font-semibold mb-4 text-center\">üèè Innings Break</h3>\n          \n          {/* First Innings Summary */}\n          <div className=\"text-center mb-6\">\n            <p className=\"text-slate-300 mb-2\">\n              {matchData.battingFirst === matchData.team1?.name ? matchData.team1?.name : matchData.team2?.name}: {matchData.innings.first?.score}/{matchData.innings.first?.wickets}\n            </p>\n            <p className=\"text-slate-300 mb-4\">\n              Target: {(matchData.innings.first?.score || 0) + 1} runs\n            </p>\n          </div>\n\n          {/* Second Innings Setup */}\n          <div className=\"space-y-6\">\n            <h4 className=\"text-lg font-semibold text-center text-purple-300\">\n              Setup Second Innings - {secondInningsBattingTeam?.name} Batting\n            </h4>\n\n            {/* Opening Batsmen Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2 text-slate-300\">Opening Striker</label>\n                <select\n                  value={secondInningsOpeners.striker}\n                  onChange={(e) => setSecondInningsOpeners(prev => ({ ...prev, striker: e.target.value }))}\n                  className=\"w-full p-3 bg-slate-700/50 border border-slate-600 rounded-lg text-white\"\n                >\n                  <option value=\"\">Select Striker</option>\n                  {secondInningsBattingTeam?.playingXI?.map(player => (\n                    <option key={player.id} value={player.id}>\n                      {player.name} ({player.role})\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2 text-slate-300\">Opening Non-Striker</label>\n                <select\n                  value={secondInningsOpeners.nonStriker}\n                  onChange={(e) => setSecondInningsOpeners(prev => ({ ...prev, nonStriker: e.target.value }))}\n                  className=\"w-full p-3 bg-slate-700/50 border border-slate-600 rounded-lg text-white\"\n                >\n                  <option value=\"\">Select Non-Striker</option>\n                  {secondInningsBattingTeam?.playingXI?.filter(player => player.id !== secondInningsOpeners.striker).map(player => (\n                    <option key={player.id} value={player.id}>\n                      {player.name} ({player.role})\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {/* Opening Bowler Selection */}\n            <div>\n              <label className=\"block text-sm font-medium mb-2 text-slate-300\">Opening Bowler - {secondInningsBowlingTeam?.name}</label>\n              <select\n                value={secondInningsOpeningBowler}\n                onChange={(e) => setSecondInningsOpeningBowler(e.target.value)}\n                className=\"w-full p-3 bg-slate-700/50 border border-slate-600 rounded-lg text-white\"\n              >\n                <option value=\"\">Select Opening Bowler</option>\n                {secondInningsBowlingTeam?.playingXI?.map(player => (\n                  <option key={player.id} value={player.id}>\n                    {player.name} ({player.role})\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Start Second Innings Button */}\n            <div className=\"text-center\">\n              <Button\n                onClick={() => {\n                  if (!secondInningsOpeners.striker || !secondInningsOpeners.nonStriker || !secondInningsOpeningBowler) {\n                    alert('Please select opening batsmen and bowler');\n                    return;\n                  }\n                  \n                  setShowInningsBreak(false);\n                  // Start second innings with selected players\n                  const updatedMatch = { ...matchData };\n                  updatedMatch.currentInnings = 2;\n                  \n                  updatedMatch.innings.second = {\n                    number: 2,\n                    battingTeam: secondInningsBattingTeam?.id || '',\n                    bowlingTeam: secondInningsBowlingTeam?.id || '',\n                    score: 0,\n                    wickets: 0,\n                    overs: 0,\n                    balls: 0,\n                    extras: 0,\n                    isComplete: false,\n                    currentBatsmen: {\n                      striker: secondInningsOpeners.striker,\n                      nonStriker: secondInningsOpeners.nonStriker\n                    },\n                    currentBowler: secondInningsOpeningBowler,\n                    overHistory: [],\n                    ballHistory: [],\n                    partnerships: [],\n                    commentary: []\n                  };\n                  \n                  onScoreUpdate(updatedMatch);\n                }}\n                disabled={!secondInningsOpeners.striker || !secondInningsOpeners.nonStriker || !secondInningsOpeningBowler}\n                className=\"bg-green-600/20 hover:bg-green-600/30 text-green-400 disabled:opacity-50 disabled:cursor-not-allowed px-8 py-3\"\n              >\n                Start Second Innings\n              </Button>\n            </div>\n          </div>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  if (!currentInnings) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 flex items-center justify-center\">\n        <GlassCard className=\"p-8 text-center\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Setting up match...</h2>\n          <p className=\"text-slate-300\">Please complete match setup to begin scoring.</p>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900/40 via-purple-900/30 to-slate-900/40 backdrop-blur-sm p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Professional Match Header */}\n        <GlassCard className=\"p-4 mb-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-xl font-bold\">{matchData.team1.name} vs {matchData.team2.name}</h1>\n              <span className=\"text-sm text-slate-400\">T{matchData.totalOvers} ‚Ä¢ Match {matchData.currentInnings}/2</span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-slate-400\">Live</div>\n              {freeHit && (\n                <div className=\"text-xs bg-orange-600/20 text-orange-400 px-2 py-1 rounded mt-1\">\n                  üî• FREE HIT\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {/* Score Summary */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"font-semibold text-lg\">\n                  {isFirstInnings ? matchData.team1.name : matchData.team2.name}\n                </span>\n                                  <div className={`text-2xl font-bold transition-all duration-300 ${\n                    scoreAnimation ? 'scale-110 text-cyan-400' : 'text-white'\n                  } ${boundaryAnimation ? 'animate-pulse' : ''}`}>\n                    {currentScore}/{currentWickets}\n                  </div>\n              </div>\n              <div className=\"text-sm text-slate-300\">\n                {currentOvers} overs ‚Ä¢ RR: {runRate}\n                {!isFirstInnings && target && (\n                  <> ‚Ä¢ Need {target - currentScore} runs in {(matchData.totalOvers - parseFloat(currentOvers.split('.')[0]) - (parseFloat(currentOvers.split('.')[1] || '0') / 6)).toFixed(1)} overs</>\n                )}\n              </div>\n            </div>\n            \n            {!isFirstInnings && target && (\n              <div className=\"text-right\">\n                <div className=\"text-sm text-slate-400 mb-1\">Target: {target}</div>\n                <div className=\"text-sm text-slate-400\">Required RR: {requiredRunRate}</div>\n              </div>\n            )}\n          </div>\n        </GlassCard>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n          {/* Left Column - Batting & Bowling Tables */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            {/* Professional Batting Scorecard */}\n            <GlassCard className=\"p-4\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                <span className=\"mr-2\">üèè</span>\n                {(() => {\n                  // CRITICAL FIX: Use battingFirst to determine correct batting team name\n                  const battingTeam = matchData.currentInnings === 1 ? \n                    (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2) :\n                    (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1);\n                  return battingTeam?.name || 'Unknown';\n                })()} Batting\n              </h3>\n              \n\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b border-slate-700\">\n                      <th className=\"text-left py-2 px-2\">Batsman</th>\n                      <th className=\"text-center py-2\">R</th>\n                      <th className=\"text-center py-2\">B</th>\n                      <th className=\"text-center py-2\">4s</th>\n                      <th className=\"text-center py-2\">6s</th>\n                      <th className=\"text-center py-2\">SR</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {getCurrentBatsmen().map(({ player, isStriker }) => {\n                      const strikeRate = player.battingStats.ballsFaced > 0 \n                        ? ((player.battingStats.runs / player.battingStats.ballsFaced) * 100).toFixed(1) \n                        : '0.0';\n\n                      return (\n                        <tr key={player.id} className={`border-b border-slate-800/50 ${\n                          isStriker ? 'bg-green-600/20 border-green-500/30' : 'bg-slate-700/20'\n                        }`}>\n                          <td className=\"py-3 px-2\">\n                            <div className=\"flex items-center\">\n                              <span className={`font-medium ${isStriker ? 'text-green-400' : 'text-white'}`}>\n                                {player.name}\n                                {isStriker && <span className=\"ml-1 text-xs text-yellow-400\">*</span>}\n                                {!isStriker && <span className=\"ml-1 text-xs text-slate-400\">‚Ä†</span>}\n                              </span>\n                            </div>\n                            {player.battingStats.isOut && !player.battingStats.isRetiredHurt && (\n                              <div className=\"text-xs text-red-400 mt-1\">\n                                {player.battingStats.dismissalType || 'out'}\n                              </div>\n                            )}\n                            {player.battingStats.isRetiredHurt && (\n                              <div className=\"text-xs text-orange-400 mt-1\">\n                                retired hurt\n                              </div>\n                            )}\n                          </td>\n                          <td className=\"text-center py-3 font-semibold\">{player.battingStats.runs}</td>\n                          <td className=\"text-center py-3\">{player.battingStats.ballsFaced}</td>\n                          <td className=\"text-center py-3\">{player.battingStats.fours}</td>\n                          <td className=\"text-center py-3\">{player.battingStats.sixes}</td>\n                          <td className=\"text-center py-3\">{strikeRate}</td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n                \n                {/* Batting Summary */}\n                <div className=\"mt-3 pt-3 border-t border-slate-700\">\n                  <div className=\"flex justify-between text-xs text-slate-400\">\n                    <span>Extras: {currentInnings?.extras || 0}</span>\n                    <span>Total: {currentScore}/{currentWickets} ({currentOvers} ov)</span>\n                  </div>\n                </div>\n              </div>\n            </GlassCard>\n\n            {/* Professional Bowling Scorecard */}\n            <GlassCard className=\"p-4\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                <span className=\"mr-2\">‚öæ</span>\n                {(() => {\n                  // CRITICAL FIX: Use battingFirst to determine correct bowling team name\n                  const bowlingTeam = matchData.currentInnings === 1 ? \n                    (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1) :\n                    (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2);\n                  return bowlingTeam?.name || 'Unknown';\n                })()} Bowling\n              </h3>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b border-slate-700\">\n                      <th className=\"text-left py-2 px-2\">Bowler</th>\n                      <th className=\"text-center py-2\">O</th>\n                      <th className=\"text-center py-2\">M</th>\n                      <th className=\"text-center py-2\">R</th>\n                      <th className=\"text-center py-2\">W</th>\n                      <th className=\"text-center py-2\">ER</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {getBowlingTeamPlayers().map((player) => {\n                      const isCurrentBowler = currentInnings?.currentBowler === player.id;\n                      const isRecentBowler = currentInnings?.overHistory\n                        ?.slice(-2) // Get last 2 overs\n                        .some(over => over.bowler === player.id);\n                      \n                      // Show current bowler and recent bowlers (last 2 overs)\n                      // Fallback: show first bowler if no current bowler is set\n                      const hasCurrentBowler = currentInnings?.currentBowler;\n                      const shouldShow = hasCurrentBowler ? \n                        (isCurrentBowler || isRecentBowler) : \n                        (getBowlingTeamPlayers().indexOf(player) === 0);\n                      \n                      if (!shouldShow) return null;\n\n                      const totalOvers = player.bowlingStats.overs + (player.bowlingStats.balls / 6);\n                      const economyRate = totalOvers > 0 ? \n                        (player.bowlingStats.runs / totalOvers).toFixed(2) : '0.00';\n\n                      return (\n                        <tr key={player.id} className={`border-b border-slate-800/50 ${\n                          isCurrentBowler ? 'bg-purple-600/20 border-purple-500/30' : 'bg-slate-700/20'\n                        }`}>\n                          <td className=\"py-3 px-2\">\n                            <div className=\"flex items-center\">\n                              <span className={`font-medium ${\n                                isCurrentBowler ? 'text-purple-400' : 'text-white'\n                              }`}>\n                                {player.name}\n                                {isCurrentBowler && <span className=\"ml-1 text-xs text-yellow-400\">*</span>}\n                              </span>\n                            </div>\n                            <div className=\"text-xs text-slate-400 mt-1 capitalize\">\n                              {player.role || 'Bowler'}\n                            </div>\n                          </td>\n                          <td className=\"text-center py-3 font-semibold\">\n                            {player.bowlingStats.overs}.{player.bowlingStats.balls % 6}\n                          </td>\n                          <td className=\"text-center py-3\">\n                            0\n                          </td>\n                          <td className=\"text-center py-3\">\n                            {player.bowlingStats.runs}\n                          </td>\n                          <td className=\"text-center py-3 font-semibold\">\n                            {player.bowlingStats.wickets}\n                          </td>\n                          <td className=\"text-center py-3\">\n                            {economyRate}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n                \n                {/* Bowling Summary */}\n                <div className=\"mt-3 pt-3 border-t border-slate-700\">\n                  <div className=\"flex justify-between text-xs text-slate-400\">\n                    <span>\n                      Current: {getBowlingTeamPlayers().find(p => p.id === currentInnings?.currentBowler)?.name || 'No bowler selected'}\n                    </span>\n                    <span>\n                      This over: {currentInnings?.balls || 0}/6 balls\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </GlassCard>\n\n            {/* Commentary Panel */}\n            <GlassCard className=\"p-4\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                <span className=\"mr-2\">üìù</span>\n                Live Commentary\n              </h3>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {currentInnings?.commentary && currentInnings.commentary.length > 0 ? (\n                  currentInnings.commentary.slice(-10).reverse().map((comment, index) => (\n                    <div key={index} className=\"text-sm bg-slate-800/30 rounded p-2 border-l-2 border-blue-500/50\">\n                      <div className=\"text-xs text-slate-400 mb-1\">\n                        {comment.over}.{comment.ball} - {comment.timestamp}\n                      </div>\n                      <div className=\"text-slate-200\">{comment.text}</div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-sm text-slate-400 text-center py-4\">\n                    Match commentary will appear here as the game progresses...\n                  </div>\n                )}\n              </div>\n            </GlassCard>\n\n            {/* Over-by-Over Breakdown */}\n            <GlassCard className=\"p-4\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                <span className=\"mr-2\">üìä</span>\n                Over-by-Over\n              </h3>\n              <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                {currentInnings?.overHistory && currentInnings.overHistory.length > 0 ? (\n                  currentInnings.overHistory.slice(-8).map((over, index) => (\n                    <div key={index} className=\"flex justify-between items-center text-sm bg-slate-800/30 rounded p-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium text-blue-400\">Over {over.overNumber}</span>\n                        <span className=\"text-slate-400\">\n                          {getBowlingTeamPlayers().find(p => p.id === over.bowler)?.name || 'Unknown'}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"flex space-x-1\">\n                          {over.balls.map((ball, ballIndex) => (\n                            <span key={ballIndex} className={`w-6 h-6 rounded-full text-xs flex items-center justify-center ${\n                              ball.runs === 4 ? 'bg-green-600/30 text-green-400' :\n                              ball.runs === 6 ? 'bg-purple-600/30 text-purple-400' :\n                              ball.isWicket ? 'bg-red-600/30 text-red-400' :\n                              ball.isExtra ? 'bg-orange-600/30 text-orange-400' :\n                              'bg-slate-600/30 text-slate-300'\n                            }`}>\n                              {ball.isWicket ? 'W' : \n                               ball.isExtra ? (ball.extraType === 'wide' ? 'Wd' : 'Nb') :\n                               ball.runs}\n                            </span>\n                          ))}\n                        </div>\n                        <span className=\"font-medium text-white\">\n                          {over.runs} runs\n                        </span>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-sm text-slate-400 text-center py-4\">\n                    Over-by-over breakdown will appear here...\n                  </div>\n                )}\n              </div>\n            </GlassCard>\n          </div>\n\n          {/* Right Column - Mobile-First Scoring Controls */}\n          <div className=\"space-y-4\">\n            <GlassCard className=\"p-4\">\n              <h3 className=\"text-lg font-semibold mb-3\">Quick Scoring</h3>\n              \n              {/* Main Runs - Keep as is for quick access */}\n              <div className=\"mb-4\">\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {[0, 1, 2, 3].map((runs) => (\n                    <Button\n                      key={runs}\n                      onClick={() => updateScore(runs)}\n                      className={`h-12 text-lg font-bold ${\n                        runs === 0 ? 'bg-slate-600/20 hover:bg-slate-600/30' :\n                        'bg-blue-600/20 hover:bg-blue-600/30 text-blue-400'\n                      }`}\n                    >\n                      {runs}\n                    </Button>\n                  ))}\n                </div>\n                <div className=\"grid grid-cols-4 gap-2 mt-2\">\n                  <Button\n                    onClick={() => updateScore(4)}\n                    className=\"h-12 text-lg font-bold bg-green-600/20 hover:bg-green-600/30 text-green-400\"\n                  >\n                    4\n                  </Button>\n                  <Button\n                    onClick={() => updateScore(5)}\n                    className=\"h-12 text-lg font-bold bg-blue-600/20 hover:bg-blue-600/30 text-blue-400\"\n                  >\n                    5\n                  </Button>\n                  <Button\n                    onClick={() => updateScore(6)}\n                    className=\"h-12 text-lg font-bold bg-purple-600/20 hover:bg-purple-600/30 text-purple-400\"\n                  >\n                    6\n                  </Button>\n                  <Button\n                    onClick={() => setShowWicketModal(true)}\n                    className=\"h-12 text-lg font-bold bg-red-600/20 hover:bg-red-600/30 text-red-400\"\n                  >\n                    OUT\n                  </Button>\n                </div>\n              </div>\n\n              {/* Mobile-First Extras - Single buttons that open modals */}\n              <div className=\"mb-4\">\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <Button\n                    onClick={() => setShowWideModal(true)}\n                    className=\"h-10 text-sm font-semibold bg-yellow-600/20 hover:bg-yellow-600/30 text-yellow-400\"\n                  >\n                    Wide\n                  </Button>\n                  <Button\n                    onClick={() => setShowNoBallModal(true)}\n                    className=\"h-10 text-sm font-semibold bg-orange-600/20 hover:bg-orange-600/30 text-orange-400\"\n                  >\n                    No Ball\n                  </Button>\n                  <Button\n                    onClick={() => setShowByeModal(true)}\n                    className=\"h-10 text-sm font-semibold bg-blue-600/20 hover:bg-blue-600/30 text-blue-400\"\n                  >\n                    Bye\n                  </Button>\n                </div>\n                <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                  <Button\n                    onClick={() => setShowLegByeModal(true)}\n                    className=\"h-10 text-sm font-semibold bg-indigo-600/20 hover:bg-indigo-600/30 text-indigo-400\"\n                  >\n                    Leg Bye\n                  </Button>\n                  <Button\n                    onClick={() => setShowNoBallByeModal(true)}\n                    className=\"h-10 text-sm font-semibold bg-cyan-600/20 hover:bg-cyan-600/30 text-cyan-400\"\n                  >\n                    NB+Bye\n                  </Button>\n                  <Button\n                    onClick={() => setShowNoBallLegByeModal(true)}\n                    className=\"h-10 text-sm font-semibold bg-pink-600/20 hover:bg-pink-600/30 text-pink-400\"\n                  >\n                    NB+LB\n                  </Button>\n                </div>\n              </div>\n\n              {/* Professional Control Buttons */}\n              <div className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button\n                    onClick={() => setShowStrikerModal(true)}\n                    className=\"bg-green-600/20 hover:bg-green-600/30 text-green-400 h-10 text-sm\"\n                  >\n                    <Users className=\"w-3 h-3 mr-1\" />\n                    Striker\n                  </Button>\n                  <Button\n                    onClick={() => setShowBowlerModal(true)}\n                    className=\"bg-purple-600/20 hover:bg-purple-600/30 text-purple-400 h-10 text-sm\"\n                  >\n                    <Users className=\"w-3 h-3 mr-1\" />\n                    Bowler\n                  </Button>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button\n                    onClick={() => setShowRetiredHurtModal(true)}\n                    className=\"bg-orange-600/20 hover:bg-orange-600/30 text-orange-400 h-10 text-sm\"\n                  >\n                    üè• Retired Hurt\n                  </Button>\n                  <Button\n                    onClick={undoLastAction}\n                    disabled={!lastAction}\n                    className=\"bg-slate-600/20 hover:bg-slate-600/30 text-slate-400 h-10 text-sm disabled:opacity-50\"\n                  >\n                    <RotateCcw className=\"w-3 h-3 mr-1\" />\n                    Undo\n                  </Button>\n                </div>\n\n                <Button\n                  onClick={() => setShowScorecard(true)}\n                  className=\"w-full bg-blue-600/20 hover:bg-blue-600/30 text-blue-400 h-10 text-sm\"\n                >\n                  <Trophy className=\"w-3 h-3 mr-1\" />\n                  üìä Scorecard\n                </Button>\n\n                \n              </div>\n            </GlassCard>\n\n            {/* Commentary Panel */}\n            <GlassCard className=\"p-4\">\n              <h3 className=\"text-lg font-semibold mb-3\">Commentary</h3>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                <div className=\"text-sm\">\n                  <div className=\"font-medium text-cyan-400 mb-1\">\n                    Over {Math.floor(parseFloat(currentOvers))}: {currentInnings?.currentBowler ? \n                      getBowlingTeamPlayers().find(p => p.id === currentInnings.currentBowler)?.name : 'Select Bowler'\n                    }\n                  </div>\n                  <div className=\"text-slate-300\">\n                    {currentScore}/{currentWickets} ({currentOvers} overs)\n                  </div>\n                </div>\n                \n                <div className=\"space-y-1\">\n                  <div className=\"text-xs text-slate-400\">\n                    Last ball: {lastAction ? lastAction.type : 'No action yet'}\n                  </div>\n                </div>\n              </div>\n            </GlassCard>\n\n            {/* Match Status */}\n            <GlassCard className=\"p-4\">\n              <h3 className=\"text-lg font-semibold mb-3\">Match Status</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-400\">Innings:</span>\n                  <span>{matchData.currentInnings}/2</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-400\">Overs:</span>\n                  <span>{currentOvers}/{matchData.totalOvers}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-slate-400\">Run Rate:</span>\n                  <span>{runRate}</span>\n                </div>\n                {!isFirstInnings && target && (\n                  <>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Target:</span>\n                      <span>{target}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Required RR:</span>\n                      <span>{requiredRunRate}</span>\n                    </div>\n                  </>\n                )}\n              </div>\n              \n              {/* End Match Button */}\n              <div className=\"mt-4 pt-4 border-t border-slate-700/50\">\n                <Button\n                  onClick={() => setShowEndMatchModal(true)}\n                  className=\"w-full bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white py-2 text-sm font-medium\"\n                >\n                  üèÅ End Match\n                </Button>\n              </div>\n            </GlassCard>\n          </div>\n        </div>\n\n        {/* All Modals */}\n        {showWicketModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <GlassCard className=\"p-6 m-4 max-w-lg w-full\">\n              <h3 className=\"text-xl font-semibold mb-4\">Wicket Details</h3>\n              \n              <div className=\"mb-4\">\n                <h4 className=\"text-sm font-medium mb-3 text-slate-300\">Dismissal Type</h4>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {[\n                    { type: 'bowled', emoji: 'üéØ', label: 'Bowled' },\n                    { type: 'lbw', emoji: 'ü¶µ', label: 'LBW' },\n                    { type: 'caught', emoji: 'ü§≤', label: 'Caught' },\n                    { type: 'hitWicket', emoji: 'üí•', label: 'Hit Wicket' },\n                    { type: 'runOut', emoji: 'üèÉ', label: 'Run Out' },\n                    { type: 'stumped', emoji: 'üß§', label: 'Stumped' }\n                  ].map(({ type, emoji, label }) => (\n                    <Button\n                      key={type}\n                      onClick={() => setSelectedDismissalType(type as DismissalType)}\n                      className={`h-10 text-sm ${\n                        selectedDismissalType === type\n                          ? 'bg-red-600/30 border-red-500/50 text-red-300'\n                          : 'bg-slate-600/20 hover:bg-slate-600/30'\n                      }`}\n                    >\n                      {emoji} {label}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              {selectedDismissalType === 'runOut' && (\n                <div className=\"mb-4\">\n                  <h4 className=\"text-sm font-medium mb-3 text-slate-300\">Select Batsman Run Out</h4>\n                  <div className=\"space-y-2\">\n                    {getCurrentBatsmen().map(({ player, isStriker }) => (\n                      <Button\n                        key={player.id}\n                        onClick={() => setOutBatsman(player.id)}\n                        className={`w-full h-12 text-left px-4 ${\n                          outBatsman === player.id\n                            ? 'bg-red-600/30 border-red-500/50 text-red-300'\n                            : 'bg-slate-600/20 hover:bg-slate-600/30'\n                        }`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">{player.name}</span>\n                          <span className=\"text-xs text-slate-400\">{isStriker ? 'Striker' : 'Non-Striker'}</span>\n                        </div>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex gap-3\">\n                <Button \n                  onClick={() => handleWicket(selectedDismissalType)} \n                  disabled={selectedDismissalType === 'runOut' && !outBatsman}\n                  className=\"flex-1 bg-red-600/20 hover:bg-red-600/30 text-red-400 disabled:opacity-50\"\n                >\n                  Confirm Wicket\n                </Button>\n                <Button onClick={() => {\n                  setShowWicketModal(false);\n                  setOutBatsman('');\n                }} className=\"flex-1\">\n                  Cancel\n                </Button>\n              </div>\n            </GlassCard>\n          </div>\n        )}\n\n        {showBowlerModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <GlassCard className=\"p-6 m-4 max-w-lg w-full\">\n              <h3 className=\"text-xl font-semibold mb-4\">Select Bowler for Next Over</h3>\n              \n              <div className=\"mb-6\">\n                <h4 className=\"text-sm font-medium mb-3 text-slate-300\">Available Bowlers</h4>\n                <div className=\"max-h-64 overflow-y-auto\">\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {getAvailableBowlers().map((bowler) => (\n                      <Button\n                        key={bowler.id}\n                        onClick={() => setSelectedNewBowler(bowler.id)}\n                        className={`h-12 text-left px-4 ${\n                          selectedNewBowler === bowler.id\n                            ? 'bg-purple-600/30 border-purple-500/50 text-purple-300'\n                            : 'bg-slate-600/20 hover:bg-slate-600/30'\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-between w-full\">\n                          <div>\n                            <div className=\"font-medium\">{bowler.name}</div>\n                            <div className=\"text-xs text-slate-400 capitalize\">{bowler.role}</div>\n                          </div>\n                          <div className=\"text-xs text-slate-400\">\n                            {bowler.bowlingStats.overs}.{bowler.bowlingStats.balls} overs\n                          </div>\n                        </div>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={confirmBowlerSelection}\n                  disabled={!selectedNewBowler}\n                  className=\"flex-1 bg-purple-600/20 hover:bg-purple-600/30 text-purple-400 disabled:opacity-50\"\n                >\n                  Confirm Bowler\n                </Button>\n                <Button \n                  onClick={() => {\n                    // Only allow closing if it's not end of over\n                    if (currentInnings?.balls !== 0) {\n                      setShowBowlerModal(false);\n                    }\n                  }} \n                  className=\"flex-1\"\n                  disabled={currentInnings?.balls === 0}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* Striker Selection Modal */}\n        {showStrikerModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <GlassCard className=\"p-6 m-4 max-w-lg w-full\">\n              <h3 className=\"text-xl font-semibold mb-4\">Select New Striker</h3>\n              \n              <div className=\"space-y-2 mb-6\">\n                {getBattingTeamPlayers()\n                  .filter(player => player.id !== currentInnings?.currentBatsmen.striker && player.id !== currentInnings?.currentBatsmen.nonStriker)\n                  .map(player => (\n                    <Button\n                      key={player.id}\n                      onClick={() => {\n                        // Switch striker logic\n                        if (currentInnings) {\n                          const updatedMatch: Match = {\n                            ...matchData,\n                            innings: {\n                              ...matchData.innings,\n                              [matchData.currentInnings === 1 ? 'first' : 'second']: {\n                                ...currentInnings,\n                                currentBatsmen: {\n                                  ...currentInnings.currentBatsmen,\n                                  striker: player.id\n                                }\n                              }\n                            }\n                          };\n                          setMatchData(updatedMatch);\n                        }\n                        setShowStrikerModal(false);\n                      }}\n                      className=\"w-full bg-green-600/20 hover:bg-green-600/30 text-green-400 h-10\"\n                    >\n                      {player.name}\n                    </Button>\n                  ))}\n              </div>\n\n              <Button onClick={() => setShowStrikerModal(false)} className=\"w-full\">\n                Cancel\n              </Button>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* New Batsman Modal - MANDATORY: Cannot be dismissed without selection */}\n        {showNewBatsmanModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" onClick={(e) => e.stopPropagation()}>\n            <GlassCard className=\"p-6 m-4 max-w-lg w-full\">\n              <h3 className=\"text-xl font-semibold mb-4\">Select New Batsman</h3>\n              \n              <div className=\"mb-4\">\n                <h4 className=\"text-sm font-medium mb-3 text-slate-300\">Available Batsmen</h4>\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                  {(() => {\n                    // CRITICAL FIX: Use battingFirst to determine correct batting team, same as getBattingTeamPlayers\n                    const battingTeam = matchData.currentInnings === 1 ? \n                      (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2) :\n                      (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1);\n                    const battingPlayers = battingTeam?.playingXI || [];\n                    \n                    console.log('New Batsman Modal FIXED Debug:', {\n                      currentInnings: matchData.currentInnings,\n                      team1Name: matchData.team1?.name,\n                      team2Name: matchData.team2?.name,\n                      battingTeamName: battingTeam?.name,\n                      battingTeamPlayers: battingPlayers.map(p => ({ id: p.id, name: p.name, role: p.role })),\n                      striker: currentInnings?.currentBatsmen?.striker,\n                      nonStriker: currentInnings?.currentBatsmen?.nonStriker\n                    });\n                    \n                    return battingPlayers\n                      .filter(player => {\n                        // Filter out:\n                        // 1. Current batsmen\n                        const isCurrentBatsman = player.id === currentInnings?.currentBatsmen.striker || \n                                               player.id === currentInnings?.currentBatsmen.nonStriker;\n                        \n                        // 2. Already dismissed players (but NOT retired hurt - they can return)\n                        // CRITICAL FIX: Use correct BattingStats properties (dismissalType, isRetiredHurt)\n                        const isOut = player.battingStats.isOut && !player.battingStats.isRetiredHurt;\n                        \n                        // 3. Additional robust check: if they have a dismissal type and it's not retired hurt\n                        const hasDismissalButNotRetiredHurt = player.battingStats.dismissalType && \n                                                            player.battingStats.dismissalType !== 'retiredHurt';\n                        \n                        console.log(`Player ${player.name} (ID: ${player.id}):`, {\n                          isCurrentBatsman,\n                          isOut: player.battingStats.isOut,\n                          isRetiredHurt: player.battingStats.isRetiredHurt,\n                          dismissalType: player.battingStats.dismissalType,\n                          ballsFaced: player.battingStats.ballsFaced,\n                          runs: player.battingStats.runs,\n                          finalIsOut: isOut,\n                          hasDismissalButNotRetiredHurt,\n                          shouldShow: !isCurrentBatsman && !isOut && !hasDismissalButNotRetiredHurt\n                        });\n                        \n                        // Show player only if:\n                        // - Not current batsman\n                        // - Not dismissed OR is retired hurt (can return)\n                        // - Doesn't have a dismissal type (unless it's retired hurt)\n                        return !isCurrentBatsman && !isOut && !hasDismissalButNotRetiredHurt;\n                      });\n                  })()\n                    .map(player => (\n                      <Button\n                        key={player.id}\n                        onClick={() => {\n                          if (!currentInnings) return;\n                          \n                          const updatedMatch = { ...matchData };\n                          const innings = updatedMatch.currentInnings === 1 ? \n                            updatedMatch.innings.first : updatedMatch.innings.second;\n                          \n                          if (!innings) return;\n                          \n                          // Check if this is a retired hurt player returning\n                          const isRetiredHurtReturning = player.battingStats.isRetiredHurt;\n                          \n                          if (isRetiredHurtReturning) {\n                            // Mark the player as no longer retired hurt\n                            const battingTeam = updatedMatch.currentInnings === 1 ? \n                              updatedMatch.team1 : updatedMatch.team2;\n                            \n                            const updatedPlayingXI = battingTeam.playingXI.map(p => {\n                              if (p.id === player.id) {\n                                return {\n                                  ...p,\n                                  battingStats: {\n                                    ...p.battingStats,\n                                    isRetiredHurt: false // No longer retired hurt\n                                  }\n                                };\n                              }\n                              return p;\n                            });\n                            \n                            battingTeam.playingXI = updatedPlayingXI;\n                          }\n                          \n                          // FIXED: Properly replace the dismissed batsman while maintaining both current batsmen\n                          // The dismissed batsman was either striker or non-striker (from outBatsman state)\n                          // The remaining batsman stays, and new batsman takes the dismissed position\n                          \n                          const currentStriker = innings.currentBatsmen?.striker;\n                          const currentNonStriker = innings.currentBatsmen?.nonStriker;\n                          \n                          console.log('New Batsman Selection Debug:', {\n                            outBatsman,\n                            currentStriker,\n                            currentNonStriker,\n                            newBatsmanId: player.id,\n                            newBatsmanName: player.name\n                          });\n                          \n                          if (outBatsman === currentStriker) {\n                            // Striker was dismissed - new batsman becomes striker, non-striker stays\n                            innings.currentBatsmen = {\n                              striker: player.id,\n                              nonStriker: currentNonStriker || currentStriker // Fallback if nonStriker is missing\n                            };\n                          } else if (outBatsman === currentNonStriker) {\n                            // Non-striker was dismissed - new batsman becomes non-striker, striker stays\n                            innings.currentBatsmen = {\n                              striker: currentStriker || currentNonStriker, // Fallback if striker is missing\n                              nonStriker: player.id\n                            };\n                          } else {\n                            // Fallback: if outBatsman doesn't match, assume striker was dismissed\n                            // Also ensure we have a valid non-striker\n                            const remainingBatsman = currentNonStriker || currentStriker;\n                            innings.currentBatsmen = {\n                              striker: player.id,\n                              nonStriker: remainingBatsman === player.id ? currentStriker : remainingBatsman\n                            };\n                          }\n                          \n                          // CRITICAL: Ensure both positions are filled and different\n                          if (!innings.currentBatsmen.striker || !innings.currentBatsmen.nonStriker) {\n                            console.error('CRITICAL: Missing batsman after replacement!', innings.currentBatsmen);\n                            // Emergency fallback: find any two available batsmen\n                            const battingTeam = updatedMatch.currentInnings === 1 ? \n                              (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team1 : updatedMatch.team2) :\n                              (updatedMatch.battingFirst === updatedMatch.team1?.name ? updatedMatch.team2 : updatedMatch.team1);\n                            \n                            const availableBatsmen = battingTeam?.playingXI?.filter(p => \n                              !p.battingStats.isOut || p.battingStats.isRetiredHurt\n                            ) || [];\n                            \n                            if (availableBatsmen.length >= 2) {\n                              innings.currentBatsmen = {\n                                striker: player.id,\n                                nonStriker: availableBatsmen.find(p => p.id !== player.id)?.id || availableBatsmen[1]?.id\n                              };\n                            }\n                          }\n                          \n                          console.log('Final current batsmen after replacement:', innings.currentBatsmen);\n                          \n                          setMatchData(updatedMatch);\n                          onScoreUpdate(updatedMatch);\n                          setShowNewBatsmanModal(false);\n                        }}\n                        className={`w-full h-12 ${\n                          player.battingStats.isRetiredHurt \n                            ? 'bg-orange-600/20 hover:bg-orange-600/30 text-orange-400' \n                            : 'bg-green-600/20 hover:bg-green-600/30 text-green-400'\n                        }`}\n                      >\n                        <div className=\"flex flex-col items-start\">\n                          <span className=\"font-medium\">{player.name}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-xs text-slate-400 capitalize\">{player.role}</span>\n                            {player.battingStats.isRetiredHurt && (\n                              <span className=\"text-xs text-orange-400\">üè• Retired Hurt</span>\n                            )}\n                          </div>\n                        </div>\n                      </Button>\n                    ))}\n                </div>\n              </div>\n\n              <div className=\"text-center text-sm text-slate-400 mt-4\">\n                ‚ö†Ô∏è You must select a new batsman to continue scoring\n              </div>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* Retired Hurt Modal */}\n        {showRetiredHurtModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <GlassCard className=\"p-6 m-4 max-w-lg w-full\">\n              <h3 className=\"text-xl font-semibold mb-4\">üè• Retired Hurt</h3>\n              \n              <div className=\"mb-4\">\n                <h4 className=\"text-sm font-medium mb-3 text-slate-300\">Select Batsman to Retire</h4>\n                <div className=\"space-y-2\">\n                  {[\n                    { id: currentInnings?.currentBatsmen.striker, position: 'Striker' },\n                    { id: currentInnings?.currentBatsmen.nonStriker, position: 'Non-Striker' }\n                  ]\n                    .filter(({id}) => id)\n                    .map(({id, position}) => {\n                    const player = getBattingTeamPlayers().find(p => p.id === id);\n                    return player ? (\n                      <Button\n                        key={player.id}\n                        onClick={() => {\n                          if (!currentInnings) return;\n                          \n                          const updatedMatch = { ...matchData };\n                          const innings = updatedMatch.currentInnings === 1 ? \n                            updatedMatch.innings.first : updatedMatch.innings.second;\n                          \n                          if (!innings) return;\n\n                          // Mark batsman as retired hurt (NOT out - they can return)\n                          const battingTeam = updatedMatch.currentInnings === 1 ? \n                            updatedMatch.team1 : updatedMatch.team2;\n                          \n                          const updatedPlayingXI = battingTeam.playingXI.map(p => {\n                            if (p.id === player.id) {\n                              return {\n                                ...p,\n                                battingStats: {\n                                  ...p.battingStats,\n                                  isOut: false, // NOT out - they can return\n                                  isRetiredHurt: true, // Mark as retired hurt\n                                  dismissalType: undefined // No dismissal type\n                                }\n                              };\n                            }\n                            return p;\n                          });\n                          \n                          battingTeam.playingXI = updatedPlayingXI;\n                          \n                          // Set outBatsman for new batsman selection\n                          setOutBatsman(player.id);\n                          setShowRetiredHurtModal(false);\n                          setShowNewBatsmanModal(true);\n                        }}\n                        className=\"w-full bg-orange-600/20 hover:bg-orange-600/30 text-orange-400 h-12\"\n                      >\n                        <div className=\"flex flex-col items-start\">\n                          <span className=\"font-medium\">{player.name}</span>\n                          <span className=\"text-xs text-slate-400\">{position}</span>\n                        </div>\n                      </Button>\n                    ) : null;\n                  })}\n                </div>\n              </div>\n\n              <Button onClick={() => setShowRetiredHurtModal(false)} className=\"w-full\">\n                Cancel\n              </Button>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* Professional Scorecard Modal */}\n        {showScorecard && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <GlassCard className=\"p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-2xl font-semibold\">üìä Match Scorecard</h3>\n                <Button onClick={() => setShowScorecard(false)} className=\"bg-red-600/20 hover:bg-red-600/30 text-red-400\">\n                  ‚úï Close\n                </Button>\n              </div>\n\n              {/* Match Summary */}\n              <div className=\"mb-6 p-4 bg-slate-800/50 rounded-lg\">\n                <h4 className=\"text-lg font-semibold mb-3 text-cyan-400\">Match Summary</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <h5 className=\"font-medium text-green-400\">{matchData.team1.name}</h5>\n                    <p className=\"text-2xl font-bold\">\n                      {matchData.innings.first?.score || 0}/{matchData.innings.first?.wickets || 0}\n                    </p>\n                    <p className=\"text-sm text-slate-400\">\n                      ({matchData.innings.first?.overs || 0} overs)\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-purple-400\">{matchData.team2.name}</h5>\n                    <p className=\"text-2xl font-bold\">\n                      {matchData.innings.second?.score || 0}/{matchData.innings.second?.wickets || 0}\n                    </p>\n                    <p className=\"text-sm text-slate-400\">\n                      ({matchData.innings.second?.overs || 0} overs)\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Detailed Statistics */}\n              <div className=\"space-y-6\">\n                {/* First Innings */}\n                {matchData.innings.first && (\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-3 text-green-400\">\n                      {matchData.team1.name} Batting\n                    </h4>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full text-sm\">\n                        <thead>\n                          <tr className=\"border-b border-slate-600\">\n                            <th className=\"text-left p-2\">Batsman</th>\n                            <th className=\"text-center p-2\">R</th>\n                            <th className=\"text-center p-2\">B</th>\n                            <th className=\"text-center p-2\">4s</th>\n                            <th className=\"text-center p-2\">6s</th>\n                            <th className=\"text-center p-2\">SR</th>\n                            <th className=\"text-left p-2\">Dismissal</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {matchData.team1.playingXI && matchData.team1.playingXI.length > 0 ? (\n                            matchData.team1.playingXI.map((player) => {\n                              const battingStats = player.battingStats;\n                              return (\n                                <tr key={player.id} className=\"border-b border-slate-700/50\">\n                                  <td className=\"p-2 font-medium\">{player.name}</td>\n                                  <td className=\"text-center p-2\">{battingStats.runs}</td>\n                                  <td className=\"text-center p-2\">{battingStats.ballsFaced}</td>\n                                  <td className=\"text-center p-2\">{battingStats.fours}</td>\n                                  <td className=\"text-center p-2\">{battingStats.sixes}</td>\n                                  <td className=\"text-center p-2\">\n                                    {battingStats.ballsFaced > 0 ? ((battingStats.runs / battingStats.ballsFaced) * 100).toFixed(1) : '0.0'}\n                                  </td>\n                                  <td className=\"p-2 text-slate-400\">{battingStats.status}</td>\n                                </tr>\n                              );\n                            })\n                          ) : (\n                            <tr>\n                              <td colSpan={7} className=\"p-4 text-center text-slate-400\">\n                                No players in playing XI\n                              </td>\n                            </tr>\n                          )}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                )}\n\n                {/* Second Innings */}\n                {matchData.innings.second && (\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-3 text-purple-400\">\n                      {matchData.team2.name} Batting\n                    </h4>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full text-sm\">\n                        <thead>\n                          <tr className=\"border-b border-slate-600\">\n                            <th className=\"text-left p-2\">Batsman</th>\n                            <th className=\"text-center p-2\">R</th>\n                            <th className=\"text-center p-2\">B</th>\n                            <th className=\"text-center p-2\">4s</th>\n                            <th className=\"text-center p-2\">6s</th>\n                            <th className=\"text-center p-2\">SR</th>\n                            <th className=\"text-left p-2\">Dismissal</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {matchData.team2.playingXI && matchData.team2.playingXI.length > 0 ? (\n                            matchData.team2.playingXI.map((player) => {\n                              const battingStats = player.battingStats;\n                              return (\n                                <tr key={player.id} className=\"border-b border-slate-700/50\">\n                                  <td className=\"p-2 font-medium\">{player.name}</td>\n                                  <td className=\"text-center p-2\">{battingStats.runs}</td>\n                                  <td className=\"text-center p-2\">{battingStats.ballsFaced}</td>\n                                  <td className=\"text-center p-2\">{battingStats.fours}</td>\n                                  <td className=\"text-center p-2\">{battingStats.sixes}</td>\n                                  <td className=\"text-center p-2\">\n                                    {battingStats.ballsFaced > 0 ? ((battingStats.runs / battingStats.ballsFaced) * 100).toFixed(1) : '0.0'}\n                                  </td>\n                                  <td className=\"p-2 text-slate-400\">{battingStats.status}</td>\n                                </tr>\n                              );\n                            })\n                          ) : (\n                            <tr>\n                              <td colSpan={7} className=\"p-4 text-center text-slate-400\">\n                                No players in playing XI\n                              </td>\n                            </tr>\n                          )}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* Innings Break Modal */}\n        {showInningsBreak && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <GlassCard className=\"p-8 m-4 max-w-lg w-full text-center\">\n              <h3 className=\"text-2xl font-semibold mb-4\">üèè Innings Break</h3>\n              <p className=\"text-slate-300 mb-2\">\n                {matchData.team1.name}: {matchData.innings.first?.score}/{matchData.innings.first?.wickets}\n              </p>\n              <p className=\"text-slate-300 mb-6\">\n                Target: {(matchData.innings.first?.score || 0) + 1} runs\n              </p>\n              <Button\n                onClick={() => {\n                  // Initialize second innings\n                  const updatedMatch = { ...matchData };\n                  \n                  // Create second innings if it doesn't exist\n                  if (!updatedMatch.innings.second) {\n                    updatedMatch.innings.second = {\n                      number: 2,\n                      battingTeam: matchData.team2.name,\n                      bowlingTeam: matchData.team1.name,\n                      score: 0,\n                      wickets: 0,\n                      overs: 0,\n                      balls: 0,\n                      extras: 0,\n                      target: (matchData.innings.first?.score || 0) + 1,\n                      isComplete: false,\n                      currentBatsmen: {\n                        striker: matchData.team2.playingXI[0]?.id || '',\n                        nonStriker: matchData.team2.playingXI[1]?.id || ''\n                      },\n                      currentBowler: matchData.team1.playingXI[0]?.id || '',\n                      overHistory: [],\n                      ballHistory: [],\n                      partnerships: [],\n                      commentary: []\n                    };\n                  }\n                  \n                  // Switch to second innings\n                  updatedMatch.currentInnings = 2;\n                  \n                  // Initialize batting stats for team 2\n                  matchData.team2.playingXI.forEach(player => {\n                    if (!player.battingStats) {\n                      player.battingStats = {\n                        runs: 0,\n                        ballsFaced: 0,\n                        fours: 0,\n                        sixes: 0,\n                        strikeRate: 0,\n                        status: 'not out',\n                        isOut: false,\n                        isRetiredHurt: false\n                      };\n                    }\n                  });\n                  \n                  // Initialize bowling stats for team 1\n                  matchData.team1.playingXI.forEach(player => {\n                    if (!player.bowlingStats) {\n                      player.bowlingStats = {\n                        overs: 0,\n                        runs: 0,\n                        wickets: 0,\n                        economyRate: 0,\n                        balls: 0,\n                        wides: 0,\n                        noBalls: 0\n                      };\n                    }\n                  });\n                  \n                  setShowInningsBreak(false);\n                  onScoreUpdate(updatedMatch);\n                }}\n                className=\"bg-green-600/20 hover:bg-green-600/30 text-green-400\"\n              >\n                Start Second Innings\n              </Button>\n            </GlassCard>\n          </div>\n        )}\n\n        {showMatchCompletionScorecard && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <GlassCard className=\"p-6 max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n              {/* Match Result Header */}\n              <div className=\"text-center mb-6\">\n                <Trophy className=\"w-12 h-12 mx-auto mb-3 text-yellow-400\" />\n                <h2 className=\"text-2xl font-bold mb-2\">üèè Match Complete</h2>\n                <div className=\"text-lg font-semibold text-purple-300 mb-2\">\n                  {matchData.winner === 'Tie' ? 'Match Tied!' : `${matchData.winner} Wins!`}\n                </div>\n                <div className=\"text-sm text-slate-400\">\n                  {matchData.team1?.name} vs {matchData.team2?.name} ‚Ä¢ {matchData.totalOvers} Overs\n                </div>\n              </div>\n\n              {/* Both Innings Scorecards */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                \n                {/* First Innings Scorecard */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-center text-blue-300 border-b border-slate-600 pb-2\">\n                    First Innings - {matchData.battingFirst === matchData.team1?.name ? matchData.team1?.name : matchData.team2?.name}\n                  </h3>\n                  \n                  {/* First Innings Score Summary */}\n                  <div className=\"text-center bg-slate-800/50 rounded-lg p-3\">\n                    <div className=\"text-2xl font-bold text-blue-400\">\n                      {matchData.innings.first?.score || 0}/{matchData.innings.first?.wickets || 0}\n                    </div>\n                    <div className=\"text-sm text-slate-400\">\n                      {matchData.innings.first?.overs || 0}.{matchData.innings.first?.balls || 0} overs\n                      {matchData.innings.first && (\n                        <span className=\"ml-2\">\n                          (RR: {matchData.innings.first.overs > 0 ? \n                            ((matchData.innings.first.score / (matchData.innings.first.overs + (matchData.innings.first.balls / 6))) || 0).toFixed(2) : '0.00'})\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* First Innings Batting */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold text-slate-300 mb-2\">üèè Batting</h4>\n                    <div className=\"bg-slate-800/30 rounded-lg overflow-hidden\">\n                      <div className=\"grid grid-cols-6 gap-2 p-2 text-xs font-semibold text-slate-400 border-b border-slate-600\">\n                        <div>Batsman</div>\n                        <div className=\"text-center\">R</div>\n                        <div className=\"text-center\">B</div>\n                        <div className=\"text-center\">4s</div>\n                        <div className=\"text-center\">6s</div>\n                        <div className=\"text-center\">SR</div>\n                      </div>\n                      {(() => {\n                        const firstInningsBattingTeam = matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2;\n                        return firstInningsBattingTeam?.playingXI?.filter(player => \n                          player.battingStats.ballsFaced > 0 || player.battingStats.runs > 0\n                        ).map(player => (\n                          <div key={player.id} className=\"grid grid-cols-6 gap-2 p-2 text-xs border-b border-slate-700/50\">\n                            <div className=\"font-medium\">\n                              {player.name}\n                              {player.battingStats.isOut && (\n                                <div className=\"text-red-400 text-[10px]\">\n                                  {player.battingStats.dismissalType}\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"text-center\">{player.battingStats.runs}</div>\n                            <div className=\"text-center\">{player.battingStats.ballsFaced}</div>\n                            <div className=\"text-center\">{player.battingStats.fours}</div>\n                            <div className=\"text-center\">{player.battingStats.sixes}</div>\n                            <div className=\"text-center\">{player.battingStats.strikeRate.toFixed(1)}</div>\n                          </div>\n                        ));\n                      })()}\n                    </div>\n                  </div>\n\n                  {/* First Innings Bowling */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold text-slate-300 mb-2\">‚öæ Bowling</h4>\n                    <div className=\"bg-slate-800/30 rounded-lg overflow-hidden\">\n                      <div className=\"grid grid-cols-5 gap-2 p-2 text-xs font-semibold text-slate-400 border-b border-slate-600\">\n                        <div>Bowler</div>\n                        <div className=\"text-center\">O</div>\n                        <div className=\"text-center\">R</div>\n                        <div className=\"text-center\">W</div>\n                        <div className=\"text-center\">ER</div>\n                      </div>\n                      {(() => {\n                        const firstInningsBowlingTeam = matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1;\n                        return firstInningsBowlingTeam?.playingXI?.filter(player => \n                          player.bowlingStats.overs > 0 || player.bowlingStats.balls > 0 || player.bowlingStats.runs > 0\n                        ).map(player => (\n                          <div key={player.id} className=\"grid grid-cols-5 gap-2 p-2 text-xs border-b border-slate-700/50\">\n                            <div className=\"font-medium\">{player.name}</div>\n                            <div className=\"text-center\">{player.bowlingStats.overs}.{player.bowlingStats.balls}</div>\n                            <div className=\"text-center\">{player.bowlingStats.runs}</div>\n                            <div className=\"text-center\">{player.bowlingStats.wickets}</div>\n                            <div className=\"text-center\">{player.bowlingStats.economyRate.toFixed(2)}</div>\n                          </div>\n                        ));\n                      })()}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Second Innings Scorecard */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-center text-green-300 border-b border-slate-600 pb-2\">\n                    Second Innings - {matchData.battingFirst === matchData.team1?.name ? matchData.team2?.name : matchData.team1?.name}\n                  </h3>\n                  \n                  {/* Second Innings Score Summary */}\n                  <div className=\"text-center bg-slate-800/50 rounded-lg p-3\">\n                    <div className=\"text-2xl font-bold text-green-400\">\n                      {matchData.innings.second?.score || 0}/{matchData.innings.second?.wickets || 0}\n                    </div>\n                    <div className=\"text-sm text-slate-400\">\n                      {matchData.innings.second?.overs || 0}.{matchData.innings.second?.balls || 0} overs\n                      {matchData.innings.second && (\n                        <span className=\"ml-2\">\n                          (RR: {matchData.innings.second.overs > 0 ? \n                            ((matchData.innings.second.score / (matchData.innings.second.overs + (matchData.innings.second.balls / 6))) || 0).toFixed(2) : '0.00'})\n                        </span>\n                      )}\n                    </div>\n                    {matchData.innings.first && (\n                      <div className=\"text-xs text-purple-300 mt-1\">\n                        Target: {(matchData.innings.first.score || 0) + 1} ‚Ä¢ \n                        Need: {Math.max(0, (matchData.innings.first.score || 0) + 1 - (matchData.innings.second?.score || 0))} runs\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Second Innings Batting */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold text-slate-300 mb-2\">üèè Batting</h4>\n                    <div className=\"bg-slate-800/30 rounded-lg overflow-hidden\">\n                      <div className=\"grid grid-cols-6 gap-2 p-2 text-xs font-semibold text-slate-400 border-b border-slate-600\">\n                        <div>Batsman</div>\n                        <div className=\"text-center\">R</div>\n                        <div className=\"text-center\">B</div>\n                        <div className=\"text-center\">4s</div>\n                        <div className=\"text-center\">6s</div>\n                        <div className=\"text-center\">SR</div>\n                      </div>\n                      {(() => {\n                        const secondInningsBattingTeam = matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1;\n                        return secondInningsBattingTeam?.playingXI?.filter(player => \n                          player.battingStats.ballsFaced > 0 || player.battingStats.runs > 0\n                        ).map(player => (\n                          <div key={player.id} className=\"grid grid-cols-6 gap-2 p-2 text-xs border-b border-slate-700/50\">\n                            <div className=\"font-medium\">\n                              {player.name}\n                              {player.battingStats.isOut && (\n                                <div className=\"text-red-400 text-[10px]\">\n                                  {player.battingStats.dismissalType}\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"text-center\">{player.battingStats.runs}</div>\n                            <div className=\"text-center\">{player.battingStats.ballsFaced}</div>\n                            <div className=\"text-center\">{player.battingStats.fours}</div>\n                            <div className=\"text-center\">{player.battingStats.sixes}</div>\n                            <div className=\"text-center\">{player.battingStats.strikeRate.toFixed(1)}</div>\n                          </div>\n                        ));\n                      })()}\n                    </div>\n                  </div>\n\n                  {/* Second Innings Bowling */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold text-slate-300 mb-2\">‚öæ Bowling</h4>\n                    <div className=\"bg-slate-800/30 rounded-lg overflow-hidden\">\n                      <div className=\"grid grid-cols-5 gap-2 p-2 text-xs font-semibold text-slate-400 border-b border-slate-600\">\n                        <div>Bowler</div>\n                        <div className=\"text-center\">O</div>\n                        <div className=\"text-center\">R</div>\n                        <div className=\"text-center\">W</div>\n                        <div className=\"text-center\">ER</div>\n                      </div>\n                      {(() => {\n                        const secondInningsBowlingTeam = matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2;\n                        return secondInningsBowlingTeam?.playingXI?.filter(player => \n                          player.bowlingStats.overs > 0 || player.bowlingStats.balls > 0 || player.bowlingStats.runs > 0\n                        ).map(player => (\n                          <div key={player.id} className=\"grid grid-cols-5 gap-2 p-2 text-xs border-b border-slate-700/50\">\n                            <div className=\"font-medium\">{player.name}</div>\n                            <div className=\"text-center\">{player.bowlingStats.overs}.{player.bowlingStats.balls}</div>\n                            <div className=\"text-center\">{player.bowlingStats.runs}</div>\n                            <div className=\"text-center\">{player.bowlingStats.wickets}</div>\n                            <div className=\"text-center\">{player.bowlingStats.economyRate.toFixed(2)}</div>\n                          </div>\n                        ));\n                      })()}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Match Summary */}\n              <div className=\"mt-6 pt-4 border-t border-slate-600\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center text-sm\">\n                  <div>\n                    <div className=\"text-slate-400\">Match Format</div>\n                    <div className=\"font-semibold\">{matchData.totalOvers} Overs</div>\n                  </div>\n                  <div>\n                    <div className=\"text-slate-400\">Result</div>\n                    <div className=\"font-semibold text-yellow-400\">\n                      {matchData.winner === 'Tie' ? 'Match Tied' : `${matchData.winner} Won`}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-slate-400\">Margin</div>\n                    <div className=\"font-semibold\">\n                      {matchData.winner === 'Tie' ? 'Tie' : \n                        matchData.currentInnings === 2 && matchData.innings.second?.score && matchData.innings.first?.score ?\n                          (matchData.innings.second.score > matchData.innings.first.score ? \n                            `${10 - (matchData.innings.second.wickets || 0)} wickets` :\n                            `${(matchData.innings.first.score || 0) - (matchData.innings.second.score || 0)} runs`\n                          ) : 'Match Complete'\n                      }\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Match Awards Section */}\n              {matchData.awards && (\n                <div className=\"mt-6 pt-4 border-t border-slate-600\">\n                  <h3 className=\"text-lg font-semibold text-gradient-primary mb-4 text-center\">üèÜ Match Awards</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    \n                    {/* Best Batsman */}\n                    {matchData.awards.bestBatsman && (\n                      <div className=\"bg-slate-800/50 rounded-lg p-4 text-center\">\n                        <div className=\"text-yellow-400 font-semibold mb-2\">üèè Best Batsman</div>\n                        <div className=\"font-bold text-lg\">{matchData.awards.bestBatsman.name}</div>\n                        <div className=\"text-sm text-slate-400\">\n                          {matchData.awards.bestBatsman.battingStats.runs} runs \n                          ({matchData.awards.bestBatsman.battingStats.ballsFaced} balls)\n                        </div>\n                        <div className=\"text-xs text-slate-500\">\n                          SR: {matchData.awards.bestBatsman.battingStats.strikeRate.toFixed(1)}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Best Bowler */}\n                    {matchData.awards.bestBowler && (\n                      <div className=\"bg-slate-800/50 rounded-lg p-4 text-center\">\n                        <div className=\"text-blue-400 font-semibold mb-2\">üé≥ Best Bowler</div>\n                        <div className=\"font-bold text-lg\">{matchData.awards.bestBowler.name}</div>\n                        <div className=\"text-sm text-slate-400\">\n                          {matchData.awards.bestBowler.bowlingStats.wickets} wickets\n                        </div>\n                        <div className=\"text-xs text-slate-500\">\n                          {matchData.awards.bestBowler.bowlingStats.overs}.{matchData.awards.bestBowler.bowlingStats.balls} overs, \n                          {matchData.awards.bestBowler.bowlingStats.runs} runs\n                        </div>\n                        <div className=\"text-xs text-slate-500\">\n                          Econ: {matchData.awards.bestBowler.bowlingStats.overs > 0 ? \n                            (matchData.awards.bestBowler.bowlingStats.runs / matchData.awards.bestBowler.bowlingStats.overs).toFixed(1) : '0.0'}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Man of the Match */}\n                    {matchData.awards.manOfTheMatch && (\n                      <div className=\"bg-gradient-to-br from-yellow-500/20 to-orange-500/20 rounded-lg p-4 text-center border border-yellow-500/30\">\n                        <div className=\"text-yellow-300 font-semibold mb-2\">‚≠ê Man of the Match</div>\n                        <div className=\"font-bold text-xl text-yellow-200\">{matchData.awards.manOfTheMatch.name}</div>\n                        <div className=\"text-sm text-yellow-100 mt-2\">\n                          {matchData.awards.manOfTheMatch.battingStats.runs > 0 && (\n                            <div>{matchData.awards.manOfTheMatch.battingStats.runs} runs</div>\n                          )}\n                          {matchData.awards.manOfTheMatch.bowlingStats.wickets > 0 && (\n                            <div>{matchData.awards.manOfTheMatch.bowlingStats.wickets} wickets</div>\n                          )}\n                          {matchData.awards.manOfTheMatch.fieldingStats.catches > 0 && (\n                            <div>{matchData.awards.manOfTheMatch.fieldingStats.catches} catches</div>\n                          )}\n                        </div>\n                        <div className=\"text-xs text-yellow-300 mt-1\">Most Valuable Player</div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Go to Home Screen Button */}\n              <div className=\"text-center mt-6\">\n                <Button\n                  onClick={() => {\n                    // Close the scorecard and navigate to home screen\n                    setShowMatchCompletionScorecard(false);\n                    // Navigate back to home screen if function is provided\n                    if (onNavigateHome) {\n                      onNavigateHome();\n                    }\n                  }}\n                  className=\"bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white px-8 py-3 text-lg font-semibold\"\n                >\n                  üè† Go to Home Screen\n                </Button>\n              </div>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* Mobile-First Extra Modals */}\n        \n        {/* Wide Modal */}\n        {showWideModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <GlassCard className=\"p-6 max-w-sm w-full\">\n              <h3 className=\"text-lg font-semibold mb-4 text-yellow-400\">Wide + Runs</h3>\n              <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                {[0, 1, 2, 3, 4].map((runs) => (\n                  <Button\n                    key={runs}\n                    onClick={() => {\n                      updateScore(runs + 1, true, 'wide');\n                      setShowWideModal(false);\n                    }}\n                    className=\"h-12 text-lg font-semibold bg-yellow-600/20 hover:bg-yellow-600/30 text-yellow-400\"\n                  >\n                    WD+{runs}\n                  </Button>\n                ))}\n              </div>\n              <Button\n                onClick={() => setShowWideModal(false)}\n                className=\"w-full bg-slate-600/20 hover:bg-slate-600/30\"\n              >\n                Cancel\n              </Button>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* No Ball Modal */}\n        {showNoBallModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <GlassCard className=\"p-6 max-w-sm w-full\">\n              <h3 className=\"text-lg font-semibold mb-4 text-orange-400\">No Ball + Runs</h3>\n              <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                {[0, 1, 2, 3, 4, 6].map((runs) => (\n                  <Button\n                    key={runs}\n                    onClick={() => {\n                      updateScore(runs + 1, true, 'noball');\n                      setShowNoBallModal(false);\n                    }}\n                    className=\"h-12 text-lg font-semibold bg-orange-600/20 hover:bg-orange-600/30 text-orange-400\"\n                  >\n                    NB+{runs}\n                  </Button>\n                ))}\n              </div>\n              <Button\n                onClick={() => setShowNoBallModal(false)}\n                className=\"w-full bg-slate-600/20 hover:bg-slate-600/30\"\n              >\n                Cancel\n              </Button>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* Bye Modal */}\n        {showByeModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <GlassCard className=\"p-6 max-w-sm w-full\">\n              <h3 className=\"text-lg font-semibold mb-4 text-blue-400\">Byes</h3>\n              <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                {[1, 2, 3, 4].map((runs) => (\n                  <Button\n                    key={runs}\n                    onClick={() => {\n                      updateScore(runs, true, 'bye');\n                      setShowByeModal(false);\n                    }}\n                    className=\"h-12 text-lg font-semibold bg-blue-600/20 hover:bg-blue-600/30 text-blue-400\"\n                  >\n                    B+{runs}\n                  </Button>\n                ))}\n              </div>\n              <Button\n                onClick={() => setShowByeModal(false)}\n                className=\"w-full bg-slate-600/20 hover:bg-slate-600/30\"\n              >\n                Cancel\n              </Button>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* Leg Bye Modal */}\n        {showLegByeModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <GlassCard className=\"p-6 max-w-sm w-full\">\n              <h3 className=\"text-lg font-semibold mb-4 text-indigo-400\">Leg Byes</h3>\n              <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                {[1, 2, 3, 4].map((runs) => (\n                  <Button\n                    key={runs}\n                    onClick={() => {\n                      updateScore(runs, true, 'legbye');\n                      setShowLegByeModal(false);\n                    }}\n                    className=\"h-12 text-lg font-semibold bg-indigo-600/20 hover:bg-indigo-600/30 text-indigo-400\"\n                  >\n                    LB+{runs}\n                  </Button>\n                ))}\n              </div>\n              <Button\n                onClick={() => setShowLegByeModal(false)}\n                className=\"w-full bg-slate-600/20 hover:bg-slate-600/30\"\n              >\n                Cancel\n              </Button>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* No Ball + Bye Modal */}\n        {showNoBallByeModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <GlassCard className=\"p-6 max-w-sm w-full\">\n              <h3 className=\"text-lg font-semibold mb-4 text-cyan-400\">No Ball + Byes</h3>\n              <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                {[1, 2, 3, 4].map((runs) => (\n                  <Button\n                    key={runs}\n                    onClick={() => {\n                      updateScore(runs + 1, true, 'noball-bye');\n                      setShowNoBallByeModal(false);\n                    }}\n                    className=\"h-12 text-lg font-semibold bg-cyan-600/20 hover:bg-cyan-600/30 text-cyan-400\"\n                  >\n                    NB+{runs}B\n                  </Button>\n                ))}\n              </div>\n              <Button\n                onClick={() => setShowNoBallByeModal(false)}\n                className=\"w-full bg-slate-600/20 hover:bg-slate-600/30\"\n              >\n                Cancel\n              </Button>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* No Ball + Leg Bye Modal */}\n        {showNoBallLegByeModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <GlassCard className=\"p-6 max-w-sm w-full\">\n              <h3 className=\"text-lg font-semibold mb-4 text-pink-400\">No Ball + Leg Byes</h3>\n              <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                {[1, 2, 3, 4].map((runs) => (\n                  <Button\n                    key={runs}\n                    onClick={() => {\n                      updateScore(runs + 1, true, 'noball-legbye');\n                      setShowNoBallLegByeModal(false);\n                    }}\n                    className=\"h-12 text-lg font-semibold bg-pink-600/20 hover:bg-pink-600/30 text-pink-400\"\n                  >\n                    NB+{runs}LB\n                  </Button>\n                ))}\n              </div>\n              <Button\n                onClick={() => setShowNoBallLegByeModal(false)}\n                className=\"w-full bg-slate-600/20 hover:bg-slate-600/30\"\n              >\n                Cancel\n              </Button>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* End Match Confirmation Modal */}\n        {showEndMatchModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <GlassCard className=\"p-6 m-4 max-w-md w-full\">\n              <h3 className=\"text-xl font-semibold mb-4 text-center\">üèÅ End Match</h3>\n              \n              <div className=\"mb-6\">\n                <p className=\"text-slate-300 text-center mb-4\">\n                  Are you sure you want to end this match?\n                </p>\n                <p className=\"text-slate-400 text-sm text-center\">\n                  This action will complete the match with current scores and cannot be undone.\n                </p>\n              </div>\n\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={() => setShowEndMatchModal(false)}\n                  className=\"flex-1 bg-slate-600/20 hover:bg-slate-600/30 text-white\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleEndMatch}\n                  className=\"flex-1 bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white\"\n                >\n                  End Match\n                </Button>\n              </div>\n            </GlassCard>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfessionalScoringInterfaceV3;\n","size_bytes":139345},"src/components/ProfessionalScoringInterfaceV4.tsx":{"content":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Match, Player } from '@/types/cricket';\nimport { RotateCcw, Trophy, ArrowLeft } from 'lucide-react';\n\n// Import our new modular components\nimport Scoreboard from './scoring/Scoreboard';\nimport QuickScoring from './scoring/QuickScoring';\nimport MatchStatistics from './scoring/MatchStatistics';\nimport WicketModal from './scoring/WicketModal';\nimport NewBatsmanModal from './scoring/NewBatsmanModal';\nimport ExtrasModal from './scoring/ExtrasModal';\nimport ConfirmationDialog from './ui/ConfirmationDialog';\nimport Modal from './ui/Modal';\n\n// Import our new hooks and utilities\nimport { useMatchScoring } from '@/hooks/useMatchScoring';\nimport { cricketFeedback, cricketToast } from '@/utils/toast';\nimport { CRICKET_CONSTANTS, cricketUtils } from '@/constants/cricket';\n\ninterface ProfessionalScoringInterfaceProps {\n  matchData: Match;\n  onScoreUpdate: (match: Match) => void;\n  onNavigateHome?: () => void;\n}\n\nconst ProfessionalScoringInterfaceV4: React.FC<ProfessionalScoringInterfaceProps> = ({\n  matchData,\n  onScoreUpdate,\n  onNavigateHome\n}) => {\n  // Use our custom hook for scoring logic\n  const {\n    lastAction,\n    freeHit,\n    updateScore,\n    handleWicket,\n    undoLastAction,\n    rotateStrike,\n    currentInnings,\n    battingTeam,\n    bowlingTeam,\n    isMatchComplete,\n    isInningsComplete\n  } = useMatchScoring(matchData, onScoreUpdate);\n\n  // Modal states\n  const [showWicketModal, setShowWicketModal] = useState(false);\n  const [showNewBatsmanModal, setShowNewBatsmanModal] = useState(false);\n  const [showExtrasModal, setShowExtrasModal] = useState(false);\n  const [showScorecard, setShowScorecard] = useState(false);\n  const [showEndMatchModal, setShowEndMatchModal] = useState(false);\n  const [showBowlerModal, setShowBowlerModal] = useState(false);\n\n  // Modal data states\n  const [extrasModalType, setExtrasModalType] = useState<'wide' | 'noball' | 'bye' | 'legbye' | 'noball-bye' | 'noball-legbye'>('wide');\n  const [dismissedBatsmanId, setDismissedBatsmanId] = useState<string>('');\n  const [selectedNewBowler, setSelectedNewBowler] = useState<string>('');\n\n  // Animation states\n  const [scoreAnimation, setScoreAnimation] = useState(false);\n  const [boundaryAnimation, setBoundaryAnimation] = useState(false);\n\n  // Get current batsmen with proper error handling\n  const currentBatsmen = useMemo(() => {\n    if (!currentInnings || !battingTeam) return null;\n\n    const striker = battingTeam.playingXI.find((p: Player) => p.id === currentInnings.currentBatsmen.striker);\n    const nonStriker = battingTeam.playingXI.find((p: Player) => p.id === currentInnings.currentBatsmen.nonStriker);\n\n    if (!striker || !nonStriker) return null;\n\n    return { striker, nonStriker };\n  }, [currentInnings, battingTeam]);\n\n  // Get current bowler\n  const currentBowler = useMemo(() => {\n    if (!currentInnings || !bowlingTeam) return null;\n    return bowlingTeam.playingXI.find((p: Player) => p.id === currentInnings.currentBowler) || null;\n  }, [currentInnings, bowlingTeam]);\n\n  // Handle keyboard shortcuts\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      // Ignore if modals are open or if typing in an input\n      if (showWicketModal || showNewBatsmanModal || showExtrasModal || showScorecard || \n          event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n        return;\n      }\n\n      switch (event.key) {\n        case '0': case '1': case '2': case '3': case '4': case '6':\n          handleScoreUpdate(parseInt(event.key));\n          break;\n        case 'w': case 'W':\n          handleWicketClick();\n          break;\n        case ' ': // Space for dot ball\n          event.preventDefault();\n          handleScoreUpdate(0);\n          break;\n        case 'u': case 'U':\n          handleUndo();\n          break;\n        case 's': case 'S':\n          rotateStrike();\n          cricketFeedback.scoreUpdate(0); // Generic feedback for strike rotation\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, [showWicketModal, showNewBatsmanModal, showExtrasModal, showScorecard]);\n\n  // Handle score update with animations\n  const handleScoreUpdate = useCallback((runs: number) => {\n    console.log('üéØ V4 INTERFACE: handleScoreUpdate called with runs:', runs);\n    const success = updateScore(runs);\n    console.log('üéØ V4 INTERFACE: updateScore returned:', success);\n    \n    if (success) {\n      // Trigger animations\n      setScoreAnimation(true);\n      setTimeout(() => setScoreAnimation(false), CRICKET_CONSTANTS.ANIMATION_DURATION);\n\n      if (runs === 4 || runs === 6) {\n        setBoundaryAnimation(true);\n        setTimeout(() => setBoundaryAnimation(false), CRICKET_CONSTANTS.BOUNDARY_ANIMATION_DURATION);\n      }\n\n      // Check for over completion\n      if (currentInnings && currentInnings.balls === 5) { // Will become 0 after this ball\n        setTimeout(() => {\n          setShowBowlerModal(true);\n        }, 1000);\n      }\n    }\n  }, [updateScore, currentInnings]);\n\n  // Handle wicket click\n  const handleWicketClick = useCallback(() => {\n    if (freeHit) {\n      cricketFeedback.error('Cannot take wicket on free hit (except run out)');\n      return;\n    }\n    setShowWicketModal(true);\n  }, [freeHit]);\n\n  // Handle wicket confirmation\n  const handleWicketConfirm = useCallback((dismissalType: string, outBatsman?: string) => {\n    const success = handleWicket(dismissalType, outBatsman);\n    \n    if (success) {\n      setDismissedBatsmanId(outBatsman || currentInnings?.currentBatsmen.striker || '');\n      \n      // Check if new batsman is needed\n      if (!isInningsComplete && !isMatchComplete) {\n        setTimeout(() => {\n          setShowNewBatsmanModal(true);\n        }, 1000);\n      }\n    }\n    \n    setShowWicketModal(false);\n  }, [handleWicket, currentInnings, isInningsComplete, isMatchComplete]);\n\n  // Handle new batsman selection\n  const handleNewBatsmanConfirm = useCallback((newBatsmanId: string) => {\n    if (!currentInnings || !battingTeam) return;\n\n    const updatedMatch = { ...matchData };\n    const innings = updatedMatch.currentInnings === 1 ? updatedMatch.innings.first : updatedMatch.innings.second;\n    \n    if (innings) {\n      // Replace the dismissed batsman\n      if (dismissedBatsmanId === innings.currentBatsmen.striker) {\n        innings.currentBatsmen.striker = newBatsmanId;\n      } else {\n        innings.currentBatsmen.nonStriker = newBatsmanId;\n      }\n      \n      onScoreUpdate(updatedMatch);\n      cricketToast.info.newBatsman(\n        battingTeam.playingXI.find((p: Player) => p.id === newBatsmanId)?.name || 'New batsman'\n      );\n    }\n    \n    setShowNewBatsmanModal(false);\n    setDismissedBatsmanId('');\n  }, [matchData, currentInnings, battingTeam, dismissedBatsmanId, onScoreUpdate]);\n\n  // Handle extras\n  const handleExtrasClick = useCallback((extraType: string) => {\n    setExtrasModalType(extraType as any);\n    setShowExtrasModal(true);\n  }, []);\n\n  const handleExtrasConfirm = useCallback((runs: number, extraType: string) => {\n    updateScore(runs, true, extraType as any);\n    setShowExtrasModal(false);\n  }, [updateScore]);\n\n  // Handle undo\n  const handleUndo = useCallback(() => {\n    undoLastAction();\n  }, [undoLastAction]);\n\n  // Handle end match\n  const handleEndMatch = useCallback(() => {\n    const updatedMatch = { ...matchData };\n    updatedMatch.isComplete = true;\n    updatedMatch.isLive = false;\n    \n    // Calculate final result\n    const result = cricketUtils.calculateMatchResult(updatedMatch);\n    updatedMatch.winner = result.winner;\n    updatedMatch.result = result.result;\n    \n    onScoreUpdate(updatedMatch);\n    cricketToast.success.matchCompleted(result.result);\n    setShowEndMatchModal(false);\n  }, [matchData, onScoreUpdate]);\n\n  // Handle bowler change\n  const handleBowlerChange = useCallback(() => {\n    if (!selectedNewBowler || !currentInnings) return;\n\n    const updatedMatch = { ...matchData };\n    const innings = updatedMatch.currentInnings === 1 ? updatedMatch.innings.first : updatedMatch.innings.second;\n    \n    if (innings) {\n      innings.currentBowler = selectedNewBowler;\n      onScoreUpdate(updatedMatch);\n      \n      const bowlerName = bowlingTeam?.playingXI.find((p: Player) => p.id === selectedNewBowler)?.name || 'New bowler';\n      cricketToast.info.bowlerChange(bowlerName);\n    }\n    \n    setShowBowlerModal(false);\n    setSelectedNewBowler('');\n  }, [selectedNewBowler, matchData, currentInnings, bowlingTeam, onScoreUpdate]);\n\n  // Get available bowlers for bowler change\n  const availableBowlers = useMemo(() => {\n    if (!bowlingTeam || !currentInnings) return [];\n    \n    return bowlingTeam.playingXI.filter((player: Player) => {\n      // Can't bowl consecutive overs\n      return player.id !== currentInnings.currentBowler;\n    });\n  }, [bowlingTeam, currentInnings]);\n\n  // Loading state\n  if (!currentInnings || !battingTeam || !bowlingTeam) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n          <p className=\"text-slate-300\">Loading match data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-2 sm:p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-4 sm:mb-6\">\n          <div className=\"flex items-center gap-2 sm:gap-4\">\n            {onNavigateHome && (\n              <Button\n                onClick={onNavigateHome}\n                className=\"p-2 bg-slate-600/20 hover:bg-slate-600/30 min-h-[44px]\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n            )}\n            <h1 className=\"text-lg sm:text-2xl font-bold text-gradient-aurora\">\n              Live Cricket Scoring\n            </h1>\n          </div>\n\n          <div className=\"flex items-center gap-2 sm:gap-3\">\n            {lastAction && (\n              <Button\n                onClick={handleUndo}\n                className=\"flex items-center gap-1 sm:gap-2 bg-orange-600/20 hover:bg-orange-600/30 text-orange-400 px-3 py-2 min-h-[44px] text-sm\"\n              >\n                <RotateCcw className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Undo</span>\n              </Button>\n            )}\n            \n            <Button\n              onClick={() => setShowEndMatchModal(true)}\n              className=\"flex items-center gap-1 sm:gap-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 px-3 py-2 min-h-[44px] text-sm\"\n            >\n              <Trophy className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">End Match</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Content Grid - Mobile First Design */}\n        <div className=\"space-y-4 lg:space-y-0 lg:grid lg:grid-cols-3 lg:gap-6\">\n          {/* Mobile: Scoring First, Desktop: Left Column - Scoreboard */}\n          <div className=\"order-2 lg:order-1 lg:col-span-2 space-y-4 sm:space-y-6\">\n            <Scoreboard\n              match={matchData}\n              currentInnings={currentInnings}\n              battingTeam={battingTeam}\n              bowlingTeam={bowlingTeam}\n              currentBatsmen={currentBatsmen}\n              currentBowler={currentBowler}\n            />\n\n            {/* Quick Actions - Mobile Optimized */}\n            <div className=\"flex gap-2 sm:gap-4\">\n              <Button\n                onClick={rotateStrike}\n                className=\"flex-1 bg-blue-600/20 hover:bg-blue-600/30 text-blue-400 min-h-[44px] text-sm\"\n              >\n                <span className=\"hidden sm:inline\">üîÑ </span>Rotate Strike\n              </Button>\n              <Button\n                onClick={() => setShowScorecard(true)}\n                className=\"flex-1 bg-purple-600/20 hover:bg-purple-600/30 text-purple-400 min-h-[44px] text-sm\"\n              >\n                <span className=\"hidden sm:inline\">üìä </span>Scorecard\n              </Button>\n            </div>\n          </div>\n\n          {/* Mobile: First Priority, Desktop: Right Column - Scoring & Statistics */}\n          <div className=\"order-1 lg:order-2 space-y-4 sm:space-y-6\">\n            <QuickScoring\n              onScore={handleScoreUpdate}\n              onWicket={handleWicketClick}\n              onExtra={handleExtrasClick}\n              freeHit={freeHit}\n              disabled={isMatchComplete}\n            />\n\n            {/* Statistics - Hidden on mobile by default, can be toggled */}\n            <div className=\"hidden sm:block\">\n              <MatchStatistics\n                match={matchData}\n                currentInnings={currentInnings}\n                battingTeam={battingTeam}\n                bowlingTeam={bowlingTeam}\n                onShowScorecard={() => setShowScorecard(true)}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Animations */}\n        {scoreAnimation && (\n          <div className=\"fixed inset-0 pointer-events-none flex items-center justify-center z-40\">\n            <div className=\"text-6xl font-bold text-white animate-pulse\">\n              +{lastAction?.runs || 0}\n            </div>\n          </div>\n        )}\n\n        {boundaryAnimation && (\n          <div className=\"fixed inset-0 pointer-events-none flex items-center justify-center z-40\">\n            <div className=\"text-8xl animate-bounce\">\n              {lastAction?.runs === 4 ? 'üèè' : 'üöÄ'}\n            </div>\n          </div>\n        )}\n\n        {/* Modals */}\n        <WicketModal\n          isOpen={showWicketModal}\n          onClose={() => setShowWicketModal(false)}\n          onConfirm={handleWicketConfirm}\n          currentBatsmen={currentBatsmen}\n        />\n\n        <NewBatsmanModal\n          isOpen={showNewBatsmanModal}\n          onClose={() => setShowNewBatsmanModal(false)}\n          onConfirm={handleNewBatsmanConfirm}\n          availablePlayers={battingTeam?.playingXI || []}\n          currentBatsmen={currentInnings.currentBatsmen}\n          dismissedBatsmanId={dismissedBatsmanId}\n        />\n\n        <ExtrasModal\n          isOpen={showExtrasModal}\n          onClose={() => setShowExtrasModal(false)}\n          onConfirm={handleExtrasConfirm}\n          extraType={extrasModalType}\n        />\n\n        <ConfirmationDialog\n          isOpen={showEndMatchModal}\n          onClose={() => setShowEndMatchModal(false)}\n          onConfirm={handleEndMatch}\n          title=\"End Match\"\n          message=\"Are you sure you want to end this match? This action cannot be undone.\"\n          confirmText=\"End Match\"\n          type=\"warning\"\n        />\n\n        {/* Bowler Change Modal */}\n        <Modal\n          isOpen={showBowlerModal}\n          onClose={() => setShowBowlerModal(false)}\n          title=\"üèè Change Bowler\"\n          size=\"md\"\n        >\n          <div className=\"space-y-4\">\n            <p className=\"text-slate-300 text-center\">\n              Over completed! Select the next bowler.\n            </p>\n            \n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {availableBowlers.map((bowler: Player) => (\n                <Button\n                  key={bowler.id}\n                  onClick={() => setSelectedNewBowler(bowler.id)}\n                  className={`w-full h-12 text-left px-4 ${\n                    selectedNewBowler === bowler.id\n                      ? 'bg-blue-600/30 border-blue-500/50 text-blue-300'\n                      : 'bg-slate-600/20 hover:bg-slate-600/30'\n                  }`}\n                >\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-medium\">{bowler.name}</span>\n                    <span className=\"text-xs text-slate-400\">\n                      {cricketUtils.formatOvers(bowler.bowlingStats.overs, bowler.bowlingStats.balls)} overs, \n                      {bowler.bowlingStats.runs} runs, {bowler.bowlingStats.wickets} wickets\n                    </span>\n                  </div>\n                </Button>\n              ))}\n            </div>\n\n            <Button\n              onClick={handleBowlerChange}\n              disabled={!selectedNewBowler}\n              className=\"w-full bg-blue-600/20 hover:bg-blue-600/30 text-blue-400 disabled:opacity-50\"\n            >\n              Confirm Bowler\n            </Button>\n          </div>\n        </Modal>\n\n        {/* Scorecard Modal - Placeholder */}\n        <Modal\n          isOpen={showScorecard}\n          onClose={() => setShowScorecard(false)}\n          title=\"üìä Full Scorecard\"\n          size=\"xl\"\n        >\n          <div className=\"text-center text-slate-300\">\n            <p>Full scorecard component will be implemented here.</p>\n            <p className=\"text-sm text-slate-400 mt-2\">\n              This will show detailed batting and bowling statistics for both teams.\n            </p>\n          </div>\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfessionalScoringInterfaceV4;","size_bytes":17370},"src/components/TeamManager.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport GlassCard from './GlassCard';\nimport { useTeamStorage } from '@/hooks/useTeamStorage';\nimport { Team } from '@/types/cricket';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Save, Upload, Trash2, Copy, Users, Crown, Shield, \n  Calendar, Clock, Download \n} from 'lucide-react';\n\ninterface TeamManagerProps {\n  currentTeam: Partial<Team>;\n  onLoadTeam: (team: Team) => void;\n  onSaveComplete?: () => void;\n  teamNumber: 1 | 2;\n  teamSize: number;\n}\n\nexport default function TeamManager({ currentTeam, onLoadTeam, onSaveComplete, teamNumber, teamSize }: TeamManagerProps) {\n  const { savedTeams, saveTeam, loadTeam, deleteTeam, duplicateTeam, getTeamStats } = useTeamStorage();\n  const { toast } = useToast();\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [showLoadDialog, setShowLoadDialog] = useState(false);\n  const [saveTeamName, setSaveTeamName] = useState(currentTeam.name || '');\n  const [selectedTeamId, setSelectedTeamId] = useState<string>('');\n\n  const handleSaveTeam = async () => {\n    if (!saveTeamName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a team name\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!currentTeam.fullRoster || currentTeam.fullRoster.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Cannot save team without players\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const savedTeam = await saveTeam({\n        ...currentTeam,\n        name: saveTeamName.trim()\n      });\n\n      toast({\n        title: \"Team Saved! üíæ\",\n        description: `${savedTeam.name} has been saved with ${savedTeam.fullRoster.length} players`,\n      });\n\n      setShowSaveDialog(false);\n      setSaveTeamName('');\n      onSaveComplete?.();\n    } catch (error) {\n      toast({\n        title: \"Save Failed\",\n        description: error instanceof Error ? error.message : \"Failed to save team\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleLoadTeam = (teamId: string) => {\n    const team = loadTeam(teamId);\n    if (team) {\n      onLoadTeam(team);\n      toast({\n        title: \"Team Loaded! üì•\",\n        description: `${team.name} loaded with ${team.fullRoster.length} players`,\n      });\n      setShowLoadDialog(false);\n    } else {\n      toast({\n        title: \"Load Failed\",\n        description: \"Could not load the selected team\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleDeleteTeam = (teamId: string, teamName: string) => {\n    if (confirm(`Are you sure you want to delete \"${teamName}\"? This action cannot be undone.`)) {\n      deleteTeam(teamId);\n      toast({\n        title: \"Team Deleted\",\n        description: `${teamName} has been removed from saved teams`,\n      });\n    }\n  };\n\n  const handleDuplicateTeam = (teamId: string, originalName: string) => {\n    const newName = prompt(`Enter name for duplicate of \"${originalName}\":`, `${originalName} Copy`);\n    if (newName && newName.trim()) {\n      const duplicated = duplicateTeam(teamId, newName.trim());\n      if (duplicated) {\n        toast({\n          title: \"Team Duplicated! üìã\",\n          description: `Created \"${duplicated.name}\" as a copy of \"${originalName}\"`,\n        });\n      }\n    }\n  };\n\n  const canSave = currentTeam.name && currentTeam.fullRoster && currentTeam.fullRoster.length > 0;\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Team Management Controls */}\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"text-lg font-semibold text-gradient-primary\">\n          Team {teamNumber} Management\n        </h4>\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"cosmic\"\n            size=\"sm\"\n            onClick={() => setShowLoadDialog(true)}\n            disabled={savedTeams.length === 0}\n          >\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Load Team\n          </Button>\n          <Button\n            variant=\"score\"\n            size=\"sm\"\n            onClick={() => {\n              setSaveTeamName(currentTeam.name || '');\n              setShowSaveDialog(true);\n            }}\n            disabled={!canSave}\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            Save Team\n          </Button>\n        </div>\n      </div>\n\n      {/* Current Team Info */}\n      {currentTeam.name && currentTeam.fullRoster && currentTeam.fullRoster.length > 0 && (\n        <GlassCard className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"font-medium\">{currentTeam.name}</div>\n              <div className=\"text-sm text-muted-foreground\">\n                {currentTeam.fullRoster.length} players ‚Ä¢ \n                {currentTeam.playingXI?.length === teamSize ? ' Playing XI selected' : ' Playing XI pending'}\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n              <Users className=\"h-4 w-4\" />\n              <span>{currentTeam.fullRoster.length}</span>\n            </div>\n          </div>\n        </GlassCard>\n      )}\n\n      {/* Save Team Dialog */}\n      <Dialog open={showSaveDialog} onOpenChange={setShowSaveDialog}>\n        <DialogContent className=\"glass-card border-glass-border/30\">\n          <DialogHeader>\n            <DialogTitle className=\"text-gradient-primary\">Save Team</DialogTitle>\n            <DialogDescription>\n              Save this team to your database for future matches and tournaments.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"save-team-name\">Team Name</Label>\n              <Input\n                id=\"save-team-name\"\n                value={saveTeamName}\n                onChange={(e) => setSaveTeamName(e.target.value)}\n                placeholder=\"Enter team name\"\n                className=\"glass-card border-glass-border/20\"\n              />\n            </div>\n            \n            {currentTeam.fullRoster && (\n              <div className=\"p-3 glass-card border-glass-border/10 rounded\">\n                <div className=\"text-sm font-medium mb-2\">Team Summary:</div>\n                <div className=\"grid grid-cols-2 gap-2 text-sm text-muted-foreground\">\n                  <div>Total Players: {currentTeam.fullRoster.length}</div>\n                  <div>Batsmen: {currentTeam.fullRoster.filter(p => p.role === 'batsman').length}</div>\n                  <div>Bowlers: {currentTeam.fullRoster.filter(p => p.role === 'bowler').length}</div>\n                  <div>All-rounders: {currentTeam.fullRoster.filter(p => p.role === 'allrounder').length}</div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex space-x-3\">\n              <Button onClick={handleSaveTeam} variant=\"cosmic\" className=\"flex-1\">\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save Team\n              </Button>\n              <Button onClick={() => setShowSaveDialog(false)} variant=\"ghost\">\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Load Team Dialog */}\n      <Dialog open={showLoadDialog} onOpenChange={setShowLoadDialog}>\n        <DialogContent className=\"glass-card border-glass-border/30 max-w-3xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-gradient-primary\">Load Saved Team</DialogTitle>\n            <DialogDescription>\n              Choose a saved team from your database to load into the current match setup.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {savedTeams.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <div className=\"text-lg font-medium mb-2\">No Saved Teams</div>\n              <div className=\"text-muted-foreground\">\n                Save your first team to see it here\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Select a team to load ({savedTeams.length} saved teams):\n              </div>\n              \n              <div className=\"grid gap-3 max-h-96 overflow-y-auto\">\n                {savedTeams\n                  .sort((a, b) => new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime())\n                  .map((team) => {\n                    const stats = getTeamStats(team.id);\n                    return (\n                      <motion.div\n                        key={team.id}\n                        initial={{ opacity: 0, y: 10 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        className={`p-4 glass-card border-glass-border/20 rounded-lg cursor-pointer transition-all hover:border-glass-border/40 ${\n                          selectedTeamId === team.id ? 'border-primary bg-primary/10' : ''\n                        }`}\n                        onClick={() => setSelectedTeamId(team.id)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h3 className=\"font-semibold text-lg\">{team.name}</h3>\n                              {team.captain && <Crown className=\"h-4 w-4 text-accent\" />}\n                              {team.wicketKeeper && <Shield className=\"h-4 w-4 text-secondary\" />}\n                            </div>\n                            \n                            <div className=\"grid grid-cols-2 gap-4 text-sm text-muted-foreground\">\n                              <div className=\"space-y-1\">\n                                <div>Players: {stats?.totalPlayers}</div>\n                                <div>Batsmen: {stats?.batsmen}</div>\n                              </div>\n                              <div className=\"space-y-1\">\n                                <div>Bowlers: {stats?.bowlers}</div>\n                                <div>All-rounders: {stats?.allRounders}</div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-4 mt-2 text-xs text-muted-foreground\">\n                              <div className=\"flex items-center space-x-1\">\n                                <Calendar className=\"h-3 w-3\" />\n                                <span>Created: {team.createdAt.toLocaleDateString()}</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <Clock className=\"h-3 w-3\" />\n                                <span>Used: {team.lastUsed.toLocaleDateString()}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex flex-col space-y-2 ml-4\">\n                            <Button\n                              variant=\"score\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleLoadTeam(team.id);\n                              }}\n                            >\n                              <Download className=\"h-3 w-3 mr-1\" />\n                              Load\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleDuplicateTeam(team.id, team.name);\n                              }}\n                            >\n                              <Copy className=\"h-3 w-3\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleDeleteTeam(team.id, team.name);\n                              }}\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n              </div>\n              \n              <div className=\"flex justify-end space-x-3\">\n                <Button onClick={() => setShowLoadDialog(false)} variant=\"ghost\">\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13393},"src/components/TeamSetup.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport GlassCard from './GlassCard';\nimport TeamManager from './TeamManager';\nimport PlayerBrowser from './PlayerBrowser';\nimport { Player, Team } from '@/types/cricket';\nimport { Plus, Users, Search, Zap, Crown, Shield, Trash2 } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface TeamSetupProps {\n  onTeamsReady: (team1: Team, team2: Team, matchOvers: number) => void;\n}\n\nexport default function TeamSetup({ onTeamsReady }: TeamSetupProps) {\n  const [team1, setTeam1] = useState<Partial<Team>>({ name: '', fullRoster: [] });\n  const [team2, setTeam2] = useState<Partial<Team>>({ name: '', fullRoster: [] });\n  const [currentTeam, setCurrentTeam] = useState<1 | 2>(1);\n  const [showPlayerDialog, setShowPlayerDialog] = useState(false);\n  const [showPlayingXIDialog, setShowPlayingXIDialog] = useState(false);\n  const [showPlayerBrowser, setShowPlayerBrowser] = useState(false);\n  const [newPlayerName, setNewPlayerName] = useState('');\n  const [newPlayerRole, setNewPlayerRole] = useState<Player['role']>('batsman');\n  const [matchOvers, setMatchOvers] = useState<number>(20);\n  const [teamSize, setTeamSize] = useState<number>(11);\n  const [savedTeams, setSavedTeams] = useState<any[]>([]);\n  const [loadingSavedTeams, setLoadingSavedTeams] = useState(false);\n  const [loadError, setLoadError] = useState<string | null>(null);\n\n  // Load saved teams from Firebase on component mount\n  const loadSavedTeams = async () => {\n    setLoadingSavedTeams(true);\n    setLoadError(null);\n    try {\n      const { getDatabaseService } = await import('@/services/databaseService');\n      const databaseService = getDatabaseService();\n      const teams = await databaseService.fetchTeams();\n      setSavedTeams(teams);\n      console.log('Loaded saved teams from Firebase:', teams.length, 'teams');\n    } catch (error) {\n      console.error('Failed to load saved teams:', error);\n      setLoadError('Failed to load teams. Please try again later.');\n      setSavedTeams([]);\n    } finally {\n      setLoadingSavedTeams(false);\n    }\n  };\n\n  useEffect(() => {\n    loadSavedTeams();\n  }, []);\n\n  const addPlayer = () => {\n    if (!newPlayerName.trim()) return;\n\n    const newPlayer: Player = {\n      id: Date.now().toString(),\n      name: newPlayerName.trim(),\n      role: newPlayerRole,\n      battingStats: {\n        status: null,\n        runs: 0,\n        ballsFaced: 0,\n        fours: 0,\n        sixes: 0,\n        strikeRate: 0,\n        isOut: false,\n        isRetiredHurt: false\n      },\n      bowlingStats: {\n        overs: 0,\n        balls: 0,\n        runs: 0,\n        wickets: 0,\n\n        economyRate: 0,\n        wides: 0,\n        noBalls: 0\n      },\n      fieldingStats: {\n        catches: 0,\n        runOuts: 0,\n        stumpings: 0\n      }\n    };\n\n    if (currentTeam === 1) {\n      setTeam1(prev => ({\n        ...prev,\n        fullRoster: [...(prev.fullRoster || []), newPlayer]\n      }));\n    } else {\n      setTeam2(prev => ({\n        ...prev,\n        fullRoster: [...(prev.fullRoster || []), newPlayer]\n      }));\n    }\n\n    setNewPlayerName('');\n    setShowPlayerDialog(false);\n  };\n\n  const removePlayer = (playerId: string, teamNum: 1 | 2) => {\n    if (teamNum === 1) {\n      setTeam1(prev => ({\n        ...prev,\n        fullRoster: prev.fullRoster?.filter(p => p.id !== playerId) || []\n      }));\n    } else {\n      setTeam2(prev => ({\n        ...prev,\n        fullRoster: prev.fullRoster?.filter(p => p.id !== playerId) || []\n      }));\n    }\n  };\n\n  const selectPlayingXI = (teamNum: 1 | 2) => {\n    setCurrentTeam(teamNum);\n    setShowPlayingXIDialog(true);\n  };\n\n  const confirmPlayingXI = (selectedPlayers: Player[]) => {\n    if (selectedPlayers.length !== teamSize) return;\n\n    if (currentTeam === 1) {\n      setTeam1(prev => ({ ...prev, playingXI: selectedPlayers }));\n    } else {\n      setTeam2(prev => ({ ...prev, playingXI: selectedPlayers }));\n    }\n    setShowPlayingXIDialog(false);\n  };\n\n  const canProceed = () => {\n    const isValidOvers = matchOvers >= 1 && matchOvers <= 200;\n    const isValidTeamSize = teamSize >= 1 && teamSize <= 200;\n    const result = team1.name && team2.name && \n                      team1.playingXI?.length === teamSize &&\n           team2.playingXI?.length === teamSize &&\n           isValidOvers && isValidTeamSize;\n    \n    console.log('canProceed check:', {\n      team1Name: team1.name,\n      team2Name: team2.name,\n      team1PlayingXI: team1.playingXI?.length,\n      team2PlayingXI: team2.playingXI?.length,\n      matchOvers: matchOvers,\n      teamSize: teamSize,\n      isValidOvers: isValidOvers,\n      isValidTeamSize: isValidTeamSize,\n      canProceed: result\n    });\n    \n    return result;\n  };\n\n  const handleProceed = () => {\n    console.log('handleProceed clicked');\n    if (canProceed()) {\n          console.log('Proceeding to match setup with', matchOvers, 'overs');\n    onTeamsReady(\n      { ...team1, id: '1' } as Team,\n      { ...team2, id: '2' } as Team,\n      matchOvers\n    );\n    } else {\n      console.log('Cannot proceed - requirements not met');\n    }\n  };\n\n  // Test Firebase functionality\n  const testFirebaseSave = async () => {\n    try {\n      console.log('Testing Firebase save...');\n      const { getDatabaseService } = await import('@/services/databaseService');\n      const databaseService = getDatabaseService();\n      \n      const testTeam = {\n        name: 'Firebase Test Team',\n        fullRoster: samplePlayers.slice(0, 11),\n        playingXI: samplePlayers.slice(0, 11)\n      };\n      \n      const savedTeam = await databaseService.saveTeam(testTeam);\n      console.log('Firebase save successful:', savedTeam);\n      alert('Firebase save test successful! Check console for details.');\n    } catch (error) {\n      console.error('Firebase save failed:', error);\n      alert('Firebase save failed. Check console for details.');\n    }\n  };\n\n  const handleLoadTeam = (team: Team, teamNumber: 1 | 2) => {\n    const loadedTeam = {\n      ...team,\n      playingXI: [], // Reset playing XI for new match\n      fullRoster: team.fullRoster?.map(player => ({\n        ...player,\n        id: `${teamNumber}-${player.id}-${Date.now()}` // Ensure unique IDs\n      })) || []\n    };\n\n    if (teamNumber === 1) {\n      setTeam1(loadedTeam);\n      toast.success(`Loaded ${team.name} as Team 1`);\n    } else {\n      setTeam2(loadedTeam);\n      toast.success(`Loaded ${team.name} as Team 2`);\n    }\n  };\n\n  const handleSelectPlayerFromBrowser = (player: Player) => {\n    if (currentTeam === 1) {\n      setTeam1(prev => ({\n        ...prev,\n        fullRoster: [...(prev.fullRoster || []), player]\n      }));\n    } else {\n      setTeam2(prev => ({\n        ...prev,\n        fullRoster: [...(prev.fullRoster || []), player]\n      }));\n    }\n  };\n\n  const openPlayerBrowser = (teamNum: 1 | 2) => {\n    setCurrentTeam(teamNum);\n    setShowPlayerBrowser(true);\n  };\n\n  const getCurrentTeamPlayerIds = () => {\n    const team = currentTeam === 1 ? team1 : team2;\n    return team.fullRoster?.map(p => p.id) || [];\n  };\n\n  // Sample players for quick setup\n  const createSamplePlayer = (id: string, name: string, role: Player['role']): Player => ({\n    id,\n    name,\n    role,\n    battingStats: {\n      status: null,\n      runs: 0,\n      ballsFaced: 0,\n      fours: 0,\n      sixes: 0,\n      strikeRate: 0,\n      isOut: false,\n      isRetiredHurt: false\n    },\n    bowlingStats: {\n      overs: 0,\n      balls: 0,\n      runs: 0,\n      wickets: 0,\n      economyRate: 0,\n      wides: 0,\n      noBalls: 0\n    },\n    fieldingStats: {\n      catches: 0,\n      runOuts: 0,\n      stumpings: 0\n    }\n  });\n\n  const samplePlayers: Player[] = [\n    createSamplePlayer('sample-1', 'Virat Kohli', 'batsman'),\n    createSamplePlayer('sample-2', 'Rohit Sharma', 'batsman'),\n    createSamplePlayer('sample-3', 'MS Dhoni', 'wicketkeeper'),\n    createSamplePlayer('sample-4', 'Jasprit Bumrah', 'bowler'),\n    createSamplePlayer('sample-5', 'Ravindra Jadeja', 'allrounder'),\n    createSamplePlayer('sample-6', 'KL Rahul', 'batsman'),\n    createSamplePlayer('sample-7', 'Hardik Pandya', 'allrounder'),\n    createSamplePlayer('sample-8', 'Mohammed Shami', 'bowler'),\n    createSamplePlayer('sample-9', 'Yuzvendra Chahal', 'bowler'),\n    createSamplePlayer('sample-10', 'Shikhar Dhawan', 'batsman'),\n    createSamplePlayer('sample-11', 'Rishabh Pant', 'wicketkeeper'),\n    createSamplePlayer('sample-12', 'Bhuvneshwar Kumar', 'bowler'),\n    createSamplePlayer('sample-13', 'Suryakumar Yadav', 'batsman'),\n    createSamplePlayer('sample-14', 'Washington Sundar', 'allrounder'),\n    createSamplePlayer('sample-15', 'Ishan Kishan', 'wicketkeeper')\n  ];\n\n  const addSamplePlayers = (teamNum: 1 | 2) => {\n    const team = teamNum === 1 ? team1 : team2;\n    const currentRoster = team.fullRoster || [];\n    const playersNeeded = teamSize - currentRoster.length;\n    \n    if (playersNeeded <= 0) return;\n\n    // Get existing player names to avoid duplicates\n    const existingNames = currentRoster.map(p => p.name.toLowerCase());\n    \n    // Filter available sample players\n    const availablePlayers = samplePlayers.filter(p => \n      !existingNames.includes(p.name.toLowerCase())\n    );\n    \n    // Add the needed number of players\n    const playersToAdd = availablePlayers.slice(0, playersNeeded).map(p => ({\n      ...p,\n      id: `${teamNum}-${p.id}-${Date.now()}`\n    }));\n\n    if (teamNum === 1) {\n      setTeam1(prev => ({\n        ...prev,\n        fullRoster: [...currentRoster, ...playersToAdd]\n      }));\n    } else {\n      setTeam2(prev => ({\n        ...prev,\n        fullRoster: [...currentRoster, ...playersToAdd]\n      }));\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 sm:space-y-8 p-4 sm:p-6 lg:p-0\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h2 className=\"text-2xl sm:text-3xl font-bold text-gradient-aurora mb-3 sm:mb-4\">\n          Team Setup\n        </h2>\n        <div className=\"readable-text inline-block\">\n          <p className=\"text-foreground text-sm sm:text-base\">\n            Configure your teams and select playing XI for the cosmic cricket battle\n          </p>\n        </div>\n      </motion.div>\n\n      {/* Match Setup Status */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center space-y-4\"\n      >\n        {/* Progress Indicators */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 max-w-2xl mx-auto\">\n          <div className={`p-4 glass-card border-glass-border/20 rounded-lg ${\n            team1.name && team1.playingXI?.length === teamSize \n              ? 'border-green-500/30 bg-green-500/10' \n              : 'border-glass-border/20'\n          }`}>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Team 1</span>\n              <div className=\"flex items-center space-x-2\">\n                {team1.name && (\n                  <span className=\"text-xs bg-blue-500/20 text-blue-400 px-2 py-1 rounded\">\n                    Named\n                  </span>\n                )}\n                {team1.playingXI?.length === teamSize && (\n                  <span className=\"text-xs bg-green-500/20 text-green-400 px-2 py-1 rounded\">\n                    Playing XI ‚úì\n                  </span>\n                )}\n              </div>\n            </div>\n            <div className=\"text-sm text-muted-foreground mt-1\">\n              {team1.name || 'No name'} ‚Ä¢ {team1.fullRoster?.length || 0} players ‚Ä¢ \n                              {team1.playingXI?.length || 0}/{teamSize} Playing XI\n            </div>\n          </div>\n\n          <div className={`p-4 glass-card border-glass-border/20 rounded-lg ${\n            team2.name && team2.playingXI?.length === teamSize \n              ? 'border-green-500/30 bg-green-500/10' \n              : 'border-glass-border/10'\n          }`}>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Team 2</span>\n              <div className=\"flex items-center space-x-2\">\n                {team2.name && (\n                  <span className=\"text-xs bg-blue-500/20 text-blue-400 px-2 py-1 rounded\">\n                    Named\n                  </span>\n                )}\n                {team2.playingXI?.length === teamSize && (\n                  <span className=\"text-xs bg-green-500/20 text-green-400 px-2 py-1 rounded\">\n                    Playing XI ‚úì\n                  </span>\n                )}\n              </div>\n            </div>\n            <div className=\"text-sm text-muted-foreground mt-1\">\n              {team2.name || 'No name'} ‚Ä¢ {team2.fullRoster?.length || 0} players ‚Ä¢ \n                              {team2.playingXI?.length || 0}/{teamSize} Playing XI\n            </div>\n          </div>\n        </div>\n\n        {/* Match Configuration */}\n        <div className=\"space-y-3 sm:space-y-4 max-w-md mx-auto\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"match-overs\" className=\"text-center block text-sm sm:text-base\">\n              Match Format (Overs per Innings)\n            </Label>\n            <div className=\"grid grid-cols-2 sm:flex sm:items-center gap-2 sm:space-x-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setMatchOvers(5)}\n                className={`min-h-[44px] text-xs sm:text-sm ${matchOvers === 5 ? 'bg-primary/20 border-primary' : ''}`}\n              >\n                T5\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setMatchOvers(10)}\n                className={`min-h-[44px] text-xs sm:text-sm ${matchOvers === 10 ? 'bg-primary/20 border-primary' : ''}`}\n              >\n                T10\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setMatchOvers(20)}\n                className={`min-h-[44px] text-xs sm:text-sm ${matchOvers === 20 ? 'bg-primary/20 border-primary' : ''}`}\n              >\n                T20\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setMatchOvers(50)}\n                className={`min-h-[44px] text-xs sm:text-sm ${matchOvers === 50 ? 'bg-primary/20 border-primary' : ''}`}\n              >\n                ODI\n              </Button>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                id=\"match-overs\"\n                type=\"number\"\n                min=\"1\"\n                max=\"200\"\n                value={matchOvers === 0 ? '' : matchOvers}\n                onChange={(e) => {\n                  const value = e.target.value;\n                  if (value === '') {\n                    setMatchOvers(0); // Allow empty state\n                  } else {\n                    const numValue = parseInt(value);\n                    if (!isNaN(numValue) && numValue >= 1 && numValue <= 200) {\n                      setMatchOvers(numValue);\n                    }\n                  }\n                }}\n                onKeyPress={(e) => {\n                  // Only allow numbers\n                  if (!/[0-9]/.test(e.key) && e.key !== 'Backspace' && e.key !== 'Delete' && e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') {\n                    e.preventDefault();\n                  }\n                }}\n                className=\"glass-card border-glass-border/20 text-center\"\n                placeholder=\"Enter overs (1-200)\"\n              />\n              <span className=\"text-sm text-muted-foreground\">overs</span>\n            </div>\n          </div>\n\n          {/* Team Size Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"team-size\" className=\"text-center block\">\n              Team Size (Players per Team)\n            </Label>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setTeamSize(5)}\n                className={teamSize === 5 ? 'bg-primary/20 border-primary' : ''}\n              >\n                5 Players\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setTeamSize(7)}\n                className={teamSize === 7 ? 'bg-primary/20 border-primary' : ''}\n              >\n                7 Players\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setTeamSize(11)}\n                className={teamSize === 11 ? 'bg-primary/20 border-primary' : ''}\n              >\n                11 Players\n              </Button>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                id=\"team-size\"\n                type=\"number\"\n                min=\"1\"\n                max=\"200\"\n                value={teamSize === 0 ? '' : teamSize}\n                onChange={(e) => {\n                  const value = e.target.value;\n                  if (value === '') {\n                    setTeamSize(0); // Allow empty state\n                  } else {\n                    const numValue = parseInt(value);\n                    if (!isNaN(numValue) && numValue >= 1 && numValue <= 200) {\n                      setTeamSize(numValue);\n                    }\n                  }\n                }}\n                onKeyPress={(e) => {\n                  // Only allow numbers\n                  if (!/[0-9]/.test(e.key) && e.key !== 'Backspace' && e.key !== 'Delete' && e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') {\n                    e.preventDefault();\n                  }\n                }}\n                className=\"glass-card border-glass-border/20 text-center\"\n                placeholder=\"Enter team size (1-200)\"\n              />\n              <span className=\"text-sm text-muted-foreground\">players</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Proceed Button */}\n        <div className=\"flex flex-col space-y-3\">\n          <Button\n            onClick={handleProceed}\n            disabled={!canProceed()}\n            variant=\"cosmic\"\n            size=\"lg\"\n            className=\"px-8 py-3\"\n          >\n            Start {matchOvers}-Over Match\n          </Button>\n          \n          {/* Firebase Test Button */}\n          <Button\n            onClick={testFirebaseSave}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"text-xs\"\n          >\n            üî• Test Firebase Save\n          </Button>\n        </div>\n        \n        {!canProceed() && (\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-muted-foreground\">\n              Complete the following to start the match:\n            </p>\n            <div className=\"text-xs text-muted-foreground space-y-1\">\n              {!team1.name && <div>‚Ä¢ Team 1 needs a name</div>}\n              {team1.playingXI?.length !== teamSize && <div>‚Ä¢ Team 1 needs Playing XI ({teamSize} players)</div>}\n              {!team2.name && <div>‚Ä¢ Team 2 needs a name</div>}\n              {team2.playingXI?.length !== teamSize && <div>‚Ä¢ Team 2 needs Playing XI ({teamSize} players)</div>}\n            </div>\n          </div>\n        )}\n      </motion.div>\n\n      {/* Saved Teams from Firebase */}\n      {savedTeams.length > 0 && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"space-y-4\"\n        >\n          <h3 className=\"text-xl font-semibold text-gradient-primary text-center\">\n            üî• Saved Teams from Firebase ({savedTeams.length})\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-w-4xl mx-auto\">\n            {savedTeams.slice(0, 6).map((team) => (\n              <div\n                key={team.id}\n                className=\"p-3 glass-card border-glass-border/20 rounded-lg hover:border-primary/30 transition-all\"\n              >\n                <div className=\"space-y-2\">\n                  <div className=\"font-medium text-sm\">{team.name}</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {team.fullRoster?.length || 0} players\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setTeam1({\n                          name: team.name,\n                          fullRoster: team.fullRoster || [],\n                          playingXI: team.playingXI || []\n                        });\n                      }}\n                      className=\"text-xs flex-1\"\n                    >\n                      Load as Team 1\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setTeam2({\n                          name: team.name,\n                          fullRoster: team.fullRoster || [],\n                          playingXI: team.playingXI || []\n                        });\n                      }}\n                      className=\"text-xs flex-1\"\n                    >\n                      Load as Team 2\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          {savedTeams.length > 6 && (\n            <p className=\"text-center text-xs text-muted-foreground\">\n              Showing 6 of {savedTeams.length} saved teams\n            </p>\n          )}\n        </motion.div>\n      )}\n\n      {/* Loading and Error States */}\n      {(loadingSavedTeams || loadError) && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"text-center space-y-2\"\n        >\n          {loadingSavedTeams && (\n            <>\n              <div className=\"text-sm text-muted-foreground\">Loading saved teams from Firebase...</div>\n              <div className=\"w-8 h-8 border-2 border-primary/30 border-t-primary rounded-full animate-spin mx-auto\"></div>\n            </>\n          )}\n          {loadError && (\n            <div className=\"text-sm text-destructive bg-destructive/10 p-3 rounded-lg\">\n              {loadError}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  setLoadError(null);\n                  loadSavedTeams();\n                }}\n                className=\"ml-2\"\n              >\n                Try Again\n              </Button>\n            </div>\n          )}\n        </motion.div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8\">\n        {/* Team 1 */}\n        <GlassCard className=\"p-4 sm:p-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-4 gap-3 sm:gap-0\">\n            <h3 className=\"text-lg sm:text-xl font-semibold text-gradient-primary\">Team 1</h3>\n            <div className=\"flex flex-col sm:flex-row gap-2 sm:space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => openPlayerBrowser(1)}\n                className=\"min-h-[44px] text-xs sm:text-sm justify-start sm:justify-center\"\n              >\n                <Search className=\"h-4 w-4 mr-2\" />\n                Browse Players\n              </Button>\n              <Button\n                variant=\"cosmic\"\n                size=\"sm\"\n                onClick={() => {\n                  setCurrentTeam(1);\n                  setShowPlayerDialog(true);\n                }}\n                className=\"min-h-[44px] text-xs sm:text-sm justify-start sm:justify-center\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Player\n              </Button>\n            </div>\n          </div>\n\n          {/* Team 1 Management */}\n          <TeamManager\n            currentTeam={team1}\n            onLoadTeam={(team) => handleLoadTeam(team, 1)}\n            teamNumber={1}\n            teamSize={teamSize}\n          />\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"team1-name\">Team Name</Label>\n              <Input\n                id=\"team1-name\"\n                value={team1.name || ''}\n                onChange={(e) => setTeam1(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"Enter team name\"\n                className=\"glass-card border-glass-border/20\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <Label>\n                  Squad ({team1.fullRoster?.length || 0} players)\n                  {(team1.fullRoster?.length || 0) < teamSize && (\n                    <span className=\"text-xs text-muted-foreground ml-2\">\n                      (Need {teamSize - (team1.fullRoster?.length || 0)} more for Playing XI)\n                    </span>\n                  )}\n                </Label>\n                <div className=\"flex space-x-2\">\n                  {(team1.fullRoster?.length || 0) >= teamSize ? (\n                    <Button\n                      variant=\"score\"\n                      size=\"sm\"\n                      onClick={() => selectPlayingXI(1)}\n                    >\n                      <Users className=\"h-4 w-4 mr-2\" />\n                      {team1.playingXI?.length === teamSize ? 'Edit Playing XI' : 'Select Playing XI'}\n                    </Button>\n                  ) : (\n                    <>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        disabled\n                        className=\"opacity-50\"\n                      >\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        Need {teamSize - (team1.fullRoster?.length || 0)} more players\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => addSamplePlayers(1)}\n                        className=\"text-xs\"\n                      >\n                        <Zap className=\"h-3 w-3 mr-1\" />\n                        Quick Add {teamSize - (team1.fullRoster?.length || 0)}\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                {team1.fullRoster?.map((player) => (\n                  <div\n                    key={player.id}\n                    className=\"flex items-center justify-between p-2 glass-card border-glass-border/10\"\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"font-medium\">{player.name}</span>\n                      <span className=\"text-xs text-muted-foreground capitalize\">\n                        {player.role}\n                      </span>\n                      {team1.playingXI?.some(p => p.id === player.id) && (\n                        <Crown className=\"h-3 w-3 text-accent\" />\n                      )}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removePlayer(player.id, 1)}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n\n              {team1.playingXI?.length === teamSize && (\n                <div className=\"mt-2 p-2 bg-accent/20 rounded text-accent text-sm\">\n                  ‚úì Playing XI selected ({team1.playingXI.length}/{teamSize})\n                </div>\n              )}\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Team 2 */}\n        <GlassCard className=\"p-4 sm:p-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-4 gap-3 sm:gap-0\">\n            <h3 className=\"text-lg sm:text-xl font-semibold text-gradient-primary\">Team 2</h3>\n            <div className=\"flex flex-col sm:flex-row gap-2 sm:space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => openPlayerBrowser(2)}\n                className=\"min-h-[44px] text-xs sm:text-sm justify-start sm:justify-center\"\n              >\n                <Search className=\"h-4 w-4 mr-2\" />\n                Browse Players\n              </Button>\n              <Button\n                variant=\"cosmic\"\n                size=\"sm\"\n                onClick={() => {\n                  setCurrentTeam(2);\n                  setShowPlayerDialog(true);\n                }}\n                className=\"min-h-[44px] text-xs sm:text-sm justify-start sm:justify-center\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Player\n              </Button>\n            </div>\n          </div>\n\n          {/* Team 2 Management */}\n          <TeamManager\n            currentTeam={team2}\n            onLoadTeam={(team) => handleLoadTeam(team, 2)}\n            teamNumber={2}\n            teamSize={teamSize}\n          />\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"team2-name\">Team Name</Label>\n              <Input\n                id=\"team2-name\"\n                value={team2.name || ''}\n                onChange={(e) => setTeam2(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"Enter team name\"\n                className=\"glass-card border-glass-border/20\"\n              />\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <Label>\n                  Squad ({team2.fullRoster?.length || 0} players)\n                  {(team2.fullRoster?.length || 0) < teamSize && (\n                    <span className=\"text-xs text-muted-foreground ml-2\">\n                      (Need {teamSize - (team2.fullRoster?.length || 0)} more for Playing XI)\n                    </span>\n                  )}\n                </Label>\n                <div className=\"flex space-x-2\">\n                  {(team2.fullRoster?.length || 0) >= teamSize ? (\n                    <Button\n                      variant=\"score\"\n                      size=\"sm\"\n                      onClick={() => {\n                        console.log('Team 2 Select Playing XI clicked', { \n                          team2RosterLength: team2.fullRoster?.length,\n                          team2PlayingXI: team2.playingXI?.length \n                        });\n                        selectPlayingXI(2);\n                      }}\n                    >\n                      <Users className=\"h-4 w-4 mr-2\" />\n                      {team2.playingXI?.length === teamSize ? 'Edit Playing XI' : 'Select Playing XI'}\n                    </Button>\n                  ) : (\n                    <>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        disabled\n                        className=\"opacity-50\"\n                      >\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        Need {teamSize - (team2.fullRoster?.length || 0)} more players\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          console.log('Team 2 Quick Add clicked', { \n                            currentRoster: team2.fullRoster?.length || 0,\n                            playersNeeded: teamSize - (team2.fullRoster?.length || 0)\n                          });\n                          addSamplePlayers(2);\n                        }}\n                        className=\"text-xs\"\n                      >\n                        <Zap className=\"h-3 w-3 mr-1\" />\n                        Quick Add {teamSize - (team2.fullRoster?.length || 0)}\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                {team2.fullRoster?.map((player) => (\n                  <div\n                    key={player.id}\n                    className=\"flex items-center justify-between p-2 glass-card border-glass-border/10\"\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"font-medium\">{player.name}</span>\n                      <span className=\"text-xs text-muted-foreground capitalize\">\n                        {player.role}\n                      </span>\n                      {team2.playingXI?.some(p => p.id === player.id) && (\n                        <Crown className=\"h-3 w-3 text-accent\" />\n                      )}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removePlayer(player.id, 2)}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n\n              {team2.playingXI?.length === teamSize && (\n                <div className=\"mt-2 p-2 bg-accent/20 rounded text-accent text-sm\">\n                  ‚úì Playing XI selected ({team2.playingXI.length}/{teamSize})\n                </div>\n              )}\n            </div>\n          </div>\n        </GlassCard>\n      </div>\n\n      {/* Proceed Button */}\n      <div className=\"text-center\">\n        <Button\n          variant=\"cosmic\"\n          size=\"lg\"\n          onClick={handleProceed}\n          disabled={!canProceed()}\n          className=\"w-full sm:w-auto px-8 sm:px-12 min-h-[52px]\"\n        >\n          <Shield className=\"h-5 w-5 mr-2\" />\n          Proceed to Toss\n        </Button>\n      </div>\n\n      {/* Add Player Dialog */}\n      <Dialog open={showPlayerDialog} onOpenChange={setShowPlayerDialog}>\n        <DialogContent className=\"glass-card border-glass-border/30\">\n          <DialogHeader>\n            <DialogTitle className=\"text-gradient-primary\">Add New Player</DialogTitle>\n            <DialogDescription>\n              Add a new player to the team roster with their role and details.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"player-name\">Player Name</Label>\n              <Input\n                id=\"player-name\"\n                value={newPlayerName}\n                onChange={(e) => setNewPlayerName(e.target.value)}\n                placeholder=\"Enter player name\"\n                className=\"glass-card border-glass-border/20\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"player-role\">Role</Label>\n              <select\n                id=\"player-role\"\n                value={newPlayerRole}\n                onChange={(e) => setNewPlayerRole(e.target.value as Player['role'])}\n                className=\"w-full p-2 glass-card border-glass-border/20 rounded-md bg-background text-foreground\"\n              >\n                <option value=\"batsman\">Batsman</option>\n                <option value=\"bowler\">Bowler</option>\n                <option value=\"allrounder\">All-rounder</option>\n                <option value=\"wicketkeeper\">Wicket Keeper</option>\n              </select>\n            </div>\n            <Button onClick={addPlayer} variant=\"cosmic\" className=\"w-full\">\n              Add Player\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Playing XI Selection Dialog */}\n      <PlayingXIDialog\n        open={showPlayingXIDialog}\n        onClose={() => setShowPlayingXIDialog(false)}\n        team={currentTeam === 1 ? team1 : team2}\n        onConfirm={confirmPlayingXI}\n        teamSize={teamSize}\n      />\n\n      {/* Player Browser Dialog */}\n      <PlayerBrowser\n        open={showPlayerBrowser}\n        onClose={() => setShowPlayerBrowser(false)}\n        onSelectPlayer={handleSelectPlayerFromBrowser}\n        excludePlayerIds={getCurrentTeamPlayerIds()}\n      />\n    </div>\n  );\n}\n\ninterface PlayingXIDialogProps {\n  open: boolean;\n  onClose: () => void;\n  team: Partial<Team>;\n  onConfirm: (players: Player[]) => void;\n  teamSize: number;\n}\n\nfunction PlayingXIDialog({ open, onClose, team, onConfirm, teamSize }: PlayingXIDialogProps) {\n  const [selectedPlayers, setSelectedPlayers] = useState<Player[]>([]);\n\n  // Reset selected players when dialog opens or team changes\n  useEffect(() => {\n    if (open) {\n      setSelectedPlayers(team.playingXI || []);\n    }\n  }, [open, team.playingXI]);\n\n  const togglePlayer = (player: Player) => {\n    console.log('Toggle player clicked:', player.name);\n    setSelectedPlayers(prev => {\n      const isSelected = prev.some(p => p.id === player.id);\n      console.log('Player selected state:', isSelected, 'Current selection:', prev.length);\n      \n      if (isSelected) {\n        const newSelection = prev.filter(p => p.id !== player.id);\n        console.log('Deselecting player, new count:', newSelection.length);\n        return newSelection;\n      } else if (prev.length < teamSize) {\n        const newSelection = [...prev, player];\n        console.log('Selecting player, new count:', newSelection.length);\n        return newSelection;\n      }\n      console.log('Cannot select more players, already at limit');\n      return prev;\n    });\n  };\n\n  const handleConfirm = () => {\n    if (selectedPlayers.length === teamSize) {\n      onConfirm(selectedPlayers);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"glass-card border-glass-border/30 max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-gradient-primary\">\n            Select Playing XI for {team.name}\n          </DialogTitle>\n          <DialogDescription>\n                            Choose exactly {teamSize} players from the squad to form the playing XI for this match.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            Selected: {selectedPlayers.length}/{teamSize} players\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-2 max-h-96 overflow-y-auto\">\n            {team.fullRoster?.map((player) => {\n              const isSelected = selectedPlayers.some(p => p.id === player.id);\n              return (\n                <button\n                  key={player.id}\n                  onClick={() => togglePlayer(player)}\n                  className={`p-3 rounded-lg border transition-all ${\n                    isSelected\n                      ? 'bg-primary/20 border-primary text-primary'\n                      : 'glass-card border-glass-border/20 hover:border-glass-border/40'\n                  }`}\n                >\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">{player.name}</div>\n                    <div className=\"text-xs opacity-70 capitalize\">{player.role}</div>\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n\n          <Button\n            onClick={handleConfirm}\n            variant=\"cosmic\"\n            className=\"w-full\"\n                          disabled={selectedPlayers.length !== teamSize}\n          >\n                            Confirm Playing XI ({selectedPlayers.length}/{teamSize})\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":40349},"src/components/TossSetup.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport GlassCard from './GlassCard';\nimport { Team } from '@/types/cricket';\nimport { Coins, Target, Shield } from 'lucide-react';\n\ninterface TossSetupProps {\n  team1: Team;\n  team2: Team;\n  onTossComplete: (tossWinner: string, decision: 'bat' | 'bowl') => void;\n}\n\nexport default function TossSetup({ team1, team2, onTossComplete }: TossSetupProps) {\n  const [tossWinner, setTossWinner] = useState<string | null>(null);\n  const [showDecision, setShowDecision] = useState(false);\n\n  const selectTossWinner = (winner: string) => {\n    setTossWinner(winner);\n    setShowDecision(true);\n  };\n\n  const makeDecision = (decision: 'bat' | 'bowl') => {\n    if (tossWinner) {\n      onTossComplete(tossWinner, decision);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 sm:space-y-8 p-4 sm:p-0\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h2 className=\"text-2xl sm:text-3xl font-bold text-gradient-aurora mb-3 sm:mb-4\">\n          Toss Time\n        </h2>\n        <div className=\"readable-text inline-block\">\n          <p className=\"text-foreground text-sm sm:text-base\">\n            The cosmic coin decides the fate of the match\n          </p>\n        </div>\n      </motion.div>\n\n      <div className=\"max-w-2xl mx-auto\">\n        <GlassCard glow className=\"p-4 sm:p-6 lg:p-8\">\n          {!tossWinner ? (\n            <div className=\"text-center space-y-4 sm:space-y-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-8\">\n                <div className=\"text-center p-3 sm:p-0\">\n                  <h3 className=\"text-lg sm:text-xl font-semibold text-gradient-primary mb-1 sm:mb-2\">\n                    {team1.name}\n                  </h3>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground\">\n                    {team1.playingXI.length} players selected\n                  </div>\n                </div>\n                <div className=\"text-center p-3 sm:p-0\">\n                  <h3 className=\"text-lg sm:text-xl font-semibold text-gradient-primary mb-1 sm:mb-2\">\n                    {team2.name}\n                  </h3>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground\">\n                    {team2.playingXI.length} players selected\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3 sm:space-y-4\">\n                <div className=\"text-base sm:text-lg font-semibold text-gradient-aurora\">\n                  Who won the toss?\n                </div>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-6\">\n                  <Button\n                    variant=\"cosmic\"\n                    size=\"lg\"\n                    onClick={() => selectTossWinner(team1.name)}\n                    className=\"min-h-[60px] sm:py-8 flex-col space-y-1 sm:space-y-2 w-full\"\n                  >\n                    <Coins className=\"h-6 w-6 sm:h-8 sm:w-8\" />\n                    <span className=\"text-sm sm:text-lg font-medium\">{team1.name}</span>\n                  </Button>\n\n                  <Button\n                    variant=\"cosmic\"\n                    size=\"lg\"\n                    onClick={() => selectTossWinner(team2.name)}\n                    className=\"min-h-[60px] sm:py-8 flex-col space-y-1 sm:space-y-2 w-full\"\n                  >\n                    <Coins className=\"h-6 w-6 sm:h-8 sm:w-8\" />\n                    <span className=\"text-sm sm:text-lg font-medium\">{team2.name}</span>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : !showDecision ? (\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              className=\"text-center space-y-4\"\n            >\n              <div className=\"text-2xl font-bold text-gradient-aurora\">\n                ü™ô Toss Result ü™ô\n              </div>\n              <div className=\"text-xl\">\n                <span className=\"text-gradient-primary font-semibold\">\n                  {tossWinner}\n                </span>{' '}\n                wins the toss!\n              </div>\n            </motion.div>\n          ) : (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"text-center space-y-4 sm:space-y-6\"\n            >\n              <div className=\"text-lg sm:text-xl\">\n                <span className=\"text-gradient-primary font-semibold\">\n                  {tossWinner}\n                </span>{' '}\n                won the toss. What's your decision?\n              </div>\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6\">\n                <Button\n                  variant=\"boundary\"\n                  size=\"lg\"\n                  onClick={() => makeDecision('bat')}\n                  className=\"min-h-[80px] sm:py-8 flex-col space-y-1 sm:space-y-2 w-full\"\n                >\n                  <Target className=\"h-6 w-6 sm:h-8 sm:w-8\" />\n                  <span className=\"text-base sm:text-lg font-medium\">Bat First</span>\n                  <span className=\"text-xs sm:text-sm opacity-70\">Set the target</span>\n                </Button>\n\n                <Button\n                  variant=\"six\"\n                  size=\"lg\"\n                  onClick={() => makeDecision('bowl')}\n                  className=\"min-h-[80px] sm:py-8 flex-col space-y-1 sm:space-y-2 w-full\"\n                >\n                  <Shield className=\"h-6 w-6 sm:h-8 sm:w-8\" />\n                  <span className=\"text-base sm:text-lg font-medium\">Bowl First</span>\n                  <span className=\"text-xs sm:text-sm opacity-70\">Restrict the runs</span>\n                </Button>\n              </div>\n            </motion.div>\n          )}\n        </GlassCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6002},"src/config/firebase.ts":{"content":"// Firebase Configuration for Cricket Scoring App\n// \n// To enable Firebase integration:\n// 1. Create a Firebase project at https://console.firebase.google.com/\n// 2. Enable Firestore Database\n// 3. Get your project configuration\n// 4. Update the config below with your Firebase credentials\n// 5. Call configureDatabaseService() in your app initialization\n\nimport { configureDatabaseService } from '@/services/databaseService';\n\n// Firebase configuration interface\nexport interface FirebaseConfig {\n  projectId: string;\n  apiKey: string;\n  authDomain?: string;\n  storageBucket?: string;\n  messagingSenderId?: string;\n  appId?: string;\n}\n\n// Your actual Firebase configuration\nconst firebaseConfig: FirebaseConfig = {\n  projectId: 'cricscore-a97a7',\n  apiKey: 'AIzaSyChoE4GF_jjpeoiUVF68pyIlog1OoyyBdk',\n  authDomain: 'cricscore-a97a7.firebaseapp.com',\n  storageBucket: 'cricscore-a97a7.firebasestorage.app',\n  messagingSenderId: '864459233449',\n  appId: '1:864459233449:web:0a9ba89e1c05c4f42b31b8'\n};\n\n// Initialize Firebase database service\nexport const initializeFirebaseDatabase = () => {\n  try {\n    // Validate Firebase configuration\n    if (!firebaseConfig.projectId || !firebaseConfig.apiKey) {\n      throw new Error('Invalid Firebase configuration. projectId and apiKey are required.');\n    }\n\n    // Initialize database service with Firebase config\n    configureDatabaseService({\n      type: 'firebase',\n      projectId: firebaseConfig.projectId,\n      apiKey: firebaseConfig.apiKey\n    });\n\n    console.log('Firebase database initialized successfully');\n    return true;\n  } catch (error) {\n    console.error('Failed to initialize Firebase:', error);\n    return false;\n  }\n};\n\n// Export configuration for manual setup\nexport { firebaseConfig };\n","size_bytes":1754},"src/constants/cricket.ts":{"content":"// Cricket Constants - Eliminates magic numbers throughout the application\n\nexport const CRICKET_CONSTANTS = {\n  // Basic cricket rules\n  BALLS_PER_OVER: 6,\n  BOUNDARY_FOUR: 4,\n  BOUNDARY_SIX: 6,\n  MAX_WICKETS_STANDARD: 10,\n  \n  // Match formats\n  T20_OVERS: 20,\n  ODI_OVERS: 50,\n  TEST_OVERS: 90, // Per day\n  \n  // Powerplay overs\n  T20_POWERPLAY_OVERS: 6,\n  ODI_POWERPLAY_OVERS: 10,\n  \n  // Scoring limits\n  MAX_RUNS_PER_BALL: 6,\n  MAX_EXTRAS_PER_BALL: 5,\n  \n  // UI Constants\n  ANIMATION_DURATION: 1000,\n  BOUNDARY_ANIMATION_DURATION: 2000,\n  TOAST_DURATION: 4000,\n  \n  // Validation limits\n  MIN_TEAM_SIZE: 11,\n  MAX_TEAM_SIZE: 15,\n  MIN_OVERS: 1,\n  MAX_OVERS: 50,\n  \n  // Strike rates\n  EXCELLENT_STRIKE_RATE: 150,\n  GOOD_STRIKE_RATE: 120,\n  AVERAGE_STRIKE_RATE: 100,\n  \n  // Economy rates\n  EXCELLENT_ECONOMY: 6.0,\n  GOOD_ECONOMY: 7.0,\n  AVERAGE_ECONOMY: 8.0,\n} as const;\n\nexport const DISMISSAL_TYPES = {\n  BOWLED: 'bowled',\n  CAUGHT: 'caught',\n  LBW: 'lbw',\n  RUN_OUT: 'runOut',\n  STUMPED: 'stumped',\n  HIT_WICKET: 'hitWicket',\n  OBSTRUCTING_FIELD: 'obstructingField',\n  HANDLED_BALL: 'handledBall',\n  TIMED_OUT: 'timedOut',\n  RETIRED_HURT: 'retiredHurt',\n} as const;\n\nexport const EXTRA_TYPES = {\n  WIDE: 'wide',\n  NO_BALL: 'noball',\n  BYE: 'bye',\n  LEG_BYE: 'legbye',\n  PENALTY: 'penalty',\n  NO_BALL_BYE: 'noball-bye',\n  NO_BALL_LEG_BYE: 'noball-legbye',\n} as const;\n\nexport const PLAYER_ROLES = {\n  BATSMAN: 'batsman',\n  BOWLER: 'bowler',\n  ALL_ROUNDER: 'allrounder',\n  WICKET_KEEPER: 'wicketkeeper',\n} as const;\n\nexport const MATCH_PHASES = {\n  POWERPLAY: 'powerplay',\n  MIDDLE: 'middle',\n  DEATH: 'death',\n} as const;\n\n// Helper functions for common cricket calculations\nexport const cricketUtils = {\n  // Calculate strike rate\n  calculateStrikeRate: (runs: number, ballsFaced: number): number => {\n    return ballsFaced > 0 ? (runs / ballsFaced) * 100 : 0;\n  },\n\n  // Calculate economy rate\n  calculateEconomyRate: (runs: number, overs: number, balls: number): number => {\n    const totalOvers = overs + (balls / CRICKET_CONSTANTS.BALLS_PER_OVER);\n    return totalOvers > 0 ? runs / totalOvers : 0;\n  },\n\n  // Calculate run rate\n  calculateRunRate: (runs: number, overs: number, balls: number): number => {\n    const totalOvers = overs + (balls / CRICKET_CONSTANTS.BALLS_PER_OVER);\n    return totalOvers > 0 ? runs / totalOvers : 0;\n  },\n\n  // Calculate required run rate\n  calculateRequiredRunRate: (target: number, currentScore: number, oversLeft: number, ballsLeft: number): number => {\n    const runsRequired = target - currentScore;\n    const oversRemaining = oversLeft + (ballsLeft / CRICKET_CONSTANTS.BALLS_PER_OVER);\n    return oversRemaining > 0 ? runsRequired / oversRemaining : 0;\n  },\n\n  // Format overs display\n  formatOvers: (overs: number, balls: number): string => {\n    return `${overs}.${balls}`;\n  },\n\n  // Get match phase based on overs\n  getMatchPhase: (overs: number, totalOvers: number): string => {\n    const overPercentage = (overs / totalOvers) * 100;\n    \n    if (overPercentage <= 30) return MATCH_PHASES.POWERPLAY;\n    if (overPercentage <= 80) return MATCH_PHASES.MIDDLE;\n    return MATCH_PHASES.DEATH;\n  },\n\n  // Validate scoring action\n  isValidScoringAction: (runs: number, isExtra: boolean): boolean => {\n    if (isExtra) {\n      return runs >= 1 && runs <= CRICKET_CONSTANTS.MAX_EXTRAS_PER_BALL;\n    }\n    return runs >= 0 && runs <= CRICKET_CONSTANTS.MAX_RUNS_PER_BALL;\n  },\n\n  // Get maximum wickets for team size\n  getMaxWickets: (teamSize: number): number => {\n    return Math.max(1, teamSize - 1);\n  },\n\n  // Check if powerplay is active\n  isPowerplayActive: (overs: number, matchFormat: string): boolean => {\n    const powerplayOvers = matchFormat === 'T20' \n      ? CRICKET_CONSTANTS.T20_POWERPLAY_OVERS \n      : CRICKET_CONSTANTS.ODI_POWERPLAY_OVERS;\n    \n    return overs < powerplayOvers;\n  },\n\n  // Calculate match result\n  calculateMatchResult: (match: any): { winner: string; result: string } => {\n    const firstInningsScore = match.innings.first?.score || 0;\n    const secondInningsScore = match.innings.second?.score || 0;\n    \n    // Determine which team batted first and second based on toss\n    const firstBattingTeam = match.battingFirst === match.team1.name ? match.team1.name : match.team2.name;\n    const secondBattingTeam = match.battingFirst === match.team1.name ? match.team2.name : match.team1.name;\n    \n    if (secondInningsScore > firstInningsScore) {\n      // Chasing team (batting second) won\n      const wicketsLeft = (match.battingFirst === match.team1.name ? match.team2.playingXI.length : match.team1.playingXI.length) - (match.innings.second?.wickets || 0);\n      return {\n        winner: secondBattingTeam,\n        result: `${secondBattingTeam} won by ${wicketsLeft} wickets`\n      };\n    } else if (firstInningsScore > secondInningsScore) {\n      // First batting team won\n      const runMargin = firstInningsScore - secondInningsScore;\n      return {\n        winner: firstBattingTeam,\n        result: `${firstBattingTeam} won by ${runMargin} runs`\n      };\n    } else {\n      return {\n        winner: 'Tie',\n        result: 'Match Tied'\n      };\n    }\n  },\n\n  // Generate ball commentary\n  generateBallCommentary: (runs: number, isExtra: boolean, extraType?: string): string => {\n    if (isExtra) {\n      switch (extraType) {\n        case EXTRA_TYPES.WIDE:\n          return runs > 1 ? `WIDE! ${runs - 1} runs added.` : 'WIDE! Down the leg side.';\n        case EXTRA_TYPES.NO_BALL:\n          return runs > 1 ? `NO BALL! ${runs - 1} runs off the free hit.` : 'NO BALL! Free hit coming up!';\n        case EXTRA_TYPES.BYE:\n          return `${runs} BYE${runs > 1 ? 'S' : ''}! Sneaks past the keeper.`;\n        case EXTRA_TYPES.LEG_BYE:\n          return `${runs} LEG BYE${runs > 1 ? 'S' : ''}! Off the pads.`;\n        default:\n          return `${runs} extra${runs > 1 ? 's' : ''}.`;\n      }\n    }\n\n    switch (runs) {\n      case 0:\n        return Math.random() > 0.5 ? 'Dot ball, well bowled!' : 'Defended solidly.';\n      case 1:\n        return Math.random() > 0.5 ? 'Takes a quick single.' : 'Nudged for one.';\n      case 2:\n        return Math.random() > 0.5 ? 'Good running, two runs!' : 'Placed in the gap for two.';\n      case 3:\n        return 'Excellent running, three runs! Great placement.';\n      case 4:\n        const fourComments = [\n          'FOUR! Cracking shot through the covers!',\n          'FOUR! Timed to perfection!',\n          'FOUR! Finds the gap beautifully!',\n          'FOUR! What a stroke!'\n        ];\n        return fourComments[Math.floor(Math.random() * fourComments.length)];\n      case 6:\n        const sixComments = [\n          'SIX! That\\'s absolutely massive!',\n          'SIX! Into the stands!',\n          'SIX! Clean as a whistle!',\n          'SIX! What a shot! The crowd is on its feet!'\n        ];\n        return sixComments[Math.floor(Math.random() * sixComments.length)];\n      default:\n        return `${runs} runs, good cricket!`;\n    }\n  }\n};\n","size_bytes":6974},"src/hooks/use-toast.tsx":{"content":"import * as React from \"react\"\nimport { toast as sonnerToast } from \"sonner\"\n\ntype ToastProps = {\n  title?: string\n  description?: string\n  variant?: \"default\" | \"destructive\"\n}\n\nexport const useToast = () => {\n  const toast = React.useCallback(({ title, description, variant = \"default\" }: ToastProps) => {\n    if (variant === \"destructive\") {\n      sonnerToast.error(title, {\n        description,\n        style: {\n          background: \"hsl(var(--destructive))\",\n          color: \"hsl(var(--destructive-foreground))\",\n          border: \"1px solid hsl(var(--destructive))\",\n        }\n      })\n    } else {\n      sonnerToast.success(title, {\n        description,\n        style: {\n          background: \"hsl(var(--glass))\",\n          color: \"hsl(var(--foreground))\",\n          border: \"1px solid hsl(var(--glass-border))\",\n          backdropFilter: \"blur(12px)\",\n        }\n      })\n    }\n  }, [])\n\n  return { toast }\n}\n","size_bytes":918},"src/hooks/useMatchScoring.test.ts":{"content":"import { renderHook, act } from '@testing-library/react-hooks';\nimport { useMatchScoring } from './useMatchScoring';\nimport { Match, Player, Team } from '@/types/cricket';\n\n// Mock data for a simple match\nconst mockPlayer = (id: string, name: string): Player => ({\n  id,\n  name,\n  role: 'batsman',\n  battingStats: { runs: 0, ballsFaced: 0, fours: 0, sixes: 0, strikeRate: 0, isOut: false },\n  bowlingStats: { runs: 0, balls: 0, overs: 0, wickets: 0, economyRate: 0, wides: 0, noBalls: 0 },\n});\n\nconst teamA: Team = {\n  name: 'Team A',\n  fullRoster: [mockPlayer('1', 'Alice'), mockPlayer('2', 'Bob')],\n  playingXI: [mockPlayer('1', 'Alice'), mockPlayer('2', 'Bob')],\n};\nconst teamB: Team = {\n  name: 'Team B',\n  fullRoster: [mockPlayer('3', 'Charlie'), mockPlayer('4', 'Dave')],\n  playingXI: [mockPlayer('3', 'Charlie'), mockPlayer('4', 'Dave')],\n};\n\nconst initialMatch: Match = {\n  team1: teamA,\n  team2: teamB,\n  battingFirst: 'Team A',\n  currentInnings: 1,\n  totalOvers: 1,\n  isComplete: false,\n  isLive: true,\n  innings: {\n    first: {\n      score: 0,\n      wickets: 0,\n      overs: 0,\n      balls: 0,\n      extras: 0,\n      isComplete: false,\n      currentBatsmen: { striker: '1', nonStriker: '2' },\n      currentBowler: '3',\n    },\n    second: {\n      score: 0,\n      wickets: 0,\n      overs: 0,\n      balls: 0,\n      extras: 0,\n      isComplete: false,\n      currentBatsmen: { striker: '3', nonStriker: '4' },\n      currentBowler: '1',\n    },\n  },\n};\n\ndescribe('useMatchScoring', () => {\n  it('scores a run and rotates strike on odd runs', () => {\n    let match = { ...initialMatch };\n    const onMatchUpdate = (updated: any) => { match = updated; };\n    const { result } = renderHook(() => useMatchScoring(match, onMatchUpdate));\n    act(() => {\n      result.current.updateScore(1);\n    });\n    expect(match.innings.first.score).toBe(1);\n    expect(match.innings.first.currentBatsmen.striker).toBe('2'); // Strike rotated\n  });\n\n  it('does not count ball for wide', () => {\n    let match = { ...initialMatch };\n    const onMatchUpdate = (updated: any) => { match = updated; };\n    const { result } = renderHook(() => useMatchScoring(match, onMatchUpdate));\n    act(() => {\n      result.current.updateScore(1, true, 'wide');\n    });\n    expect(match.innings.first.extras).toBe(1);\n    expect(match.innings.first.balls).toBe(0);\n  });\n\n  it('handles wicket and increments wickets', () => {\n    let match = { ...initialMatch };\n    const onMatchUpdate = (updated: any) => { match = updated; };\n    const { result } = renderHook(() => useMatchScoring(match, onMatchUpdate));\n    act(() => {\n      result.current.handleWicket('bowled');\n    });\n    expect(match.innings.first.wickets).toBe(1);\n    expect(match.team1.playingXI[0].battingStats.isOut).toBe(true);\n  });\n\n  it('undoes last action', () => {\n    let match = { ...initialMatch };\n    const onMatchUpdate = (updated: any) => { match = updated; };\n    const { result } = renderHook(() => useMatchScoring(match, onMatchUpdate));\n    act(() => {\n      result.current.updateScore(4);\n      result.current.undoLastAction();\n    });\n    expect(match.innings.first.score).toBe(0);\n  });\n\n  it('completes innings when all out', () => {\n    let match = { ...initialMatch };\n    match.team1.playingXI = [mockPlayer('1', 'Alice')]; // Only one batsman\n    match.innings.first.currentBatsmen = { striker: '1', nonStriker: '1' };\n    const onMatchUpdate = (updated: any) => { match = updated; };\n    const { result } = renderHook(() => useMatchScoring(match, onMatchUpdate));\n    act(() => {\n      result.current.handleWicket('bowled');\n    });\n    expect(match.innings.first.isComplete).toBe(true);\n  });\n});\n","size_bytes":3659},"src/hooks/useMatchScoring.ts":{"content":"import { useState, useCallback, useMemo } from 'react';\nimport { Match, Innings, Player, ExtraType } from '@/types/cricket';\nimport { CRICKET_CONSTANTS, cricketUtils } from '@/constants/cricket';\nimport { validationUtils, ValidationResult } from '@/utils/validation';\nimport { cricketFeedback } from '@/utils/toast';\n\n// Action data interface for undo functionality\ninterface ActionData {\n  type: string;\n  runs: number;\n  isExtra: boolean;\n  extraType?: string;\n  previousState: Match;\n}\n\n// Hook return type\ninterface UseMatchScoringReturn {\n  // State\n  lastAction: ActionData | null;\n  freeHit: boolean;\n  \n  // Actions\n  updateScore: (runs: number, isExtra?: boolean, extraType?: ExtraType) => boolean;\n  handleWicket: (dismissalType: string, outBatsman?: string) => boolean;\n  undoLastAction: () => boolean;\n  rotateStrike: () => void;\n  setFreeHit: (value: boolean) => void;\n  \n  // Computed values\n  currentInnings: Innings | null;\n  battingTeam: any;\n  bowlingTeam: any;\n  currentRunRate: number;\n  requiredRunRate: number;\n  isMatchComplete: boolean;\n  isInningsComplete: boolean;\n  \n  // Validation\n  validateScoringAction: (runs: number, isExtra?: boolean, extraType?: string) => ValidationResult;\n}\n\nexport const useMatchScoring = (\n  matchData: Match,\n  onMatchUpdate: (match: Match) => void\n): UseMatchScoringReturn => {\n  const [lastAction, setLastAction] = useState<ActionData | null>(null);\n  const [freeHit, setFreeHit] = useState(false);\n\n  // Computed values\n  const currentInnings = useMemo(() => {\n    return matchData.currentInnings === 1 ? matchData.innings.first : matchData.innings.second;\n  }, [matchData.currentInnings, matchData.innings]);\n\n  const battingTeam = useMemo(() => {\n    return matchData.currentInnings === 1 \n      ? (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2)\n      : (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1);\n  }, [matchData.currentInnings, matchData.battingFirst, matchData.team1, matchData.team2]);\n\n  const bowlingTeam = useMemo(() => {\n    return matchData.currentInnings === 1 \n      ? (matchData.battingFirst === matchData.team1?.name ? matchData.team2 : matchData.team1)\n      : (matchData.battingFirst === matchData.team1?.name ? matchData.team1 : matchData.team2);\n  }, [matchData.currentInnings, matchData.battingFirst, matchData.team1, matchData.team2]);\n\n  const currentRunRate = useMemo(() => {\n    if (!currentInnings) return 0;\n    return cricketUtils.calculateRunRate(\n      currentInnings.score,\n      currentInnings.overs,\n      currentInnings.balls\n    );\n  }, [currentInnings?.score, currentInnings?.overs, currentInnings?.balls]);\n\n  const requiredRunRate = useMemo(() => {\n    if (!currentInnings || matchData.currentInnings === 1 || !matchData.innings.first) return 0;\n    \n    const target = matchData.innings.first.score + 1;\n    const ballsLeft = (matchData.totalOvers * CRICKET_CONSTANTS.BALLS_PER_OVER) - \n                     (currentInnings.overs * CRICKET_CONSTANTS.BALLS_PER_OVER + currentInnings.balls);\n    const oversLeft = ballsLeft / CRICKET_CONSTANTS.BALLS_PER_OVER;\n    \n    return cricketUtils.calculateRequiredRunRate(\n      target,\n      currentInnings.score,\n      Math.floor(oversLeft),\n      ballsLeft % CRICKET_CONSTANTS.BALLS_PER_OVER\n    );\n  }, [currentInnings?.score, currentInnings?.overs, currentInnings?.balls, matchData.innings.first?.score, matchData.totalOvers]);\n\n  const isMatchComplete = useMemo(() => {\n    return matchData.isComplete;\n  }, [matchData.isComplete]);\n\n  const isInningsComplete = useMemo(() => {\n    if (!currentInnings || !battingTeam) return false;\n    \n    const maxWickets = cricketUtils.getMaxWickets(battingTeam.playingXI?.length || 11);\n    const isAllOut = currentInnings.wickets >= maxWickets;\n    const isOversComplete = currentInnings.overs >= matchData.totalOvers;\n    const isTargetReached = matchData.currentInnings === 2 && \n                           matchData.innings.first && \n                           currentInnings.score >= (matchData.innings.first.score + 1);\n    \n    return isAllOut || isOversComplete || isTargetReached;\n  }, [currentInnings, battingTeam, matchData.totalOvers, matchData.innings.first?.score]);\n\n  // Validation function\n  const validateScoringAction = useCallback((runs: number, isExtra = false, extraType?: string): ValidationResult => {\n    return validationUtils.validateScoringAction(\n      { runs, isExtra, extraType },\n      matchData\n    );\n  }, [matchData]);\n\n  // Update score function\n  const updateScore = useCallback((runs: number, isExtra = false, extraType?: ExtraType): boolean => {\n    // Validate the action\n    const validation = validateScoringAction(runs, isExtra, extraType);\n    if (!validation.isValid) {\n      cricketFeedback.validation(validation);\n      return false;\n    }\n\n    if (!currentInnings || !battingTeam || !bowlingTeam) {\n      cricketFeedback.error('Invalid match state');\n      return false;\n    }\n\n    // Store previous state for undo\n    setLastAction({\n      type: 'score',\n      runs,\n      isExtra,\n      extraType,\n      previousState: JSON.parse(JSON.stringify(matchData))\n    });\n\n    const updatedMatch = { ...matchData };\n    const innings = updatedMatch.currentInnings === 1 ? updatedMatch.innings.first : updatedMatch.innings.second;\n    \n    if (!innings) return false;\n\n    // Update score\n    innings.score += runs;\n    \n    // Handle ball counting and strike rotation\n    let ballCounted = false;\n    let shouldRotateStrike = false;\n\n    if (!isExtra) {\n      ballCounted = true;\n      shouldRotateStrike = runs % 2 === 1;\n      \n      // Update batsman stats\n      const striker = innings.currentBatsmen.striker;\n      if (striker && battingTeam) {\n        const strikerPlayer = battingTeam.playingXI.find((p: Player) => p.id === striker);\n        if (strikerPlayer) {\n          strikerPlayer.battingStats.runs += runs;\n          strikerPlayer.battingStats.ballsFaced += 1;\n          if (runs === CRICKET_CONSTANTS.BOUNDARY_FOUR) strikerPlayer.battingStats.fours += 1;\n          if (runs === CRICKET_CONSTANTS.BOUNDARY_SIX) strikerPlayer.battingStats.sixes += 1;\n          strikerPlayer.battingStats.strikeRate = cricketUtils.calculateStrikeRate(\n            strikerPlayer.battingStats.runs,\n            strikerPlayer.battingStats.ballsFaced\n          );\n        }\n      }\n    } else {\n      // Handle extras\n      innings.extras += runs;\n      \n      if (extraType === 'noball') {\n        setFreeHit(true);\n        ballCounted = false;\n      } else if (extraType === 'wide') {\n        ballCounted = false;\n      } else if (extraType === 'bye' || extraType === 'legbye') {\n        ballCounted = true;\n        shouldRotateStrike = runs % 2 === 1;\n      }\n    }\n\n    // Update bowler stats\n    if (bowlingTeam && innings.currentBowler) {\n      const bowler = bowlingTeam.playingXI.find((p: Player) => p.id === innings.currentBowler);\n      if (bowler) {\n        bowler.bowlingStats.runs += runs;\n        \n        if (ballCounted && !freeHit) {\n          bowler.bowlingStats.balls += 1;\n          \n          // Update overs when 6 balls are completed\n          if (bowler.bowlingStats.balls >= CRICKET_CONSTANTS.BALLS_PER_OVER) {\n            bowler.bowlingStats.overs += Math.floor(bowler.bowlingStats.balls / CRICKET_CONSTANTS.BALLS_PER_OVER);\n            bowler.bowlingStats.balls = bowler.bowlingStats.balls % CRICKET_CONSTANTS.BALLS_PER_OVER;\n          }\n        }\n        \n        // Update economy rate\n        bowler.bowlingStats.economyRate = cricketUtils.calculateEconomyRate(\n          bowler.bowlingStats.runs,\n          bowler.bowlingStats.overs,\n          bowler.bowlingStats.balls\n        );\n\n        // Track extras\n        if (isExtra) {\n          if (extraType === 'wide') bowler.bowlingStats.wides += 1;\n          if (extraType === 'noball') bowler.bowlingStats.noBalls += 1;\n        }\n      }\n    }\n\n    // Update ball count for innings\n    if (ballCounted && !freeHit) {\n      innings.balls += 1;\n      \n      if (innings.balls === CRICKET_CONSTANTS.BALLS_PER_OVER) {\n        innings.overs += 1;\n        innings.balls = 0;\n        shouldRotateStrike = true; // Rotate strike at end of over\n      }\n    }\n\n    // Rotate strike if needed - IMMUTABLE UPDATE\n    if (shouldRotateStrike) {\n      console.log('üîÑ HOOK: Strike rotation triggered');\n      const temp = innings.currentBatsmen.striker;\n      innings.currentBatsmen = {\n        ...innings.currentBatsmen,\n        striker: innings.currentBatsmen.nonStriker,\n        nonStriker: temp\n      };\n      console.log('üîÑ HOOK: Strike rotated from', temp, 'to', innings.currentBatsmen.striker);\n    }\n\n    // Clear free hit if ball was counted\n    if (ballCounted && freeHit) {\n      setFreeHit(false);\n    }\n\n    // Check for innings/match completion\n    const maxWickets = cricketUtils.getMaxWickets(battingTeam.playingXI?.length || 11);\n    const isInningsComplete = innings.wickets >= maxWickets || innings.overs >= matchData.totalOvers;\n    const isTargetReached = matchData.currentInnings === 2 && \n                           matchData.innings.first && \n                           innings.score >= (matchData.innings.first.score + 1);\n\n    if (isInningsComplete || isTargetReached) {\n      innings.isComplete = true;\n      \n      if (matchData.currentInnings === 1) {\n        // Start second innings\n        updatedMatch.currentInnings = 2;\n      } else {\n        // Match complete\n        updatedMatch.isComplete = true;\n        updatedMatch.isLive = false;\n        \n        // Calculate result\n        const result = cricketUtils.calculateMatchResult(updatedMatch);\n        updatedMatch.winner = result.winner;\n        updatedMatch.result = result.result;\n      }\n    }\n\n    console.log('üéØ HOOK: Calling onMatchUpdate with updated match');\n    onMatchUpdate(updatedMatch);\n    cricketFeedback.scoreUpdate(runs, isExtra);\n    \n    return true;\n  }, [matchData, currentInnings, battingTeam, bowlingTeam, freeHit, onMatchUpdate, validateScoringAction]);\n\n  // Handle wicket function\n  const handleWicket = useCallback((dismissalType: string, outBatsman?: string): boolean => {\n    const validation = validationUtils.validateWicketAction(dismissalType, outBatsman || '', matchData);\n    if (!validation.isValid) {\n      cricketFeedback.validation(validation);\n      return false;\n    }\n\n    if (!currentInnings || !battingTeam) {\n      cricketFeedback.error('Invalid match state for wicket');\n      return false;\n    }\n\n    // Store previous state for undo\n    setLastAction({\n      type: 'wicket',\n      runs: 0,\n      isExtra: false,\n      previousState: JSON.parse(JSON.stringify(matchData))\n    });\n\n    const updatedMatch = { ...matchData };\n    const innings = updatedMatch.currentInnings === 1 ? updatedMatch.innings.first : updatedMatch.innings.second;\n    \n    if (!innings) return false;\n\n    // Determine which batsman is out\n    const batsmanToUpdate = dismissalType === 'runOut' ? outBatsman : innings.currentBatsmen.striker;\n    \n    // Update player stats\n    let dismissedBatsman: Player | undefined;\n    const updatedPlayingXI = battingTeam.playingXI.map((player: Player) => {\n      if (player.id === batsmanToUpdate) {\n        const updatedBatsman = JSON.parse(JSON.stringify(player));\n        dismissedBatsman = updatedBatsman;\n        updatedBatsman.battingStats.isOut = true;\n        updatedBatsman.battingStats.dismissalType = dismissalType as any;\n        \n        // Add ball faced if not run out or if striker was run out\n        if (dismissalType !== 'runOut' || batsmanToUpdate === innings.currentBatsmen.striker) {\n          updatedBatsman.battingStats.ballsFaced += 1;\n        }\n        \n        return updatedBatsman;\n      }\n      return player;\n    });\n    \n    battingTeam.playingXI = updatedPlayingXI;\n\n    // Update bowler stats (except for run outs)\n    if (dismissalType !== 'runOut' && bowlingTeam && innings.currentBowler) {\n      const bowler = bowlingTeam.playingXI.find((p: Player) => p.id === innings.currentBowler);\n      if (bowler) {\n        bowler.bowlingStats.wickets += 1;\n        \n        if (!freeHit) {\n          bowler.bowlingStats.balls += 1;\n          \n          if (bowler.bowlingStats.balls >= CRICKET_CONSTANTS.BALLS_PER_OVER) {\n            bowler.bowlingStats.overs += Math.floor(bowler.bowlingStats.balls / CRICKET_CONSTANTS.BALLS_PER_OVER);\n            bowler.bowlingStats.balls = bowler.bowlingStats.balls % CRICKET_CONSTANTS.BALLS_PER_OVER;\n          }\n          \n          bowler.bowlingStats.economyRate = cricketUtils.calculateEconomyRate(\n            bowler.bowlingStats.runs,\n            bowler.bowlingStats.overs,\n            bowler.bowlingStats.balls\n          );\n        }\n      }\n    }\n\n    // Update innings wickets\n    innings.wickets += 1;\n\n    // Handle ball count for wickets (except run outs on free hits)\n    if (dismissalType !== 'runOut' && !freeHit) {\n      innings.balls += 1;\n      \n      if (innings.balls === CRICKET_CONSTANTS.BALLS_PER_OVER) {\n        innings.overs += 1;\n        innings.balls = 0;\n        \n        // Rotate strike at end of over - IMMUTABLE UPDATE\n        const temp = innings.currentBatsmen.striker;\n        innings.currentBatsmen = {\n          ...innings.currentBatsmen,\n          striker: innings.currentBatsmen.nonStriker,\n          nonStriker: temp\n        };\n      }\n    }\n\n    // Clear free hit\n    if (freeHit) setFreeHit(false);\n\n    // Check for innings completion\n    const maxWickets = cricketUtils.getMaxWickets(battingTeam.playingXI?.length || 11);\n    if (innings.wickets >= maxWickets || innings.overs >= matchData.totalOvers) {\n      innings.isComplete = true;\n      \n      if (matchData.currentInnings === 1) {\n        updatedMatch.currentInnings = 2;\n      } else {\n        updatedMatch.isComplete = true;\n        updatedMatch.isLive = false;\n      }\n    }\n\n    onMatchUpdate(updatedMatch);\n    cricketFeedback.wicket(dismissalType, dismissedBatsman?.name);\n    \n    return true;\n  }, [matchData, currentInnings, battingTeam, bowlingTeam, freeHit, onMatchUpdate]);\n\n  // Undo last action\n  const undoLastAction = useCallback((): boolean => {\n    if (!lastAction) {\n      cricketFeedback.error('No action to undo');\n      return false;\n    }\n\n    onMatchUpdate(lastAction.previousState);\n    setLastAction(null);\n    cricketFeedback.scoreUpdate(0); // Generic undo feedback\n    \n    return true;\n  }, [lastAction, onMatchUpdate]);\n\n  // Rotate strike manually\n  const rotateStrike = useCallback(() => {\n    if (!currentInnings) return;\n    \n    const updatedMatch = { ...matchData };\n    const innings = updatedMatch.currentInnings === 1 ? updatedMatch.innings.first : updatedMatch.innings.second;\n    \n    if (innings) {\n      console.log('üîÑ HOOK: Manual strike rotation');\n      const temp = innings.currentBatsmen.striker;\n      innings.currentBatsmen = {\n        ...innings.currentBatsmen,\n        striker: innings.currentBatsmen.nonStriker,\n        nonStriker: temp\n      };\n      console.log('üîÑ HOOK: Manual strike rotated from', temp, 'to', innings.currentBatsmen.striker);\n      \n      onMatchUpdate(updatedMatch);\n    }\n  }, [matchData, currentInnings, onMatchUpdate]);\n\n  return {\n    // State\n    lastAction,\n    freeHit,\n    \n    // Actions\n    updateScore,\n    handleWicket,\n    undoLastAction,\n    rotateStrike,\n    setFreeHit,\n    \n    // Computed values\n    currentInnings: currentInnings || null,\n    battingTeam,\n    bowlingTeam,\n    currentRunRate,\n    requiredRunRate,\n    isMatchComplete,\n    isInningsComplete: isInningsComplete || false,\n    validateScoringAction\n  };\n};","size_bytes":15609},"src/hooks/useTeamStorage.ts":{"content":"import { useState, useEffect } from 'react';\nimport { Team, Player } from '@/types/cricket';\nimport { getDatabaseService, DatabaseTeam, DatabasePlayer } from '@/services/databaseService';\n\ninterface SavedTeam {\n  id: string;\n  name: string;\n  fullRoster: Player[];\n  captain?: string;\n  wicketKeeper?: string;\n  createdAt: Date;\n  lastUsed: Date;\n  matchesPlayed?: number;\n  wins?: number;\n  losses?: number;\n  draws?: number;\n}\n\nexport function useTeamStorage() {\n  const [savedTeams, setSavedTeams] = useState<SavedTeam[]>([]);\n  const [savedPlayers, setSavedPlayers] = useState<DatabasePlayer[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load saved teams and players from database on mount\n  useEffect(() => {\n    loadTeamsAndPlayers();\n  }, []);\n\n  const loadTeamsAndPlayers = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      // Get database service instance\n      const databaseService = getDatabaseService();\n      \n      // Fetch teams and players from database\n      const [dbTeams, dbPlayers] = await Promise.all([\n        databaseService.fetchTeams(),\n        databaseService.fetchPlayers()\n      ]);\n\n      // Convert database teams to SavedTeam format\n      const teams = dbTeams.map((team: DatabaseTeam) => ({\n        ...team,\n        createdAt: new Date(team.createdAt),\n        lastUsed: new Date(team.lastUsed)\n      }));\n\n      setSavedTeams(teams);\n      setSavedPlayers(dbPlayers);\n    } catch (error) {\n      console.error('Error loading teams and players:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const saveTeam = async (team: Partial<Team>) => {\n    if (!team.name || !team.fullRoster || team.fullRoster.length === 0) {\n      throw new Error('Team must have a name and at least one player');\n    }\n\n    try {\n      // Get database service instance and save to database\n      const databaseService = getDatabaseService();\n      const dbTeam = await databaseService.saveTeam(team);\n      \n      // Convert to SavedTeam format\n      const savedTeam: SavedTeam = {\n        ...dbTeam,\n        createdAt: new Date(dbTeam.createdAt),\n        lastUsed: new Date(dbTeam.lastUsed)\n      };\n\n      // Update local state\n      setSavedTeams(prev => {\n        const existingIndex = prev.findIndex(t => t.id === savedTeam.id || t.name === savedTeam.name);\n        if (existingIndex >= 0) {\n          const updated = [...prev];\n          updated[existingIndex] = { ...savedTeam, createdAt: prev[existingIndex].createdAt };\n          return updated;\n        } else {\n          return [...prev, savedTeam];\n        }\n      });\n\n      // Save individual players to database\n      if (team.fullRoster) {\n        const databaseService = getDatabaseService();\n        for (const player of team.fullRoster) {\n          await databaseService.savePlayer(player);\n        }\n        // Refresh players list\n        const updatedPlayers = await databaseService.fetchPlayers();\n        setSavedPlayers(updatedPlayers);\n      }\n\n      return savedTeam;\n    } catch (error) {\n      console.error('Error saving team:', error);\n      throw error;\n    }\n  };\n\n  const loadTeam = (teamId: string): Team | null => {\n    const savedTeam = savedTeams.find(t => t.id === teamId);\n    if (!savedTeam) return null;\n\n    // Update last used date\n    setSavedTeams(prev => \n      prev.map(t => \n        t.id === teamId \n          ? { ...t, lastUsed: new Date() }\n          : t\n      )\n    );\n\n    // Convert SavedTeam to Team format\n    return {\n      id: savedTeam.id,\n      name: savedTeam.name,\n      fullRoster: savedTeam.fullRoster,\n      playingXI: [], // Will be selected fresh for each match\n      captain: savedTeam.captain,\n      wicketKeeper: savedTeam.wicketKeeper\n    };\n  };\n\n  const deleteTeam = async (teamId: string) => {\n    try {\n      // Get database service instance and delete from database\n      const databaseService = getDatabaseService();\n      await databaseService.deleteTeam(teamId);\n      \n      // Update local state\n      setSavedTeams(prev => prev.filter(t => t.id !== teamId));\n    } catch (error) {\n      console.error('Error deleting team:', error);\n      throw error;\n    }\n  };\n\n  const duplicateTeam = (teamId: string, newName: string) => {\n    const originalTeam = savedTeams.find(t => t.id === teamId);\n    if (!originalTeam) return null;\n\n    const duplicatedTeam: SavedTeam = {\n      ...originalTeam,\n      id: Date.now().toString(),\n      name: newName,\n      createdAt: new Date(),\n      lastUsed: new Date()\n    };\n\n    setSavedTeams(prev => [...prev, duplicatedTeam]);\n    return duplicatedTeam;\n  };\n\n  const getTeamStats = (teamId: string) => {\n    const team = savedTeams.find(t => t.id === teamId);\n    if (!team) return null;\n\n    return {\n      totalPlayers: team.fullRoster.length,\n      batsmen: team.fullRoster.filter(p => p.role === 'batsman').length,\n      bowlers: team.fullRoster.filter(p => p.role === 'bowler').length,\n      allRounders: team.fullRoster.filter(p => p.role === 'allrounder').length,\n      wicketKeepers: team.fullRoster.filter(p => p.role === 'wicketkeeper').length,\n      createdAt: team.createdAt,\n      lastUsed: team.lastUsed\n    };\n  };\n\n  return {\n    savedTeams,\n    savedPlayers,\n    isLoading,\n    error,\n    saveTeam,\n    loadTeam,\n    deleteTeam,\n    duplicateTeam,\n    getTeamStats,\n    loadTeamsAndPlayers\n  };\n}\n","size_bytes":5506},"src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/pages/Index.tsx":{"content":"import ProfessionalCricketApp from \"@/components/ProfessionalCricketApp\";\n\nconst Index = () => {\n  return (\n    <div className=\"relative min-h-screen\">\n      {/* Stadium Background */}\n      <div \n        className=\"fixed inset-0 -z-10 bg-cover bg-center bg-no-repeat\"\n        style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1540747913346-19e32dc3e97e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2105&q=80')\",\n        }}\n      >\n        {/* Enhanced overlay for better text readability */}\n        <div className=\"absolute inset-0 bg-black/50\" />\n        <div className=\"absolute inset-0 bg-gradient-to-b from-black/30 via-transparent to-black/40\" />\n      </div>\n      \n      <ProfessionalCricketApp />\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":826},"src/services/databaseService.ts":{"content":"import { Team, Player, Match } from '@/types/cricket';\n\nexport interface DatabaseTeam {\n  id: string;\n  name: string;\n  fullRoster: Player[];\n  captain?: string;\n  wicketKeeper?: string;\n  createdAt: string;\n  lastUsed: string;\n  matchesPlayed?: number;\n  wins?: number;\n  losses?: number;\n  draws?: number;\n}\n\nexport interface DatabasePlayer {\n  id: string;\n  name: string;\n  role: Player['role'];\n  teamId?: string;\n  careerStats?: {\n    matchesPlayed: number;\n    runsScored: number;\n    wicketsTaken: number;\n    catches: number;\n    runOuts: number;\n  };\n  createdAt: string;\n  lastUsed: string;\n}\n\n// Database configuration interface\nexport interface DatabaseConfig {\n  type: 'firebase';\n  projectId: string;\n  apiKey: string;\n}\n\nclass DatabaseService {\n  private config: DatabaseConfig;\n\n  constructor(config: DatabaseConfig) {\n    if (config.type !== 'firebase' || !config.projectId || !config.apiKey) {\n      throw new Error('Firebase configuration is required with projectId and apiKey');\n    }\n    this.config = config;\n  }\n\n  // Teams CRUD operations\n  async fetchTeams(): Promise<DatabaseTeam[]> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Only Firebase database is supported');\n    }\n    return this.fetchTeamsFromFirebase();\n  }\n\n  async saveTeam(team: Partial<Team>): Promise<DatabaseTeam> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Only Firebase database is supported');\n    }\n\n    const dbTeam: DatabaseTeam = {\n      id: team.id || Date.now().toString(),\n      name: team.name || '',\n      fullRoster: team.fullRoster || [],\n      captain: team.captain,\n      wicketKeeper: team.wicketKeeper,\n      createdAt: new Date().toISOString(),\n      lastUsed: new Date().toISOString(),\n      matchesPlayed: 0,\n      wins: 0,\n      losses: 0,\n      draws: 0\n    };\n\n        return this.saveTeamToFirebase(dbTeam);\n  }\n\n  async deleteTeam(teamId: string): Promise<void> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Only Firebase database is supported');\n    }\n    return this.deleteTeamFromFirebase(teamId);\n  }\n\n  // Players CRUD operations\n  async fetchPlayers(): Promise<DatabasePlayer[]> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Only Firebase database is supported');\n    }\n    return this.fetchPlayersFromFirebase();\n  }\n\n  async savePlayer(player: Player): Promise<DatabasePlayer> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Only Firebase database is supported');\n    }\n\n    const dbPlayer: DatabasePlayer = {\n      id: player.id,\n      name: player.name,\n      role: player.role,\n      careerStats: {\n        matchesPlayed: 0,\n        runsScored: player.battingStats.runs,\n        wicketsTaken: player.bowlingStats.wickets,\n        catches: player.fieldingStats.catches,\n        runOuts: player.fieldingStats.runOuts\n      },\n      createdAt: new Date().toISOString(),\n      lastUsed: new Date().toISOString()\n    };\n\n        return this.savePlayerToFirebase(dbPlayer);\n  }\n\n  // Firebase implementations\n  private async fetchTeamsFromFirebase(): Promise<DatabaseTeam[]> {\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/teams`;\n      \n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch teams from Firebase');\n      }\n\n      const data = await response.json();\n      \n      // Transform Firebase document format to our format\n      const teams: DatabaseTeam[] = data.documents?.map((doc: any) => ({\n        id: doc.name.split('/').pop(),\n        name: doc.fields.name?.stringValue || '',\n        fullRoster: JSON.parse(doc.fields.fullRoster?.stringValue || '[]'),\n        captain: doc.fields.captain?.stringValue,\n        wicketKeeper: doc.fields.wicketKeeper?.stringValue,\n        createdAt: doc.fields.createdAt?.stringValue || new Date().toISOString(),\n        lastUsed: doc.fields.lastUsed?.stringValue || new Date().toISOString(),\n        matchesPlayed: doc.fields.matchesPlayed?.integerValue || 0,\n        wins: doc.fields.wins?.integerValue || 0,\n        losses: doc.fields.losses?.integerValue || 0,\n        draws: doc.fields.draws?.integerValue || 0\n      })) || [];\n\n      return teams;\n    } catch (error) {\n      console.error('Firebase fetch error:', error);\n      throw error;\n    }\n  }\n\n  private async saveTeamToFirebase(team: DatabaseTeam): Promise<DatabaseTeam> {\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/teams/${team.id}`;\n      \n      const firebaseDoc = {\n        fields: {\n          name: { stringValue: team.name },\n          fullRoster: { stringValue: JSON.stringify(team.fullRoster) },\n          captain: { stringValue: team.captain || '' },\n          wicketKeeper: { stringValue: team.wicketKeeper || '' },\n          createdAt: { stringValue: team.createdAt },\n          lastUsed: { stringValue: team.lastUsed },\n          matchesPlayed: { integerValue: team.matchesPlayed || 0 },\n          wins: { integerValue: team.wins || 0 },\n          losses: { integerValue: team.losses || 0 },\n          draws: { integerValue: team.draws || 0 }\n        }\n      };\n\n      const response = await fetch(url, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(firebaseDoc)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save team to Firebase');\n      }\n\n      return team;\n    } catch (error) {\n      console.error('Firebase save error:', error);\n      throw error;\n    }\n  }\n\n  private async deleteTeamFromFirebase(teamId: string): Promise<void> {\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/teams/${teamId}`;\n      \n      const response = await fetch(url, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete team from Firebase');\n      }\n    } catch (error) {\n      console.error('Firebase delete error:', error);\n      throw error;\n    }\n  }\n\n  private async fetchPlayersFromFirebase(): Promise<DatabasePlayer[]> {\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/players`;\n      \n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch players from Firebase');\n      }\n\n      const data = await response.json();\n      \n      // Transform Firebase document format to our format\n      const players: DatabasePlayer[] = data.documents?.map((doc: any) => ({\n        id: doc.name.split('/').pop(),\n        name: doc.fields.name?.stringValue || '',\n        role: doc.fields.role?.stringValue as Player['role'] || 'batsman',\n        teamId: doc.fields.teamId?.stringValue,\n        careerStats: doc.fields.careerStats?.stringValue ? JSON.parse(doc.fields.careerStats.stringValue) : undefined,\n        createdAt: doc.fields.createdAt?.stringValue || new Date().toISOString(),\n        lastUsed: doc.fields.lastUsed?.stringValue || new Date().toISOString()\n      })) || [];\n\n      return players;\n    } catch (error) {\n      console.error('Firebase fetch error:', error);\n      throw error;\n    }\n  }\n\n  private async savePlayerToFirebase(player: DatabasePlayer): Promise<DatabasePlayer> {\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/players/${player.id}`;\n      \n      const firebaseDoc = {\n        fields: {\n          name: { stringValue: player.name },\n          role: { stringValue: player.role },\n          teamId: { stringValue: player.teamId || '' },\n          careerStats: { stringValue: JSON.stringify(player.careerStats || {}) },\n          createdAt: { stringValue: player.createdAt },\n          lastUsed: { stringValue: player.lastUsed }\n        }\n      };\n\n      const response = await fetch(url, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(firebaseDoc)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save player to Firebase');\n      }\n\n      return player;\n    } catch (error) {\n      console.error('Firebase save error:', error);\n      throw error;\n    }\n  }\n\n  // Match saving and loading\n  async saveMatch(match: Match): Promise<void> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Match saving is only supported with Firebase');\n    }\n\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/matches/${match.id}`;\n      \n      const firebaseDoc = {\n        fields: {\n          matchData: { stringValue: JSON.stringify(match) },\n          lastUpdated: { timestampValue: new Date().toISOString() },\n          isComplete: { booleanValue: match.isComplete }\n        }\n      };\n\n      const response = await fetch(url, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(firebaseDoc)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save match to Firebase');\n      }\n    } catch (error) {\n      console.error('Error saving match:', error);\n      throw error;\n    }\n  }\n\n  async fetchInProgressMatch(): Promise<Match | null> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Match fetching is only supported with Firebase');\n    }\n\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/matches`;\n      const query = '?pageSize=1&orderBy=lastUpdated desc';\n      \n      const response = await fetch(url + query, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch match from Firebase');\n      }\n\n      const data = await response.json();\n      if (!data.documents || data.documents.length === 0) {\n        return null;\n      }\n\n      // Find the first incomplete match\n      for (const doc of data.documents) {\n        try {\n          // Handle different Firebase document structures\n          let matchData: any;\n          \n          if (doc.fields && doc.fields.matchData && doc.fields.matchData.stringValue) {\n            // Structure: { fields: { matchData: { stringValue: \"...\" } } }\n            matchData = JSON.parse(doc.fields.matchData.stringValue);\n          } else if (doc.fields) {\n            // Structure: { fields: { field1: { stringValue: \"...\" }, field2: { ... } } }\n            // Convert Firebase fields to regular object\n            matchData = {} as Record<string, any>;\n            for (const [key, value] of Object.entries(doc.fields)) {\n              if (typeof value === 'object' && value !== null) {\n                if ('stringValue' in value) {\n                  try {\n                    matchData[key] = JSON.parse((value as any).stringValue);\n                  } catch {\n                    matchData[key] = (value as any).stringValue;\n                  }\n                } else if ('integerValue' in value) {\n                  matchData[key] = parseInt((value as any).integerValue);\n                } else if ('booleanValue' in value) {\n                  matchData[key] = (value as any).booleanValue;\n                } else {\n                  matchData[key] = value;\n                }\n              }\n            }\n          } else {\n            // Direct object structure\n            matchData = doc;\n          }\n          \n          if (!matchData.isComplete) {\n            return matchData;\n          }\n        } catch (error) {\n          console.error('Error parsing match data:', error);\n          console.error('Document structure:', JSON.stringify(doc, null, 2));\n          continue;\n        }\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error fetching match:', error);\n      return null;\n    }\n  }\n\n  async fetchAllInProgressMatches(): Promise<Match[]> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Match fetching is only supported with Firebase');\n    }\n\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/matches`;\n      const query = '?pageSize=50&orderBy=lastUpdated desc';\n      \n      const response = await fetch(url + query, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch matches from Firebase');\n      }\n\n      const data = await response.json();\n      if (!data.documents || data.documents.length === 0) {\n        return [];\n      }\n\n      // Transform Firebase documents to Match objects and filter incomplete matches\n      const matches: Match[] = data.documents\n        .map((doc: any) => {\n          try {\n            // Handle different Firebase document structures\n            let matchData;\n            \n            if (doc.fields && doc.fields.matchData && doc.fields.matchData.stringValue) {\n              // Structure: { fields: { matchData: { stringValue: \"...\" } } }\n              matchData = JSON.parse(doc.fields.matchData.stringValue);\n            } else if (doc.fields) {\n              // Structure: { fields: { field1: { stringValue: \"...\" }, field2: { ... } } }\n              // Convert Firebase fields to regular object\n              matchData = {};\n              for (const [key, value] of Object.entries(doc.fields)) {\n                if (typeof value === 'object' && value !== null) {\n                  if ('stringValue' in value) {\n                    try {\n                      matchData[key] = JSON.parse((value as any).stringValue);\n                    } catch {\n                      matchData[key] = (value as any).stringValue;\n                    }\n                  } else if ('integerValue' in value) {\n                    matchData[key] = parseInt((value as any).integerValue);\n                  } else if ('booleanValue' in value) {\n                    matchData[key] = (value as any).booleanValue;\n                  } else {\n                    matchData[key] = value;\n                  }\n                }\n              }\n            } else {\n              // Direct object structure\n              matchData = doc;\n            }\n            \n            return matchData;\n          } catch (error) {\n            console.error('Error parsing match data:', error);\n            console.error('Document structure:', JSON.stringify(doc, null, 2));\n            return null;\n          }\n        })\n        .filter((match: Match | null) => match !== null && !match.isComplete);\n\n      return matches;\n    } catch (error) {\n      console.error('Error fetching matches:', error);\n      throw error;\n    }\n  }\n\n  // NEW METHOD: Fetch all matches (both paused and finished) from Firebase\n  async fetchAllMatches(): Promise<Match[]> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Match fetching is only supported with Firebase');\n    }\n\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/matches`;\n      const query = '?pageSize=100&orderBy=lastUpdated desc';\n      \n      const response = await fetch(url + query, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch matches from Firebase');\n      }\n\n      const data = await response.json();\n      if (!data.documents || data.documents.length === 0) {\n        return [];\n      }\n\n      // Transform Firebase documents to Match objects (include both paused and finished)\n      const matches: Match[] = data.documents\n        .map((doc: any) => {\n          try {\n            // Handle different Firebase document structures\n            let matchData;\n            \n            if (doc.fields && doc.fields.matchData && doc.fields.matchData.stringValue) {\n              // Structure: { fields: { matchData: { stringValue: \"...\" } } }\n              matchData = JSON.parse(doc.fields.matchData.stringValue);\n            } else if (doc.fields) {\n              // Structure: { fields: { field1: { stringValue: \"...\" }, field2: { ... } } }\n              // Convert Firebase fields to regular object\n              matchData = {};\n              for (const [key, value] of Object.entries(doc.fields)) {\n                if (typeof value === 'object' && value !== null) {\n                  if ('stringValue' in value) {\n                    try {\n                      matchData[key] = JSON.parse((value as any).stringValue);\n                    } catch {\n                      matchData[key] = (value as any).stringValue;\n                    }\n                  } else if ('integerValue' in value) {\n                    matchData[key] = parseInt((value as any).integerValue);\n                  } else if ('booleanValue' in value) {\n                    matchData[key] = (value as any).booleanValue;\n                  } else {\n                    matchData[key] = value;\n                  }\n                }\n              }\n            } else {\n              // Direct object structure\n              matchData = doc;\n            }\n            \n            return matchData;\n          } catch (error) {\n            console.error('Error parsing match data:', error);\n            console.error('Document structure:', JSON.stringify(doc, null, 2));\n            return null;\n          }\n        })\n        .filter((match: Match | null) => match !== null);\n\n      return matches;\n    } catch (error) {\n      console.error('Error fetching matches:', error);\n      return [];\n    }\n  }\n\n  async deleteMatch(matchId: string): Promise<void> {\n    if (this.config.type !== 'firebase') {\n      throw new Error('Match deletion is only supported with Firebase');\n    }\n\n    try {\n      const url = `https://firestore.googleapis.com/v1/projects/${this.config.projectId}/databases/(default)/documents/matches/${matchId}`;\n      \n      const response = await fetch(url, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete match from Firebase');\n      }\n    } catch (error) {\n      console.error('Error deleting match:', error);\n      throw error;\n    }\n  }\n}\n\n// Create singleton instance with Firebase config\nlet databaseServiceInstance: DatabaseService | null = null;\n\n// Export function to configure and get database service\nexport const configureDatabaseService = (config: DatabaseConfig): DatabaseService => {\n  if (!databaseServiceInstance) {\n    databaseServiceInstance = new DatabaseService(config);\n  }\n  return databaseServiceInstance;\n};\n\n// Export singleton instance getter\nexport const getDatabaseService = (): DatabaseService => {\n  if (!databaseServiceInstance) {\n    throw new Error('Database service not initialized. Call configureDatabaseService first.');\n  }\n  return databaseServiceInstance;\n};\n\n// Export for convenience\nexport const databaseService = getDatabaseService;\n","size_bytes":19541},"src/types/cricket.ts":{"content":"import { ReactNode } from 'react';\n\n// Professional Cricket Scoring Application - Type Definitions\n\nexport interface Player {\n  id: string;\n  name: string;\n  role: 'batsman' | 'bowler' | 'allrounder' | 'wicketkeeper';\n  battingStats: BattingStats;\n  bowlingStats: BowlingStats;\n  fieldingStats: FieldingStats;\n}\n\nexport interface BattingStats {\n  status: ReactNode;\n  runs: number;\n  ballsFaced: number;\n  fours: number;\n  sixes: number;\n  strikeRate: number;\n  isOut: boolean;\n  dismissalType?: DismissalType;\n  dismissedBy?: string;\n  isRetiredHurt: boolean;\n}\n\nexport interface BowlingStats {\n  overs: number;\n  balls: number;\n  runs: number;\n  wickets: number;\n  economyRate: number;\n  wides: number;\n  noBalls: number;\n}\n\nexport interface FieldingStats {\n  catches: number;\n  runOuts: number;\n  stumpings: number;\n}\n\nexport interface Team {\n  id: string;\n  name: string;\n  fullRoster: Player[];\n  playingXI: Player[];\n  captain?: string;\n  wicketKeeper?: string;\n}\n\nexport interface Ball {\n  id: string;\n  ballNumber: number;\n  over: number;\n  bowler: string;\n  batsman: string;\n  runs: number;\n  isExtra: boolean;\n  extraType?: ExtraType;\n  extraRuns?: number;\n  isWicket: boolean;\n  dismissalType?: DismissalType;\n  dismissedPlayer?: string;\n  newBatsman?: string;\n  commentary: string;\n  timestamp: Date;\n}\n\nexport interface Over {\n  number: number;\n  overNumber: number;\n  bowler: string;\n  balls: Ball[];\n  runs: number;\n  wickets: number;\n  extras: number;\n}\n\nexport interface CommentaryEntry {\n  over: number;\n  ball: number;\n  timestamp: string;\n  text: string;\n  runs?: number;\n  isWicket?: boolean;\n  isExtra?: boolean;\n}\n\nexport interface Innings {\n  number: 1 | 2;\n  battingTeam: string;\n  bowlingTeam: string;\n  score: number;\n  wickets: number;\n  overs: number;\n  balls: number;\n  extras: number;\n  target?: number;\n  isComplete: boolean;\n  completionReason?: 'allOut' | 'oversComplete' | 'targetReached';\n  currentBatsmen: {\n    striker: string;\n    nonStriker: string;\n  };\n  currentBowler: string;\n  overHistory: Over[];\n  ballHistory: Ball[];\n  powerPlayOvers?: number[];  // For power play tracking\n  dlsResource?: number;       // For DLS calculations\n  phaseStats?: {             // For phase-wise analysis\n    powerplay: PhaseStats;\n    middle: PhaseStats;\n    death: PhaseStats;\n  };\n  partnerships: Partnership[];\n  wagonWheel?: WagonWheelData[];\n  pitchMap?: PitchMapData[];\n  commentary: CommentaryEntry[];\n}\n\nexport interface Match {\n  id: string;\n  team1: Team;\n  team2: Team;\n  totalOvers: number;\n  tossWinner?: string;\n  tossDecision?: 'bat' | 'bowl';\n  battingFirst?: string;\n  currentInnings: 1 | 2;\n  innings: {\n    first?: Innings;\n    second?: Innings;\n  };\n  isLive: boolean;\n  isComplete: boolean;\n  winner?: string;\n  result?: string;\n  awards?: {\n    bestBatsman?: Player;\n    bestBowler?: Player;\n    manOfTheMatch?: Player;\n  };\n  matchType: 'T20' | 'ODI' | 'Test' | 'Custom';\n  venue?: string;\n  date: Date;\n  umpires?: string[];\n}\n\nexport interface ScoringEvent {\n  type: 'run' | 'extra' | 'wicket' | 'penalty';\n  runs: number;\n  extraType?: ExtraType;\n  dismissalType?: DismissalType;\n  commentary?: string;\n}\n\nexport type ExtraType = 'wide' | 'noball' | 'bye' | 'legbye' | 'penalty' | 'noball-bye' | 'noball-legbye';\n\nexport type DismissalType = \n  | 'bowled' \n  | 'caught' \n  | 'lbw' \n  | 'runOut' \n  | 'stumped' \n  | 'hitWicket' \n  | 'obstructingField' \n  | 'handledBall' \n  | 'timedOut' \n  | 'retiredHurt';\n\nexport interface MatchState {\n  match: Match;\n  canUndo: boolean;\n  undoHistory: ScoringEvent[];\n  currentOver: Ball[];\n  pendingActions: string[];\n}\n\nexport interface PlayerSelection {\n  team: string;\n  availablePlayers: Player[];\n  selectedPlayers: Player[];\n  requiredCount: number;\n  selectionType: 'playingXI' | 'openingBatsmen' | 'newBatsman' | 'bowler';\n}\n\n// Utility types for UI components\nexport interface ScoreboardData {\n  currentScore: string;\n  currentBatsmen: {\n    striker: { name: string; runs: number; balls: number; strikeRate: number };\n    nonStriker: { name: string; runs: number; balls: number; strikeRate: number };\n  };\n  currentBowler: {\n    name: string;\n    overs: string;\n    runs: number;\n    wickets: number;\n    economyRate: number;\n  };\n  recentOvers: string[];\n  currentOver: string[];\n  target?: number;\n  required?: { runs: number; balls: number; rate: number };\n}\n\nexport interface WagonWheelData {\n  batsman: string;\n  shots: Array<{\n    runs: number;\n    angle: number;\n    distance: number;\n    ballNumber: number;\n  }>;\n}\n\nexport interface PhaseStats {\n  runs: number;\n  balls: number;\n  wickets: number;\n  dots: number;\n  boundaries: {\n    fours: number;\n    sixes: number;\n  };\n  runRate: number;\n}\n\nexport interface Partnership {\n  batsmen: [string, string];\n  runs: number;\n  balls: number;\n  startOver: number;\n  endOver?: number;\n  isUnbroken: boolean;\n}\n\n\n\nexport interface PitchMapData {\n  bowler: string;\n  deliveries: Array<{\n    line: 'wide' | 'off' | 'middle' | 'leg' | 'down-leg';\n    length: 'bouncer' | 'short' | 'good' | 'full' | 'yorker';\n    runs: number;\n    isWicket: boolean;\n    speed?: number;\n    swing?: 'in' | 'out' | 'none';\n    spin?: 'turn-in' | 'turn-away' | 'none';\n    timestamp: Date;\n    batsman: string;\n  }>;\n}\n","size_bytes":5250},"src/utils/toast.ts":{"content":"import { toast } from 'sonner';\nimport { CRICKET_CONSTANTS } from '@/constants/cricket';\nimport { ValidationResult, errorUtils } from './validation';\n\n// Enhanced toast utilities with cricket-specific messaging\nexport const cricketToast = {\n  // Success messages\n  success: {\n    scoreUpdate: (runs: number, isExtra: boolean = false) => {\n      const message = isExtra \n        ? `${runs} extra${runs > 1 ? 's' : ''} added`\n        : runs === 0 \n          ? 'Dot ball' \n          : runs === 4 \n            ? 'FOUR! Boundary scored' \n            : runs === 6 \n              ? 'SIX! Maximum hit!' \n              : `${runs} run${runs > 1 ? 's' : ''} scored`;\n      \n      toast.success(message, {\n        duration: runs >= 4 ? CRICKET_CONSTANTS.BOUNDARY_ANIMATION_DURATION : CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    },\n\n    wicket: (dismissalType: string, playerName?: string) => {\n      const message = playerName \n        ? `${playerName} is out (${dismissalType})`\n        : `Wicket! ${dismissalType}`;\n      \n      toast.success(message, {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    matchSaved: () => {\n      toast.success('Match saved successfully', {\n        duration: CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    },\n\n    matchCompleted: (result: string) => {\n      toast.success(`Match Complete! ${result}`, {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    overCompleted: (overNumber: number) => {\n      toast.success(`Over ${overNumber} completed`, {\n        duration: CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    },\n\n    inningsCompleted: (inningsNumber: number) => {\n      toast.success(`Innings ${inningsNumber} completed`, {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    undoAction: () => {\n      toast.success('Last action undone', {\n        duration: CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    },\n\n    teamSaved: (teamName: string) => {\n      toast.success(`Team \"${teamName}\" saved successfully`, {\n        duration: CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    },\n\n    playerAdded: (playerName: string) => {\n      toast.success(`${playerName} added to team`, {\n        duration: CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    }\n  },\n\n  // Error messages\n  error: {\n    validation: (validation: ValidationResult) => {\n      const userFriendlyErrors = validation.errors.map(error => \n        errorUtils.createUserFriendlyError(error)\n      );\n      \n      toast.error(userFriendlyErrors.join('\\n'), {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    scoring: (message: string) => {\n      toast.error(`Scoring Error: ${message}`, {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    matchState: (message: string) => {\n      toast.error(`Match Error: ${message}`, {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    database: (operation: string) => {\n      toast.error(`Database Error: Failed to ${operation}. Please try again.`, {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    network: () => {\n      toast.error('Network Error: Please check your internet connection', {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    generic: (message: string) => {\n      toast.error(message, {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    }\n  },\n\n  // Warning messages\n  warning: {\n    validation: (validation: ValidationResult) => {\n      if (validation.warnings && validation.warnings.length > 0) {\n        toast.warning(validation.warnings.join('\\n'), {\n          duration: CRICKET_CONSTANTS.TOAST_DURATION,\n        });\n      }\n    },\n\n    powerplayEnding: () => {\n      toast.warning('Powerplay ending next over', {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    lastWicket: () => {\n      toast.warning('Last wicket! Innings will end with next dismissal', {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    freeHit: () => {\n      toast.warning('Free Hit! Batsman cannot be dismissed (except run out)', {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    oversRemaining: (overs: number) => {\n      if (overs <= 2) {\n        toast.warning(`Only ${overs} over${overs !== 1 ? 's' : ''} remaining!`, {\n          duration: CRICKET_CONSTANTS.TOAST_DURATION,\n        });\n      }\n    },\n\n    targetNear: (runsNeeded: number, ballsLeft: number) => {\n      if (runsNeeded <= 10 && ballsLeft <= 12) {\n        toast.warning(`${runsNeeded} needed from ${ballsLeft} balls`, {\n          duration: CRICKET_CONSTANTS.TOAST_DURATION,\n        });\n      }\n    }\n  },\n\n  // Info messages\n  info: {\n    matchStarted: () => {\n      toast.info('Match started! Good luck to both teams', {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    inningsBreak: () => {\n      toast.info('Innings break - Teams switching sides', {\n        duration: CRICKET_CONSTANTS.TOAST_DURATION,\n      });\n    },\n\n    bowlerChange: (newBowler: string) => {\n      toast.info(`${newBowler} is now bowling`, {\n        duration: CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    },\n\n    newBatsman: (playerName: string) => {\n      toast.info(`${playerName} comes to the crease`, {\n        duration: CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    },\n\n    strikeRotated: () => {\n      toast.info('Strike rotated', {\n        duration: 800,\n      });\n    },\n\n    matchPaused: () => {\n      toast.info('Match paused and saved', {\n        duration: CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    },\n\n    matchResumed: () => {\n      toast.info('Match resumed', {\n        duration: CRICKET_CONSTANTS.ANIMATION_DURATION,\n      });\n    }\n  },\n\n  // Loading messages\n  loading: {\n    savingMatch: () => {\n      return toast.loading('Saving match...', {\n        duration: Infinity,\n      });\n    },\n\n    loadingMatch: () => {\n      return toast.loading('Loading match...', {\n        duration: Infinity,\n      });\n    },\n\n    savingTeam: () => {\n      return toast.loading('Saving team...', {\n        duration: Infinity,\n      });\n    }\n  },\n\n  // Dismiss specific toast\n  dismiss: (toastId: string | number) => {\n    toast.dismiss(toastId);\n  },\n\n  // Dismiss all toasts\n  dismissAll: () => {\n    toast.dismiss();\n  }\n};\n\n// Haptic feedback for mobile devices\nexport const hapticFeedback = {\n  light: () => {\n    if ('vibrate' in navigator) {\n      navigator.vibrate(50);\n    }\n  },\n\n  medium: () => {\n    if ('vibrate' in navigator) {\n      navigator.vibrate(100);\n    }\n  },\n\n  heavy: () => {\n    if ('vibrate' in navigator) {\n      navigator.vibrate([100, 50, 100]);\n    }\n  },\n\n  boundary: () => {\n    if ('vibrate' in navigator) {\n      navigator.vibrate([200, 100, 200, 100, 200]);\n    }\n  },\n\n  wicket: () => {\n    if ('vibrate' in navigator) {\n      navigator.vibrate([300, 100, 300]);\n    }\n  }\n};\n\n// Combined feedback system\nexport const cricketFeedback = {\n  scoreUpdate: (runs: number, isExtra: boolean = false) => {\n    cricketToast.success.scoreUpdate(runs, isExtra);\n    \n    if (runs === 4 || runs === 6) {\n      hapticFeedback.boundary();\n    } else if (runs > 0) {\n      hapticFeedback.light();\n    }\n  },\n\n  wicket: (dismissalType: string, playerName?: string) => {\n    cricketToast.success.wicket(dismissalType, playerName);\n    hapticFeedback.wicket();\n  },\n\n  error: (message: string) => {\n    cricketToast.error.generic(message);\n    hapticFeedback.medium();\n  },\n\n  validation: (validation: ValidationResult) => {\n    if (!validation.isValid) {\n      cricketToast.error.validation(validation);\n      hapticFeedback.medium();\n    } else if (validation.warnings && validation.warnings.length > 0) {\n      cricketToast.warning.validation(validation);\n      hapticFeedback.light();\n    }\n  }\n};\n","size_bytes":7841},"src/utils/validation.ts":{"content":"import { Match, Innings, Player, Team } from '@/types/cricket';\nimport { CRICKET_CONSTANTS, cricketUtils } from '@/constants/cricket';\n\n// Validation result interface\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n}\n\n// Scoring action validation\nexport interface ScoringAction {\n  runs: number;\n  isExtra: boolean;\n  extraType?: string;\n  dismissalType?: string;\n}\n\nexport const validationUtils = {\n  // Validate scoring action\n  validateScoringAction: (action: ScoringAction, match: Match): ValidationResult => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check if match is complete\n    if (match.isComplete) {\n      errors.push(\"Cannot score on a completed match\");\n    }\n\n    // Check if match is live\n    if (!match.isLive) {\n      errors.push(\"Match is not currently live\");\n    }\n\n    // Validate run count\n    if (action.isExtra) {\n      if (action.runs < 1 || action.runs > CRICKET_CONSTANTS.MAX_EXTRAS_PER_BALL) {\n        errors.push(`Invalid extra runs: ${action.runs}. Must be between 1 and ${CRICKET_CONSTANTS.MAX_EXTRAS_PER_BALL}`);\n      }\n    } else {\n      if (action.runs < 0 || action.runs > CRICKET_CONSTANTS.MAX_RUNS_PER_BALL) {\n        errors.push(`Invalid runs: ${action.runs}. Must be between 0 and ${CRICKET_CONSTANTS.MAX_RUNS_PER_BALL}`);\n      }\n    }\n\n    // Validate current innings exists\n    const currentInnings = match.currentInnings === 1 ? match.innings.first : match.innings.second;\n    if (!currentInnings) {\n      errors.push(\"No active innings found\");\n    }\n\n    // Check if innings is complete\n    if (currentInnings?.isComplete) {\n      errors.push(\"Cannot score on completed innings\");\n    }\n\n    // Validate batsmen are selected\n    if (!currentInnings?.currentBatsmen.striker || !currentInnings?.currentBatsmen.nonStriker) {\n      errors.push(\"Both batsmen must be selected before scoring\");\n    }\n\n    // Validate bowler is selected (except for run outs)\n    if (!currentInnings?.currentBowler && action.dismissalType !== 'runOut') {\n      errors.push(\"Bowler must be selected before scoring\");\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  },\n\n  // Validate wicket action\n  validateWicketAction: (dismissalType: string, outBatsman: string, match: Match): ValidationResult => {\n    const errors: string[] = [];\n    const currentInnings = match.currentInnings === 1 ? match.innings.first : match.innings.second;\n\n    if (!currentInnings) {\n      errors.push(\"No active innings found\");\n      return { isValid: false, errors };\n    }\n\n    // Check if innings is complete\n    if (currentInnings.isComplete) {\n      errors.push(\"Cannot take wicket on completed innings\");\n    }\n\n    // Validate dismissal type\n    const validDismissalTypes = ['bowled', 'caught', 'lbw', 'runOut', 'stumped', 'hitWicket', 'retiredHurt'];\n    if (!validDismissalTypes.includes(dismissalType)) {\n      errors.push(`Invalid dismissal type: ${dismissalType}`);\n    }\n\n    // For run out, validate batsman selection\n    if (dismissalType === 'runOut' && !outBatsman) {\n      errors.push(\"Must select which batsman is run out\");\n    }\n\n    // Check if maximum wickets already fallen\n    const battingTeam = match.currentInnings === 1 \n      ? (match.battingFirst === match.team1?.name ? match.team1 : match.team2)\n      : (match.battingFirst === match.team1?.name ? match.team2 : match.team1);\n    \n    const maxWickets = cricketUtils.getMaxWickets(battingTeam?.playingXI?.length || 11);\n    \n    if (currentInnings.wickets >= maxWickets) {\n      errors.push(`All wickets have already fallen (${currentInnings.wickets}/${maxWickets})`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  },\n\n  // Validate match state\n  validateMatchState: (match: Match): ValidationResult => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Basic match validation\n    if (!match.id) {\n      errors.push(\"Match must have a valid ID\");\n    }\n\n    if (!match.team1 || !match.team2) {\n      errors.push(\"Both teams must be defined\");\n    }\n\n    if (match.team1?.name === match.team2?.name) {\n      errors.push(\"Teams must have different names\");\n    }\n\n    if (match.totalOvers < CRICKET_CONSTANTS.MIN_OVERS || match.totalOvers > CRICKET_CONSTANTS.MAX_OVERS) {\n      errors.push(`Invalid match overs: ${match.totalOvers}. Must be between ${CRICKET_CONSTANTS.MIN_OVERS} and ${CRICKET_CONSTANTS.MAX_OVERS}`);\n    }\n\n    // Validate team sizes\n    if (match.team1?.playingXI?.length !== CRICKET_CONSTANTS.MIN_TEAM_SIZE) {\n      warnings.push(`Team 1 has ${match.team1?.playingXI?.length} players, expected ${CRICKET_CONSTANTS.MIN_TEAM_SIZE}`);\n    }\n\n    if (match.team2?.playingXI?.length !== CRICKET_CONSTANTS.MIN_TEAM_SIZE) {\n      warnings.push(`Team 2 has ${match.team2?.playingXI?.length} players, expected ${CRICKET_CONSTANTS.MIN_TEAM_SIZE}`);\n    }\n\n    // Validate toss information\n    if (match.isLive && (!match.tossWinner || !match.tossDecision || !match.battingFirst)) {\n      errors.push(\"Toss information must be complete before starting match\");\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  },\n\n  // Validate innings state\n  validateInningsState: (innings: Innings, teamSize: number): ValidationResult => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check basic innings data\n    if (innings.score < 0) {\n      errors.push(\"Innings score cannot be negative\");\n    }\n\n    if (innings.wickets < 0) {\n      errors.push(\"Wickets cannot be negative\");\n    }\n\n    if (innings.overs < 0) {\n      errors.push(\"Overs cannot be negative\");\n    }\n\n    if (innings.balls < 0 || innings.balls >= CRICKET_CONSTANTS.BALLS_PER_OVER) {\n      errors.push(`Invalid balls count: ${innings.balls}. Must be between 0 and ${CRICKET_CONSTANTS.BALLS_PER_OVER - 1}`);\n    }\n\n    // Check wickets don't exceed team size\n    const maxWickets = cricketUtils.getMaxWickets(teamSize);\n    if (innings.wickets > maxWickets) {\n      errors.push(`Wickets (${innings.wickets}) cannot exceed maximum for team size (${maxWickets})`);\n    }\n\n    // Validate current players\n    if (!innings.currentBatsmen.striker) {\n      warnings.push(\"No striker selected\");\n    }\n\n    if (!innings.currentBatsmen.nonStriker) {\n      warnings.push(\"No non-striker selected\");\n    }\n\n    if (innings.currentBatsmen.striker === innings.currentBatsmen.nonStriker) {\n      errors.push(\"Striker and non-striker cannot be the same player\");\n    }\n\n    if (!innings.currentBowler) {\n      warnings.push(\"No bowler selected\");\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  },\n\n  // Validate player data\n  validatePlayer: (player: Player): ValidationResult => {\n    const errors: string[] = [];\n\n    if (!player.id) {\n      errors.push(\"Player must have a valid ID\");\n    }\n\n    if (!player.name || player.name.trim().length === 0) {\n      errors.push(\"Player must have a valid name\");\n    }\n\n    if (!['batsman', 'bowler', 'allrounder', 'wicketkeeper'].includes(player.role)) {\n      errors.push(`Invalid player role: ${player.role}`);\n    }\n\n    // Validate stats are not negative\n    if (player.battingStats.runs < 0) {\n      errors.push(\"Batting runs cannot be negative\");\n    }\n\n    if (player.battingStats.ballsFaced < 0) {\n      errors.push(\"Balls faced cannot be negative\");\n    }\n\n    if (player.bowlingStats.runs < 0) {\n      errors.push(\"Bowling runs cannot be negative\");\n    }\n\n    if (player.bowlingStats.wickets < 0) {\n      errors.push(\"Wickets cannot be negative\");\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  },\n\n  // Validate team data\n  validateTeam: (team: Team): ValidationResult => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    if (!team.id) {\n      errors.push(\"Team must have a valid ID\");\n    }\n\n    if (!team.name || team.name.trim().length === 0) {\n      errors.push(\"Team must have a valid name\");\n    }\n\n    if (!team.playingXI || team.playingXI.length === 0) {\n      errors.push(\"Team must have players in playing XI\");\n    }\n\n    if (team.playingXI && team.playingXI.length !== CRICKET_CONSTANTS.MIN_TEAM_SIZE) {\n      warnings.push(`Playing XI has ${team.playingXI.length} players, expected ${CRICKET_CONSTANTS.MIN_TEAM_SIZE}`);\n    }\n\n    // Validate each player\n    if (team.playingXI) {\n      team.playingXI.forEach((player, index) => {\n        const playerValidation = validationUtils.validatePlayer(player);\n        if (!playerValidation.isValid) {\n          errors.push(`Player ${index + 1}: ${playerValidation.errors.join(', ')}`);\n        }\n      });\n    }\n\n    // Check for duplicate player IDs\n    if (team.playingXI) {\n      const playerIds = team.playingXI.map(p => p.id);\n      const duplicates = playerIds.filter((id, index) => playerIds.indexOf(id) !== index);\n      if (duplicates.length > 0) {\n        errors.push(`Duplicate player IDs found: ${duplicates.join(', ')}`);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n};\n\n// Error formatting utilities\nexport const errorUtils = {\n  formatValidationErrors: (validation: ValidationResult): string => {\n    if (validation.isValid) return '';\n    \n    return validation.errors.join('\\n');\n  },\n\n  formatValidationWarnings: (validation: ValidationResult): string => {\n    if (!validation.warnings || validation.warnings.length === 0) return '';\n    \n    return validation.warnings.join('\\n');\n  },\n\n  createUserFriendlyError: (error: string): string => {\n    // Convert technical errors to user-friendly messages\n    const errorMappings: Record<string, string> = {\n      'Cannot score on a completed match': 'This match has already finished. You cannot add more runs.',\n      'Match is not currently live': 'Please start the match before scoring.',\n      'Both batsmen must be selected before scoring': 'Please select both opening batsmen to begin scoring.',\n      'Bowler must be selected before scoring': 'Please select a bowler to start the over.',\n      'All wickets have already fallen': 'The innings is complete - all batsmen are out.',\n      'Cannot take wicket on completed innings': 'This innings has already finished.',\n    };\n\n    return errorMappings[error] || error;\n  }\n};\n","size_bytes":10369},"src/components/scoring/ExtrasModal.tsx":{"content":"import React from 'react';\nimport Modal from '@/components/ui/Modal';\nimport { Button } from '@/components/ui/button';\n\ninterface ExtrasModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: (runs: number, extraType: string) => void;\n  extraType: 'wide' | 'noball' | 'bye' | 'legbye' | 'noball-bye' | 'noball-legbye';\n}\n\nconst ExtrasModal: React.FC<ExtrasModalProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  extraType\n}) => {\n  const getModalConfig = () => {\n    switch (extraType) {\n      case 'wide':\n        return {\n          title: 'Wide Ball',\n          emoji: '‚ÜîÔ∏è',\n          color: 'yellow',\n          description: 'Ball bowled too wide of the batsman',\n          options: [1, 2, 3, 4, 5],\n          formatLabel: (runs: number) => runs === 1 ? 'WD' : `WD+${runs - 1}`\n        };\n      case 'noball':\n        return {\n          title: 'No Ball',\n          emoji: 'üö´',\n          color: 'red',\n          description: 'Illegal delivery - Free hit next ball',\n          options: [1, 2, 3, 4, 5, 6, 7],\n          formatLabel: (runs: number) => runs === 1 ? 'NB' : `NB+${runs - 1}`\n        };\n      case 'bye':\n        return {\n          title: 'Byes',\n          emoji: 'üëã',\n          color: 'blue',\n          description: 'Runs scored without bat touching ball',\n          options: [1, 2, 3, 4],\n          formatLabel: (runs: number) => `${runs}B`\n        };\n      case 'legbye':\n        return {\n          title: 'Leg Byes',\n          emoji: 'ü¶µ',\n          color: 'purple',\n          description: 'Runs scored off the batsman\\'s body',\n          options: [1, 2, 3, 4],\n          formatLabel: (runs: number) => `${runs}LB`\n        };\n      case 'noball-bye':\n        return {\n          title: 'No Ball + Byes',\n          emoji: 'üö´üëã',\n          color: 'cyan',\n          description: 'No ball with additional bye runs',\n          options: [1, 2, 3, 4],\n          formatLabel: (runs: number) => `NB+${runs}B`\n        };\n      case 'noball-legbye':\n        return {\n          title: 'No Ball + Leg Byes',\n          emoji: 'üö´ü¶µ',\n          color: 'pink',\n          description: 'No ball with additional leg bye runs',\n          options: [1, 2, 3, 4],\n          formatLabel: (runs: number) => `NB+${runs}LB`\n        };\n      default:\n        return {\n          title: 'Extra',\n          emoji: '‚ûï',\n          color: 'gray',\n          description: 'Additional runs',\n          options: [1, 2, 3, 4],\n          formatLabel: (runs: number) => `${runs}`\n        };\n    }\n  };\n\n  const config = getModalConfig();\n\n  const getColorClasses = (color: string) => {\n    const colorMap = {\n      yellow: 'bg-yellow-600/20 hover:bg-yellow-600/30 text-yellow-400',\n      red: 'bg-red-600/20 hover:bg-red-600/30 text-red-400',\n      blue: 'bg-blue-600/20 hover:bg-blue-600/30 text-blue-400',\n      purple: 'bg-purple-600/20 hover:bg-purple-600/30 text-purple-400',\n      cyan: 'bg-cyan-600/20 hover:bg-cyan-600/30 text-cyan-400',\n      pink: 'bg-pink-600/20 hover:bg-pink-600/30 text-pink-400',\n      gray: 'bg-slate-600/20 hover:bg-slate-600/30 text-slate-400'\n    };\n    return colorMap[color as keyof typeof colorMap] || colorMap.gray;\n  };\n\n  const handleConfirm = (runs: number) => {\n    // Calculate total runs based on extra type\n    let totalRuns = runs;\n    if (extraType === 'noball' || extraType === 'noball-bye' || extraType === 'noball-legbye') {\n      totalRuns = runs + 1; // No ball penalty + additional runs\n    }\n    \n    onConfirm(totalRuns, extraType);\n    onClose();\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={`${config.emoji} ${config.title}`}\n      size=\"sm\"\n    >\n      <div className=\"space-y-6\">\n        {/* Description */}\n        <div className=\"text-center\">\n          <p className=\"text-sm text-slate-300 mb-4\">\n            {config.description}\n          </p>\n        </div>\n\n        {/* Run Options */}\n        <div>\n          <h4 className=\"text-sm font-medium mb-3 text-slate-300 text-center\">\n            Select Runs\n          </h4>\n          <div className=\"grid grid-cols-2 gap-3\">\n            {config.options.map((runs) => (\n              <Button\n                key={runs}\n                onClick={() => handleConfirm(runs)}\n                className={`h-12 text-lg font-semibold ${getColorClasses(config.color)}`}\n              >\n                {config.formatLabel(runs)}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Special Notes */}\n        {extraType === 'noball' && (\n          <div className=\"p-3 bg-orange-600/10 border border-orange-500/20 rounded-lg\">\n            <p className=\"text-xs text-orange-300 text-center\">\n              ‚ö†Ô∏è Free hit will be awarded for the next delivery\n            </p>\n          </div>\n        )}\n\n        {(extraType === 'noball-bye' || extraType === 'noball-legbye') && (\n          <div className=\"p-3 bg-orange-600/10 border border-orange-500/20 rounded-lg\">\n            <p className=\"text-xs text-orange-300 text-center\">\n              ‚ö†Ô∏è Includes 1 run penalty for no ball + additional runs\n            </p>\n          </div>\n        )}\n\n        {/* Cancel Button */}\n        <Button\n          onClick={onClose}\n          className=\"w-full bg-slate-600/20 hover:bg-slate-600/30\"\n        >\n          Cancel\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ExtrasModal;\n","size_bytes":5380},"src/components/scoring/MatchStatistics.tsx":{"content":"import React, { useMemo } from 'react';\nimport { Match, Innings, Player } from '@/types/cricket';\nimport { cricketUtils, CRICKET_CONSTANTS } from '@/constants/cricket';\nimport GlassCard from '../GlassCard';\nimport { Button } from '../ui/button';\nimport { TrendingUp, Target, Clock, Users } from 'lucide-react';\n\ninterface MatchStatisticsProps {\n  match: Match;\n  currentInnings: Innings | null;\n  battingTeam: any;\n  bowlingTeam: any;\n  onShowScorecard: () => void;\n}\n\nconst MatchStatistics: React.FC<MatchStatisticsProps> = ({\n  match,\n  currentInnings,\n  battingTeam,\n  bowlingTeam,\n  onShowScorecard\n}) => {\n  const statistics = useMemo(() => {\n    if (!currentInnings || !battingTeam) return null;\n\n    // Safely calculate current run rate with NaN protection\n    const currentRunRate = cricketUtils.calculateRunRate(\n      currentInnings.score || 0,\n      currentInnings.overs || 0,\n      currentInnings.balls || 0\n    );\n\n    const ballsRemaining = Math.max(0, (match.totalOvers * CRICKET_CONSTANTS.BALLS_PER_OVER) - \n                          ((currentInnings.overs || 0) * CRICKET_CONSTANTS.BALLS_PER_OVER + (currentInnings.balls || 0)));\n\n    // Protect against NaN in projected score calculation\n    const projectedScore = match.currentInnings === 1 \n      ? (isNaN(currentRunRate) || !isFinite(currentRunRate) ? (currentInnings.score || 0) : Math.round(currentRunRate * match.totalOvers))\n      : (currentInnings.score || 0);\n\n    // Safely calculate required run rate with NaN protection\n    const requiredRunRate = match.currentInnings === 2 && match.innings.first && match.innings.first.score !== undefined\n      ? cricketUtils.calculateRequiredRunRate(\n          match.innings.first.score + 1,\n          currentInnings.score || 0,\n          Math.floor(ballsRemaining / CRICKET_CONSTANTS.BALLS_PER_OVER),\n          ballsRemaining % CRICKET_CONSTANTS.BALLS_PER_OVER\n        )\n      : 0;\n\n    // Calculate phase statistics\n    const powerplayOvers = match.matchType === 'T20' \n      ? CRICKET_CONSTANTS.T20_POWERPLAY_OVERS \n      : CRICKET_CONSTANTS.ODI_POWERPLAY_OVERS;\n    \n    const isPowerplay = currentInnings.overs < powerplayOvers;\n    const isMiddleOvers = currentInnings.overs >= powerplayOvers && currentInnings.overs < (match.totalOvers - 4);\n    const isDeathOvers = currentInnings.overs >= (match.totalOvers - 4);\n\n    // Get top performers with proper null/undefined checks\n    const topBatsman = battingTeam.playingXI && Array.isArray(battingTeam.playingXI)\n      ? battingTeam.playingXI\n          .filter((p: Player) => p && p.battingStats && (p.battingStats.ballsFaced || 0) > 0)\n          .sort((a: Player, b: Player) => (b.battingStats?.runs || 0) - (a.battingStats?.runs || 0))[0]\n      : null;\n\n    const topBowler = bowlingTeam && bowlingTeam.playingXI && Array.isArray(bowlingTeam.playingXI)\n      ? bowlingTeam.playingXI\n          .filter((p: Player) => p && p.bowlingStats && ((p.bowlingStats.overs || 0) > 0 || (p.bowlingStats.balls || 0) > 0))\n          .sort((a: Player, b: Player) => {\n            // Sort by wickets first, then by economy rate\n            const aWickets = a.bowlingStats?.wickets || 0;\n            const bWickets = b.bowlingStats?.wickets || 0;\n            if (bWickets !== aWickets) {\n              return bWickets - aWickets;\n            }\n            const aEconomy = a.bowlingStats?.economyRate || 0;\n            const bEconomy = b.bowlingStats?.economyRate || 0;\n            // Handle NaN economy rates\n            if (isNaN(aEconomy) && isNaN(bEconomy)) return 0;\n            if (isNaN(aEconomy)) return 1;\n            if (isNaN(bEconomy)) return -1;\n            return aEconomy - bEconomy;\n          })[0]\n      : null;\n\n    return {\n      currentRunRate: isNaN(currentRunRate) || !isFinite(currentRunRate) ? 0 : currentRunRate,\n      ballsRemaining: Math.max(0, ballsRemaining),\n      projectedScore: isNaN(projectedScore) ? (currentInnings.score || 0) : projectedScore,\n      requiredRunRate: isNaN(requiredRunRate) || !isFinite(requiredRunRate) ? 0 : requiredRunRate,\n      isPowerplay,\n      isMiddleOvers,\n      isDeathOvers,\n      topBatsman,\n      topBowler,\n      wicketsRemaining: Math.max(0, cricketUtils.getMaxWickets(battingTeam.playingXI?.length || 11) - (currentInnings.wickets || 0))\n    };\n  }, [match, currentInnings, battingTeam, bowlingTeam]);\n\n  if (!statistics || !currentInnings) {\n    return null;\n  }\n\n  const getPhaseColor = () => {\n    if (statistics.isPowerplay) return 'text-purple-400';\n    if (statistics.isDeathOvers) return 'text-red-400';\n    return 'text-blue-400';\n  };\n\n  const getPhaseLabel = () => {\n    if (statistics.isPowerplay) return 'Powerplay';\n    if (statistics.isDeathOvers) return 'Death Overs';\n    return 'Middle Overs';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Match Phase & Key Stats */}\n      <GlassCard className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gradient-primary\">Match Statistics</h3>\n          <span className={`px-3 py-1 rounded-full text-sm font-medium ${getPhaseColor()} bg-current bg-opacity-10`}>\n            {getPhaseLabel()}\n          </span>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          {/* Current Run Rate */}\n          <div className=\"flex items-center gap-3\">\n            <TrendingUp className=\"h-5 w-5 text-blue-400\" />\n            <div>\n              <div className=\"text-sm text-slate-400\">Run Rate</div>\n              <div className=\"text-lg font-semibold text-white\">\n                {statistics.currentRunRate.toFixed(2)}\n              </div>\n            </div>\n          </div>\n\n          {/* Projected/Target */}\n          <div className=\"flex items-center gap-3\">\n            <Target className=\"h-5 w-5 text-green-400\" />\n            <div>\n              <div className=\"text-sm text-slate-400\">\n                {match.currentInnings === 1 ? 'Projected' : 'Target'}\n              </div>\n              <div className=\"text-lg font-semibold text-white\">\n                {match.currentInnings === 1 \n                  ? statistics.projectedScore \n                  : match.innings.first?.score! + 1\n                }\n              </div>\n            </div>\n          </div>\n\n          {/* Balls Remaining */}\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"h-5 w-5 text-orange-400\" />\n            <div>\n              <div className=\"text-sm text-slate-400\">Balls Left</div>\n              <div className=\"text-lg font-semibold text-white\">\n                {statistics.ballsRemaining}\n              </div>\n            </div>\n          </div>\n\n          {/* Wickets Remaining */}\n          <div className=\"flex items-center gap-3\">\n            <Users className=\"h-5 w-5 text-red-400\" />\n            <div>\n              <div className=\"text-sm text-slate-400\">Wickets Left</div>\n              <div className=\"text-lg font-semibold text-white\">\n                {statistics.wicketsRemaining}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Required Run Rate (Second Innings) */}\n        {match.currentInnings === 2 && statistics.requiredRunRate > 0 && (\n          <div className=\"mt-4 p-3 bg-orange-600/10 border border-orange-500/20 rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-orange-300\">Required Run Rate</span>\n              <span className={`text-lg font-semibold ${\n                statistics.requiredRunRate > 12 ? 'text-red-400' : \n                statistics.requiredRunRate > 8 ? 'text-orange-400' : 'text-green-400'\n              }`}>\n                {statistics.requiredRunRate.toFixed(2)}\n              </span>\n            </div>\n            <div className=\"text-xs text-orange-400 mt-1\">\n              {statistics.requiredRunRate > 12 \n                ? 'üî• Very difficult chase' \n                : statistics.requiredRunRate > 8 \n                  ? '‚ö†Ô∏è Challenging chase' \n                  : '‚úÖ Manageable chase'\n              }\n            </div>\n          </div>\n        )}\n      </GlassCard>\n\n      {/* Top Performers */}\n      <GlassCard className=\"p-4\">\n        <h3 className=\"text-lg font-semibold mb-4 text-gradient-primary\">Top Performers</h3>\n        \n        <div className=\"space-y-3\">\n          {/* Top Batsman */}\n          {statistics.topBatsman && (\n            <div className=\"flex items-center justify-between p-3 bg-green-600/10 border border-green-500/20 rounded-lg\">\n              <div>\n                <div className=\"font-medium text-white\">{statistics.topBatsman.name}</div>\n                <div className=\"text-sm text-green-400\">Top Scorer</div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-lg font-semibold text-white\">\n                  {statistics.topBatsman.battingStats?.runs || 0}*\n                </div>\n                <div className=\"text-xs text-slate-400\">\n                  ({statistics.topBatsman.battingStats?.ballsFaced || 0} balls)\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Top Bowler */}\n          {statistics.topBowler && (\n            <div className=\"flex items-center justify-between p-3 bg-red-600/10 border border-red-500/20 rounded-lg\">\n              <div>\n                <div className=\"font-medium text-white\">{statistics.topBowler.name}</div>\n                <div className=\"text-sm text-red-400\">Best Bowler</div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-lg font-semibold text-white\">\n                  {statistics.topBowler.bowlingStats?.wickets || 0}/{statistics.topBowler.bowlingStats?.runs || 0}\n                </div>\n                <div className=\"text-xs text-slate-400\">\n                  ({cricketUtils.formatOvers(statistics.topBowler.bowlingStats?.overs || 0, statistics.topBowler.bowlingStats?.balls || 0)} ov)\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </GlassCard>\n\n      {/* Quick Actions */}\n      <GlassCard className=\"p-4\">\n        <h3 className=\"text-lg font-semibold mb-4 text-gradient-primary\">Quick Actions</h3>\n        \n        <div className=\"space-y-2\">\n          <Button\n            onClick={onShowScorecard}\n            className=\"w-full h-10 bg-blue-600/20 hover:bg-blue-600/30 text-blue-400\"\n          >\n            üìä View Full Scorecard\n          </Button>\n          \n          <Button\n            onClick={() => {/* TODO: Implement match summary */}}\n            className=\"w-full h-10 bg-purple-600/20 hover:bg-purple-600/30 text-purple-400\"\n          >\n            üìà Match Summary\n          </Button>\n        </div>\n      </GlassCard>\n    </div>\n  );\n};\n\nexport default MatchStatistics;\n","size_bytes":10844},"src/components/scoring/NewBatsmanModal.tsx":{"content":"import React, { useState, useMemo } from 'react';\nimport Modal from '../ui/Modal';\nimport { Button } from '../ui/button';\nimport { Player } from '@/types/cricket';\n\ninterface NewBatsmanModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: (newBatsmanId: string) => void;\n  availablePlayers: Player[];\n  currentBatsmen: { striker: string; nonStriker: string };\n  dismissedBatsmanId?: string;\n}\n\nconst NewBatsmanModal: React.FC<NewBatsmanModalProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  availablePlayers,\n  currentBatsmen,\n  dismissedBatsmanId\n}) => {\n  const [selectedBatsman, setSelectedBatsman] = useState<string>('');\n\n  // Filter available players - exclude current batsmen and already dismissed players\n  const eligiblePlayers = useMemo(() => {\n    return availablePlayers.filter(player => {\n      const isCurrentBatsman = player.id === currentBatsmen.striker || player.id === currentBatsmen.nonStriker;\n      const isOut = player.battingStats.isOut && !player.battingStats.isRetiredHurt;\n      \n      return !isCurrentBatsman && !isOut;\n    });\n  }, [availablePlayers, currentBatsmen]);\n\n  const handleConfirm = () => {\n    if (selectedBatsman) {\n      onConfirm(selectedBatsman);\n      handleClose();\n    }\n  };\n\n  const handleClose = () => {\n    setSelectedBatsman('');\n    onClose();\n  };\n\n  const dismissedPlayer = availablePlayers.find(p => p.id === dismissedBatsmanId);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      title=\"üèè New Batsman\"\n      size=\"md\"\n      closeOnOverlayClick={false}\n      closeOnEscape={false}\n    >\n      <div className=\"space-y-6\">\n        {/* Dismissal Info */}\n        {dismissedPlayer && (\n          <div className=\"p-4 bg-red-600/10 border border-red-500/20 rounded-lg\">\n            <p className=\"text-sm text-red-300\">\n              <span className=\"font-medium\">{dismissedPlayer.name}</span> is out\n              {dismissedPlayer.battingStats.dismissalType && (\n                <span> ({dismissedPlayer.battingStats.dismissalType})</span>\n              )}\n            </p>\n          </div>\n        )}\n\n        {/* Player Selection */}\n        <div>\n          <h4 className=\"text-sm font-medium mb-3 text-slate-300\">\n            Select New Batsman ({eligiblePlayers.length} available)\n          </h4>\n          \n          {eligiblePlayers.length === 0 ? (\n            <div className=\"p-4 bg-yellow-600/10 border border-yellow-500/20 rounded-lg\">\n              <p className=\"text-sm text-yellow-300\">\n                No eligible players available. All batsmen are either out or currently batting.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {eligiblePlayers.map((player) => (\n                <Button\n                  key={player.id}\n                  onClick={() => setSelectedBatsman(player.id)}\n                  className={`w-full h-16 text-left px-4 ${\n                    selectedBatsman === player.id\n                      ? 'bg-green-600/30 border-green-500/50 text-green-300'\n                      : 'bg-slate-600/20 hover:bg-slate-600/30'\n                  }`}\n                >\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-medium\">{player.name}</span>\n                    <div className=\"flex items-center gap-4 text-xs text-slate-400\">\n                      <span>{player.role}</span>\n                      <span>\n                        {player.battingStats.runs} runs \n                        ({player.battingStats.ballsFaced} balls)\n                      </span>\n                      {player.battingStats.strikeRate > 0 && (\n                        <span>SR: {player.battingStats.strikeRate.toFixed(1)}</span>\n                      )}\n                    </div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-3\">\n          <Button \n            onClick={handleConfirm} \n            disabled={!selectedBatsman || eligiblePlayers.length === 0}\n            className=\"flex-1 bg-green-600/20 hover:bg-green-600/30 text-green-400 disabled:opacity-50\"\n          >\n            Confirm Selection\n          </Button>\n          \n          {/* Only show cancel if there are no eligible players (innings would end) */}\n          {eligiblePlayers.length === 0 && (\n            <Button \n              onClick={handleClose}\n              className=\"flex-1 bg-slate-600/20 hover:bg-slate-600/30\"\n            >\n              End Innings\n            </Button>\n          )}\n        </div>\n\n        {/* Help Text */}\n        <div className=\"text-xs text-slate-400 text-center\">\n          {eligiblePlayers.length > 0 \n            ? \"Select a batsman to continue the innings\"\n            : \"No more batsmen available - innings will end\"\n          }\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default NewBatsmanModal;\n","size_bytes":4987},"src/components/scoring/QuickScoring.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport GlassCard from '../GlassCard';\n\ninterface QuickScoringProps {\n  onScore: (runs: number) => void;\n  onWicket: () => void;\n  onExtra: (extraType: string) => void;\n  freeHit: boolean;\n  disabled?: boolean;\n}\n\nconst QuickScoring: React.FC<QuickScoringProps> = ({\n  onScore,\n  onWicket,\n  onExtra,\n  freeHit,\n  disabled = false\n}) => {\n  const runButtons = [0, 1, 2, 3, 4, 6];\n  const extraButtons = [\n    { type: 'wide', label: 'Wide', color: 'yellow' },\n    { type: 'noball', label: 'No Ball', color: 'red' },\n    { type: 'bye', label: 'Bye', color: 'blue' },\n    { type: 'legbye', label: 'Leg Bye', color: 'purple' },\n  ];\n\n  const getRunButtonStyle = (runs: number) => {\n    if (runs === 0) {\n      return 'bg-slate-600/20 hover:bg-slate-600/30 text-slate-300';\n    } else if (runs === 1 || runs === 2 || runs === 3) {\n      return 'bg-blue-600/20 hover:bg-blue-600/30 text-blue-400';\n    } else if (runs === 4) {\n      return 'bg-green-600/20 hover:bg-green-600/30 text-green-400';\n    } else if (runs === 6) {\n      return 'bg-purple-600/20 hover:bg-purple-600/30 text-purple-400';\n    }\n    return 'bg-slate-600/20 hover:bg-slate-600/30 text-slate-300';\n  };\n\n  const getExtraButtonStyle = (color: string) => {\n    const colorMap = {\n      yellow: 'bg-yellow-600/20 hover:bg-yellow-600/30 text-yellow-400',\n      red: 'bg-red-600/20 hover:bg-red-600/30 text-red-400',\n      blue: 'bg-blue-600/20 hover:bg-blue-600/30 text-blue-400',\n      purple: 'bg-purple-600/20 hover:bg-purple-600/30 text-purple-400',\n    };\n    return colorMap[color as keyof typeof colorMap] || 'bg-slate-600/20 hover:bg-slate-600/30 text-slate-400';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Free Hit Indicator */}\n      {freeHit && (\n        <div className=\"p-3 bg-orange-600/20 border border-orange-500/50 rounded-lg text-center\">\n          <span className=\"text-orange-400 font-semibold\">üéØ FREE HIT</span>\n          <p className=\"text-xs text-orange-300 mt-1\">\n            Batsman cannot be dismissed (except run out)\n          </p>\n        </div>\n      )}\n\n      {/* Run Scoring Buttons */}\n      <GlassCard className=\"p-3 sm:p-4\">\n        <h3 className=\"text-base sm:text-lg font-semibold mb-3 sm:mb-4 text-gradient-primary text-center\">\n          Quick Scoring\n        </h3>\n        \n        <div className=\"grid grid-cols-3 gap-2 sm:gap-3 mb-3 sm:mb-4\">\n          {runButtons.map((runs) => (\n            <Button\n              key={runs}\n              onClick={() => onScore(runs)}\n              disabled={disabled}\n              className={`min-h-[48px] h-12 sm:h-14 text-lg sm:text-xl font-bold ${getRunButtonStyle(runs)} disabled:opacity-50 active:scale-95 transition-transform`}\n              aria-label={`Score ${runs} run${runs !== 1 ? 's' : ''}`}\n            >\n              {runs}\n            </Button>\n          ))}\n        </div>\n\n        {/* Wicket Button */}\n        <Button\n          onClick={onWicket}\n          disabled={disabled}\n          className=\"w-full min-h-[48px] h-12 sm:h-14 text-lg sm:text-xl font-bold bg-red-600/20 hover:bg-red-600/30 text-red-400 disabled:opacity-50 mb-3 sm:mb-4 active:scale-95 transition-transform\"\n          aria-label=\"Record a wicket\"\n        >\n          OUT\n        </Button>\n      </GlassCard>\n\n      {/* Extras Buttons */}\n      <GlassCard className=\"p-3 sm:p-4\">\n        <h3 className=\"text-base sm:text-lg font-semibold mb-3 sm:mb-4 text-gradient-primary text-center\">\n          Extras\n        </h3>\n        \n        <div className=\"grid grid-cols-2 gap-2 sm:gap-3\">\n          {extraButtons.map(({ type, label, color }) => (\n            <Button\n              key={type}\n              onClick={() => onExtra(type)}\n              disabled={disabled}\n              className={`min-h-[44px] h-10 sm:h-12 text-xs sm:text-sm font-semibold ${getExtraButtonStyle(color)} disabled:opacity-50 active:scale-95 transition-transform`}\n              aria-label={`Record ${label.toLowerCase()}`}\n            >\n              {label}\n            </Button>\n          ))}\n        </div>\n\n        {/* Additional Extras Row */}\n        <div className=\"grid grid-cols-2 gap-2 sm:gap-3 mt-2 sm:mt-3\">\n          <Button\n            onClick={() => onExtra('noball-bye')}\n            disabled={disabled}\n            className=\"min-h-[44px] h-10 sm:h-12 text-xs sm:text-sm font-semibold bg-cyan-600/20 hover:bg-cyan-600/30 text-cyan-400 disabled:opacity-50 active:scale-95 transition-transform\"\n            aria-label=\"Record no ball with byes\"\n          >\n            NB + Bye\n          </Button>\n          <Button\n            onClick={() => onExtra('noball-legbye')}\n            disabled={disabled}\n            className=\"min-h-[44px] h-10 sm:h-12 text-xs sm:text-sm font-semibold bg-pink-600/20 hover:bg-pink-600/30 text-pink-400 disabled:opacity-50 active:scale-95 transition-transform\"\n            aria-label=\"Record no ball with leg byes\"\n          >\n            NB + LB\n          </Button>\n        </div>\n      </GlassCard>\n\n      {/* Keyboard Shortcuts Info - Hidden on mobile */}\n      <div className=\"hidden sm:block text-xs text-slate-400 text-center space-y-1\">\n        <p>üí° Keyboard shortcuts:</p>\n        <p>0-6: Score runs ‚Ä¢ W: Wicket ‚Ä¢ Space: Dot ball</p>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickScoring;\n","size_bytes":5355},"src/components/scoring/Scoreboard.tsx":{"content":"import React from 'react';\nimport { Match, Innings, Player } from '@/types/cricket';\nimport { cricketUtils } from '@/constants/cricket';\nimport GlassCard from '../GlassCard';\n\ninterface ScoreboardProps {\n  match: Match;\n  currentInnings: Innings | null;\n  battingTeam: any;\n  bowlingTeam: any;\n  currentBatsmen: { striker: Player; nonStriker: Player } | null;\n  currentBowler: Player | null;\n}\n\nconst Scoreboard: React.FC<ScoreboardProps> = ({\n  match,\n  currentInnings,\n  battingTeam,\n  bowlingTeam,\n  currentBatsmen,\n  currentBowler\n}) => {\n  if (!currentInnings || !battingTeam || !bowlingTeam) {\n    return (\n      <GlassCard className=\"p-6\">\n        <div className=\"text-center text-slate-400\">\n          Loading match data...\n        </div>\n      </GlassCard>\n    );\n  }\n\n  const currentRunRate = cricketUtils.calculateRunRate(\n    currentInnings.score,\n    currentInnings.overs,\n    currentInnings.balls\n  );\n\n  const requiredRunRate = match.currentInnings === 2 && match.innings.first\n    ? cricketUtils.calculateRequiredRunRate(\n        match.innings.first.score + 1,\n        currentInnings.score,\n        match.totalOvers - currentInnings.overs,\n        6 - currentInnings.balls\n      )\n    : 0;\n\n  const target = match.currentInnings === 2 && match.innings.first\n    ? match.innings.first.score + 1\n    : undefined;\n\n  const runsNeeded = target ? target - currentInnings.score : undefined;\n\n  return (\n    <GlassCard className=\"p-6\">\n      <div className=\"space-y-6\">\n        {/* Main Score Display */}\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center gap-4 mb-2\">\n            <h2 className=\"text-3xl font-bold text-gradient-primary\">\n              {battingTeam.name}\n            </h2>\n            <div className=\"text-4xl font-bold text-white\">\n              {currentInnings.score}/{currentInnings.wickets}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-center gap-6 text-lg text-slate-300\">\n            <span>Overs: {cricketUtils.formatOvers(currentInnings.overs, currentInnings.balls)}</span>\n            <span>Run Rate: {currentRunRate.toFixed(2)}</span>\n            {target && (\n              <>\n                <span>Target: {target}</span>\n                <span className={runsNeeded! <= 0 ? 'text-green-400' : 'text-orange-400'}>\n                  Need: {Math.max(0, runsNeeded!)}\n                </span>\n                {requiredRunRate > 0 && (\n                  <span className={requiredRunRate > 12 ? 'text-red-400' : 'text-blue-400'}>\n                    RRR: {requiredRunRate.toFixed(2)}\n                  </span>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Current Batsmen */}\n        {currentBatsmen && (\n          <div className=\"grid grid-cols-2 gap-4\">\n            {/* Striker */}\n            <div className=\"p-4 bg-green-600/10 border border-green-500/20 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-green-400\">Striker *</span>\n                <span className=\"text-xs text-slate-400\">On Strike</span>\n              </div>\n              <div className=\"font-semibold text-white mb-1\">\n                {currentBatsmen.striker.name}\n              </div>\n              <div className=\"flex items-center gap-4 text-sm text-slate-300\">\n                <span>{currentBatsmen.striker.battingStats.runs} runs</span>\n                <span>({currentBatsmen.striker.battingStats.ballsFaced} balls)</span>\n                {currentBatsmen.striker.battingStats.strikeRate > 0 && (\n                  <span>SR: {currentBatsmen.striker.battingStats.strikeRate.toFixed(1)}</span>\n                )}\n              </div>\n              <div className=\"flex items-center gap-2 mt-2 text-xs\">\n                {currentBatsmen.striker.battingStats.fours > 0 && (\n                  <span className=\"px-2 py-1 bg-blue-600/20 text-blue-400 rounded\">\n                    4s: {currentBatsmen.striker.battingStats.fours}\n                  </span>\n                )}\n                {currentBatsmen.striker.battingStats.sixes > 0 && (\n                  <span className=\"px-2 py-1 bg-purple-600/20 text-purple-400 rounded\">\n                    6s: {currentBatsmen.striker.battingStats.sixes}\n                  </span>\n                )}\n              </div>\n            </div>\n\n            {/* Non-Striker */}\n            <div className=\"p-4 bg-slate-600/10 border border-slate-500/20 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-slate-400\">Non-Striker</span>\n                <span className=\"text-xs text-slate-500\">Off Strike</span>\n              </div>\n              <div className=\"font-semibold text-white mb-1\">\n                {currentBatsmen.nonStriker.name}\n              </div>\n              <div className=\"flex items-center gap-4 text-sm text-slate-300\">\n                <span>{currentBatsmen.nonStriker.battingStats.runs} runs</span>\n                <span>({currentBatsmen.nonStriker.battingStats.ballsFaced} balls)</span>\n                {currentBatsmen.nonStriker.battingStats.strikeRate > 0 && (\n                  <span>SR: {currentBatsmen.nonStriker.battingStats.strikeRate.toFixed(1)}</span>\n                )}\n              </div>\n              <div className=\"flex items-center gap-2 mt-2 text-xs\">\n                {currentBatsmen.nonStriker.battingStats.fours > 0 && (\n                  <span className=\"px-2 py-1 bg-blue-600/20 text-blue-400 rounded\">\n                    4s: {currentBatsmen.nonStriker.battingStats.fours}\n                  </span>\n                )}\n                {currentBatsmen.nonStriker.battingStats.sixes > 0 && (\n                  <span className=\"px-2 py-1 bg-purple-600/20 text-purple-400 rounded\">\n                    6s: {currentBatsmen.nonStriker.battingStats.sixes}\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Current Bowler */}\n        {currentBowler && (\n          <div className=\"p-4 bg-red-600/10 border border-red-500/20 rounded-lg\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium text-red-400\">Current Bowler</span>\n              <span className=\"text-xs text-slate-400\">{bowlingTeam.name}</span>\n            </div>\n            <div className=\"font-semibold text-white mb-1\">\n              {currentBowler.name}\n            </div>\n            <div className=\"flex items-center gap-4 text-sm text-slate-300\">\n              <span>\n                {cricketUtils.formatOvers(currentBowler.bowlingStats.overs, currentBowler.bowlingStats.balls)} overs\n              </span>\n              <span>{currentBowler.bowlingStats.runs} runs</span>\n              <span>{currentBowler.bowlingStats.wickets} wickets</span>\n              {currentBowler.bowlingStats.economyRate > 0 && (\n                <span>Econ: {currentBowler.bowlingStats.economyRate.toFixed(2)}</span>\n              )}\n            </div>\n            {(currentBowler.bowlingStats.wides > 0 || currentBowler.bowlingStats.noBalls > 0) && (\n              <div className=\"flex items-center gap-2 mt-2 text-xs\">\n                {currentBowler.bowlingStats.wides > 0 && (\n                  <span className=\"px-2 py-1 bg-yellow-600/20 text-yellow-400 rounded\">\n                    Wides: {currentBowler.bowlingStats.wides}\n                  </span>\n                )}\n                {currentBowler.bowlingStats.noBalls > 0 && (\n                  <span className=\"px-2 py-1 bg-red-600/20 text-red-400 rounded\">\n                    No Balls: {currentBowler.bowlingStats.noBalls}\n                  </span>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Match Status Indicators */}\n        <div className=\"flex items-center justify-center gap-4 text-sm\">\n          {match.currentInnings === 1 && (\n            <span className=\"px-3 py-1 bg-blue-600/20 text-blue-400 rounded-full\">\n              First Innings\n            </span>\n          )}\n          {match.currentInnings === 2 && (\n            <span className=\"px-3 py-1 bg-orange-600/20 text-orange-400 rounded-full\">\n              Second Innings - Chasing {match.innings.first?.score! + 1}\n            </span>\n          )}\n          \n          {cricketUtils.isPowerplayActive(currentInnings.overs, match.matchType || 'T20') && (\n            <span className=\"px-3 py-1 bg-purple-600/20 text-purple-400 rounded-full\">\n              Powerplay\n            </span>\n          )}\n          \n          {currentInnings.overs >= match.totalOvers - 2 && (\n            <span className=\"px-3 py-1 bg-red-600/20 text-red-400 rounded-full\">\n              Death Overs\n            </span>\n          )}\n        </div>\n      </div>\n    </GlassCard>\n  );\n};\n\nexport default Scoreboard;\n","size_bytes":8973},"src/components/scoring/WicketModal.tsx":{"content":"import React, { useState } from 'react';\nimport Modal from '@/components/ui/Modal';\nimport { Button } from '@/components/ui/button';\nimport { Player } from '@/types/cricket';\n\ninterface WicketModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: (dismissalType: string, outBatsman?: string) => void;\n  currentBatsmen: { striker: Player; nonStriker: Player } | null;\n}\n\ntype DismissalType = 'bowled' | 'lbw' | 'caught' | 'hitWicket' | 'runOut' | 'stumped';\n\nconst WicketModal: React.FC<WicketModalProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  currentBatsmen\n}) => {\n  const [selectedDismissalType, setSelectedDismissalType] = useState<DismissalType>('bowled');\n  const [outBatsman, setOutBatsman] = useState<string>('');\n\n  const dismissalOptions = [\n    { type: 'bowled', emoji: 'üéØ', label: 'Bowled' },\n    { type: 'caught', emoji: 'ü§≤', label: 'Caught' },\n    { type: 'lbw', emoji: 'ü¶µ', label: 'LBW' },\n    { type: 'stumped', emoji: 'üß§', label: 'Stumped' },\n    { type: 'hitWicket', emoji: 'üí•', label: 'Hit Wicket' },\n    { type: 'runOut', emoji: 'üèÉ', label: 'Run Out' },\n  ];\n\n  const handleConfirm = () => {\n    onConfirm(selectedDismissalType, selectedDismissalType === 'runOut' ? outBatsman : undefined);\n    handleClose();\n  };\n\n  const handleClose = () => {\n    setSelectedDismissalType('bowled');\n    setOutBatsman('');\n    onClose();\n  };\n\n  const canConfirm = selectedDismissalType !== 'runOut' || outBatsman !== '';\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      title=\"üèè Wicket!\"\n      size=\"md\"\n    >\n      <div className=\"space-y-6\">\n        {/* Dismissal Type Selection */}\n        <div>\n          <h4 className=\"text-sm font-medium mb-3 text-slate-300\">Select Dismissal Type</h4>\n          <div className=\"grid grid-cols-2 gap-3\">\n            {dismissalOptions.map(({ type, emoji, label }) => (\n              <Button\n                key={type}\n                onClick={() => setSelectedDismissalType(type as DismissalType)}\n                className={`h-10 text-sm ${\n                  selectedDismissalType === type\n                    ? 'bg-red-600/30 border-red-500/50 text-red-300'\n                    : 'bg-slate-600/20 hover:bg-slate-600/30'\n                }`}\n              >\n                {emoji} {label}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Run Out Batsman Selection */}\n        {selectedDismissalType === 'runOut' && currentBatsmen && (\n          <div>\n            <h4 className=\"text-sm font-medium mb-3 text-slate-300\">Select Batsman Run Out</h4>\n            <div className=\"space-y-2\">\n              <Button\n                onClick={() => setOutBatsman(currentBatsmen.striker.id)}\n                className={`w-full h-12 text-left px-4 ${\n                  outBatsman === currentBatsmen.striker.id\n                    ? 'bg-red-600/30 border-red-500/50 text-red-300'\n                    : 'bg-slate-600/20 hover:bg-slate-600/30'\n                }`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"font-medium\">{currentBatsmen.striker.name}</span>\n                  <span className=\"text-xs text-slate-400\">Striker</span>\n                </div>\n              </Button>\n              \n              <Button\n                onClick={() => setOutBatsman(currentBatsmen.nonStriker.id)}\n                className={`w-full h-12 text-left px-4 ${\n                  outBatsman === currentBatsmen.nonStriker.id\n                    ? 'bg-red-600/30 border-red-500/50 text-red-300'\n                    : 'bg-slate-600/20 hover:bg-slate-600/30'\n                }`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"font-medium\">{currentBatsmen.nonStriker.name}</span>\n                  <span className=\"text-xs text-slate-400\">Non-Striker</span>\n                </div>\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-3\">\n          <Button \n            onClick={handleConfirm} \n            disabled={!canConfirm}\n            className=\"flex-1 bg-red-600/20 hover:bg-red-600/30 text-red-400 disabled:opacity-50\"\n          >\n            Confirm Wicket\n          </Button>\n          <Button \n            onClick={handleClose}\n            className=\"flex-1 bg-slate-600/20 hover:bg-slate-600/30\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default WicketModal;\n","size_bytes":4543},"src/components/ui/ConfirmationDialog.tsx":{"content":"import React from 'react';\nimport Modal from './Modal';\nimport { Button } from './button';\nimport { AlertTriangle, CheckCircle, XCircle, Info } from 'lucide-react';\n\ninterface ConfirmationDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title: string;\n  message: string;\n  confirmText?: string;\n  cancelText?: string;\n  type?: 'danger' | 'warning' | 'success' | 'info';\n  isLoading?: boolean;\n}\n\nconst ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  title,\n  message,\n  confirmText = 'Confirm',\n  cancelText = 'Cancel',\n  type = 'warning',\n  isLoading = false\n}) => {\n  const getIcon = () => {\n    switch (type) {\n      case 'danger':\n        return <XCircle className=\"h-6 w-6 text-red-400\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-6 w-6 text-yellow-400\" />;\n      case 'success':\n        return <CheckCircle className=\"h-6 w-6 text-green-400\" />;\n      case 'info':\n        return <Info className=\"h-6 w-6 text-blue-400\" />;\n      default:\n        return <AlertTriangle className=\"h-6 w-6 text-yellow-400\" />;\n    }\n  };\n\n  const getConfirmButtonStyle = () => {\n    switch (type) {\n      case 'danger':\n        return 'bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white';\n      case 'warning':\n        return 'bg-gradient-to-r from-yellow-600 to-orange-600 hover:from-yellow-700 hover:to-orange-700 text-white';\n      case 'success':\n        return 'bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white';\n      case 'info':\n        return 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white';\n      default:\n        return 'bg-gradient-to-r from-yellow-600 to-orange-600 hover:from-yellow-700 hover:to-orange-700 text-white';\n    }\n  };\n\n  const handleConfirm = () => {\n    if (!isLoading) {\n      onConfirm();\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"sm\"\n      closeOnOverlayClick={!isLoading}\n      closeOnEscape={!isLoading}\n    >\n      <div className=\"text-center\">\n        {/* Icon */}\n        <div className=\"flex justify-center mb-4\">\n          {getIcon()}\n        </div>\n\n        {/* Title */}\n        <h3 className=\"text-lg font-semibold mb-3 text-slate-200\">\n          {title}\n        </h3>\n\n        {/* Message */}\n        <p className=\"text-slate-300 mb-6 text-sm leading-relaxed\">\n          {message}\n        </p>\n\n        {/* Actions */}\n        <div className=\"flex gap-3 justify-center\">\n          <Button\n            onClick={onClose}\n            disabled={isLoading}\n            className=\"flex-1 bg-slate-600/20 hover:bg-slate-600/30 text-white disabled:opacity-50\"\n          >\n            {cancelText}\n          </Button>\n          <Button\n            onClick={handleConfirm}\n            disabled={isLoading}\n            className={`flex-1 ${getConfirmButtonStyle()} disabled:opacity-50`}\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Processing...\n              </div>\n            ) : (\n              confirmText\n            )}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ConfirmationDialog;\n","size_bytes":3414},"src/components/ui/Modal.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X } from 'lucide-react';\nimport GlassCard from '../GlassCard';\nimport { Button } from './button';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title?: string;\n  children: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  showCloseButton?: boolean;\n  closeOnOverlayClick?: boolean;\n  closeOnEscape?: boolean;\n  className?: string;\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  children,\n  size = 'md',\n  showCloseButton = true,\n  closeOnOverlayClick = true,\n  closeOnEscape = true,\n  className = ''\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  // Handle escape key\n  useEffect(() => {\n    if (!closeOnEscape) return;\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen, onClose, closeOnEscape]);\n\n  // Focus management\n  useEffect(() => {\n    if (isOpen && modalRef.current) {\n      modalRef.current.focus();\n    }\n  }, [isOpen]);\n\n  // Prevent body scroll when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen]);\n\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-lg',\n    lg: 'max-w-2xl',\n    xl: 'max-w-4xl'\n  };\n\n  const handleOverlayClick = (event: React.MouseEvent) => {\n    if (closeOnOverlayClick && event.target === event.currentTarget) {\n      onClose();\n    }\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.2 }}\n          className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\"\n          onClick={handleOverlayClick}\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-labelledby={title ? \"modal-title\" : undefined}\n        >\n          <motion.div\n            ref={modalRef}\n            initial={{ opacity: 0, scale: 0.95, y: 20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: 20 }}\n            transition={{ duration: 0.2 }}\n            className={`w-full ${sizeClasses[size]} ${className}`}\n            tabIndex={-1}\n          >\n            <GlassCard className=\"relative\">\n              {/* Header */}\n              {(title || showCloseButton) && (\n                <div className=\"flex items-center justify-between p-6 pb-4\">\n                  {title && (\n                    <h2 \n                      id=\"modal-title\"\n                      className=\"text-xl font-semibold text-gradient-primary\"\n                    >\n                      {title}\n                    </h2>\n                  )}\n                  {showCloseButton && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={onClose}\n                      className=\"p-2 hover:bg-slate-600/20\"\n                      aria-label=\"Close modal\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              )}\n\n              {/* Content */}\n              <div className={title || showCloseButton ? \"px-6 pb-6\" : \"p-6\"}>\n                {children}\n              </div>\n            </GlassCard>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default Modal;\n","size_bytes":3833},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        // Celestial Cricket Variants\n        cosmic: \"glass-card border-glass-border/30 text-gradient-primary hover:scale-105 hover:shadow-glow-primary transition-all duration-300\",\n        score: \"glass-card border-primary/30 text-primary hover:bg-primary/20 hover:scale-110 hover:shadow-glow-primary transition-all duration-200\",\n        boundary: \"glass-card border-boundary-4/50 text-boundary-4 hover:bg-boundary-4/20 hover:scale-110 shadow-[0_0_10px_hsl(var(--boundary-4))] transition-all duration-200\",\n        six: \"glass-card border-boundary-6/50 text-boundary-6 hover:bg-boundary-6/20 hover:scale-110 shadow-[0_0_15px_hsl(var(--boundary-6))] transition-all duration-200\",\n        wicket: \"glass-card border-wicket/50 text-wicket hover:bg-wicket/20 hover:scale-105 shadow-[0_0_15px_hsl(var(--wicket))] transition-all duration-200\",\n        stadium: \"glass-card border-dot-ball/30 text-dot-ball hover:bg-dot-ball/20 hover:scale-105 transition-all duration-200\",\n        live: \"glass-card border-accent/50 text-accent hover:bg-accent/20 hover:scale-105 shadow-[0_0_10px_hsl(var(--accent))] transition-all duration-200\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2960},"src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3856},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":823},"src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":709}},"version":1}